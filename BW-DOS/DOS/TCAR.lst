mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/DOS/TCAR.ASM
     1 				; The!Cart Bank Switch
     2
     3
     4 				;
     5 				; OS equ
     6 				;
     7 = 0006			TRNSMZ  = $0006
     8 = 000A			DOSVEC  = $000a
     9 = 0042			CRITIC  = $0042
    10 = 0080			LOMEM   = $0080
    11
    12 = 03F8			BASICF  = $03f8
    13
    14 = 022F			SDMCTL  = $022f
    15 = 03FA			GINTLK  = $3fa
    16 = 03EB			CARTCK  = $3eb
    17 = 02E4			RAMSIZ	= $02e4
    18 = 02E5			MEMTOP  = $02E5
    19 = 02E7			MEMLO   = $02E7
    20
    21 = D013			TRIG3   = $d013
    22 = D400			DMACTL  = $d400 
    23 = D40E			NMIEN   = $d40e
    24
    25 = D301			PORTB   = $d301
    26
    27 = E474			WARMSV  = $e474
    28
    29 = 0008			WARMST = $08
    30 = 0009			BOOT?  = $09
    31 = 0244			COLDST = $0244
    32
    33 				; 
    34 				; IO EQUATES
    35 				; 
    36 = 0340			IOCB0        =  $0340     ; address of first IOCB
    37 = 0342			IOCB0.CMD    = IOCB0+2    ; where command goes in IOCB
    38 = 0343			IOCB0.STAT   = IOCB0+3    ; state returned
    39 = 0344			IOCB0.BUF    = IOCB0+4    ; buffer (or name) address
    40 = 0348			IOCB0.BUFLEN = IOCB0+8    ; max buffer length address
    41 = 034A			IOCB0.AUX1   = IOCB0+10   ; Auxilliary byte 1
    42 = 034B			IOCB0.AUX2   = IOCB0+11   ; Auxilliary byte 2
    43
    44 = 0350			IOCB1        =  $0350     ; address of first IOCB
    45 = 0352			IOCB1.CMD    = IOCB1+2    ; where command goes in IOCB
    46 = 0353			IOCB1.STAT   = IOCB1+3    ; state returned
    47 = 0354			IOCB1.BUF    = IOCB1+4    ; buffer (or name) address
    48 = 0358			IOCB1.BUFLEN = IOCB1+8    ; max buffer length address
    49 = 035A			IOCB1.AUX1   = IOCB1+10   ; Auxilliary byte 1
    50 = 035B			IOCB1.AUX2   = IOCB1+11   ; Auxilliary byte 2
    51
    52
    53 = 00FE			XIO.FMT = 254   ; Format command
    54 = 0005			XIO.INPUT = 5   ; Input Line
    55 = 0009			XIO.PRINT = 9   ; Print line
    56 = 0003			XIO.OPEN  = 3   ; Open
    57 = 000C			XIO.CLOSE = 12  ; Close
    58 = 0004			XIO.READ  = 4   ; Read
    59 = 0008			XIO.WRITE = 8   ; Write
    60 = 0007			XIO.GET   = 7   ; Get
    61 = 000B			XIO.PUT   = 11  ; Put
    62
    63 = 0088			XIO.STAT.EOF = $88
    64
    65 = E456			CIOV = $E456   ; the classic location
    66
    67 				;
    68 				; SpartaDOS 
    69 				;
    70 = 000A			SD_BUFOFF		= $0A ; offset in line buffer
    71 = 003F			SD_LBUF			= $3F ; offset to line buffer
    72 = 0003			SD_ZCRNAME		= $03 ; offset for jmp to crunch name
    73 = 0021			SD_COMFNAM		= $21 ; offset to result buffer for crunch name 
    74 = 000A			SD_LSIO			= $0A ; negative offset to SIO vector
    75
    76 				;
    77 				; BW-DOS
    78 				;
    79
    80 = 0015			BW_WARMST 		= $15 ; negative offset WARMST $0ce4
    81
    82 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    83 				; 
    84 				; The!Cart programming information
    85 				; (c) 2013 Matthias Reichl
    86 				;
    87 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    88 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    89 				; 25AA020A). The memory is addressed using 16384 8k banks
    90 				; (64 8k banks when using RAM instead of flash).
    91 				; 
    92 				; The cartridge configuration registers are located at
    93 				; $D5A0-$D5A8. All registers are read/write unless noted
    94 				; otherwise. Unused bits shall be written as '0' and
    95 				; always read back as '0'.
    96 				; 
    97 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    98 				; flash bank 0, writes to flash are disabled.
    99 				; 
   100 				; Depending on the selected cartridge mode additional
   101 				; registers are enabled at $D5xx.
   102 				; 
   103 				; The primary bank register also serves as a base bank
   104 				; register for the various sub-modes.
   105 				; 
   106 				; The secondary bank register is only used in "flexi mode".
   107 				;
   108
   109 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   110 				; 
   111 				; The!Cart Register (from-to,default)
   112 				;
   113
   114 				; Mode Select
   115 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   116 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   117 				; other than the ones listed here are reserved (and result
   118 				; in "cartridge off"):
   119 				; $00: off, cartridge disabled
   120 				; $01: 8k banks at $A000
   121 				; $02: AtariMax 1MBit / 128k
   122 				; $03: Atarimax 8MBit / 1MB
   123 				; $04: OSS M091
   124 				; $08: SDX 64k cart, $D5Ex banking
   125 				; $09: Diamond GOS 64k cart, $D5Dx banking
   126 				; $0A: Express 64k cart, $D57x banking
   127 				; $0C: Atrax 128k cart
   128 				; $0D: Williams 64k cart
   129 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   130 				; $21: standard 16k cart at $8000-$BFFF
   131 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   132 				; $23: Blizzard 16k
   133 				; $24: Sic!Cart 512k
   134 				; $28: 16k Mega cart
   135 				; $29: 32k Mega cart
   136 				; $2A: 64k Mega cart
   137 				; $2B: 128k Mega cart
   138 				; $2C: 256k Mega cart
   139 				; $2D: 512k Mega cart
   140 				; $2E: 1024k Mega cart
   141 				; $2F: 2048k Mega cart
   142 				; $30: 32k XEGS cart
   143 				; $31: 64k XEGS cart
   144 				; $32: 128k XEGS cart
   145 				; $33: 256k XEGS cart
   146 				; $34: 512k XEGS cart
   147 				; $35: 1024k XEGS cart
   148 				; $38: 32k SWXEGS cart
   149 				; $39: 64k SWXEGS cart
   150 				; $3A: 128k SWXEGS cart
   151 				; $3B: 256k SWXEGS cart
   152 				; $3C: 512k SWXEGS cart
   153 				; $3D: 1024k SWXEGS cart
   154 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   155 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   156 = 0004			TCMOSL.OSS   = $04
   157 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   158 				                         ; separate 8k banks at $A000 and $8000
   159 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   160
   161 				; how to figure out that The!Cart is not active?
   162 				; If the address is not used then the XL returns $ff but
   163 				; the XE (and old 800) return $d5 (high byte of address,
   164 				; the value of the last bus cycle)
   165 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   166 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   167
   168 				; Mode Flash/RAM Select
   169 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   170 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   171 				; bit 1: primary bank source (0=flash, 1=RAM)
   172 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   173 				; bit 3: secondary bank source (0=flash, 1=RAM)
   174 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   175 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   176
   177 				; Primary Bank
   178 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   179 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   180 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   181
   182 				; Secondary Bank 
   183 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   184 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   185 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   186
   187 				; SPI interface to EEPROM
   188 = D5A8			TCINEP = $d5a8
   189 				; bit 0: SPI CLK
   190 				; bit 1: SPI CS
   191 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   192
   193 				; configuration lock
   194 = D5AF			TCCOLO = $d5af
   195 				; Writing to this register disables "The!Cart" registers
   196 				; at $d5aX.
   197
   198
   199
   200
   201 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   202 				;
   203 				; Clear memory and init cart
   204 				;
   205
   206 						org $600
   207 				clear_cold
   208 				; clear zero page non OS part
   209 FFFF> 0600-0650> A9 00	        lda #$00
   210 0602 A2 7F				ldx #$7f
   211 0604 95 80		clrlpp  sta LOMEM,x
   212 0606 CA					dex
   213 0607 10 FB				bpl clrlpp
   214
   215 				; clear main memory
   216 0609 AD E7 02				lda MEMLO
   217 060C 8D 18 06				sta clrloop+1
   218 060F AD E8 02				lda MEMLO+1
   219 0612 8D 19 06				sta clrloop+2
   220 0615 A2 00				ldx #$00
   221 0617 8E FF FF		clrloop	stx $ffff
   222 061A EE 18 06				inc clrloop+1	; inc address
   223 061D D0 F8				bne clrloop
   224 061F EE 19 06				inc clrloop+2
   225 0622 AD 19 06				lda clrloop+2
   226 0625 C9 C0				cmp #$C0        ;  max RAMSIZ
   227 0627 90 EE				bcc clrloop
   228
   229 				; cold start cartridge
   230 0629 A9 FF				lda #$ff
   231 062B 8D 44 02		        sta COLDST
   232 062E A9 00				lda #$00
   233 0630 85 08				sta WARMST
   234 0632 A9 01				lda #$01
   235 0634 85 09				sta BOOT?
   236 0636 20 4E 06				jsr _inicarvec
   237 0639 A9 00				lda #$00 ;$ff
   238 063B 85 08				sta WARMST
   239 063D A9 00				lda #$00
   240 063F 8D 44 02				sta COLDST
   241 0642 A9 01				lda #$01
   242 0644 85 09				sta BOOT?
   243
   244 				; reset BW-DOS WARMST
   245 0646 A9 00				lda #$00
   246 0648 8D FF FF		_warmst	sta $FFFF
   247
   248 064B			just_warm			
   249 064B 4C 74 E4				jmp WARMSV      	; warm start
   250
   251 064E			_inicarvec
   252 064E 6C FE BF				jmp ($bffe)		; Cartridge init vector
   253
   254 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   255 				;
   256 				; Main
   257 				;
   258
   259 0651			        org $3000
   260 3000			start        
   261 				; message
   262 3000-331F> A2 54		        ldx #<startmsg.begin
   263 3002 A0 32		        ldy #>startmsg.begin
   264 3004 A9 1D		        lda #startmsg.end-startmsg.begin
   265 3006 20 F2 31		        jsr print
   266
   267 				; check for parameter
   268 3009 A0 0A		        ldy #SD_BUFOFF
   269 300B B1 0A		        lda (DOSVEC),y
   270 300D 18			        clc
   271 300E 69 3F		        adc #SD_LBUF
   272 3010 A8			        tay
   273 3011 B1 0A		        lda (DOSVEC),y
   274 3013 C9 9B		        cmp #$9B
   275 3015 F0 34		        beq prserr
   276
   277 3017 C8			        iny
   278 3018 8C F9 32		        sty paridy      ;set index to parameter
   279
   280 				; read sys file        
   281 301B 20 0B 32		        jsr open
   282 301E 30 1E		        bmi opnerr
   283 				                
   284 3020 20 2A 32		rdnext  jsr input       ; read line
   285 3023 30 36		        bmi filerr
   286 				                
   287 3025 A9 20		        lda #' '
   288 3027 CD 16 33		        cmp pbuffer+8   ; check for spaces at 9 and 12
   289 302A D0 2F		        bne filerr
   290 302C A9 20		        lda #' '
   291 302E CD 19 33		        cmp pbuffer+11
   292 3031 D0 28		        bne filerr
   293 				        
   294 3033 20 9B 31		        jsr check
   295 3036 B0 53		        bcs found
   296 				        
   297 3038 EE F8 32		        inc lcnt
   298 303B 4C 20 30		        jmp rdnext
   299
   300 				; exit with open error                  
   301 303E 20 49 32		opnerr  jsr close
   302 3041 A2 C5		        ldx #<erropn.begin
   303 3043 A0 32		        ldy #>erropn.begin
   304 3045 A9 22		        lda #erropn.end-erropn.begin
   305 3047 20 F2 31		        jsr print
   306 304A 60			        rts
   307
   308 				; exit with parse error                  
   309 304B 20 49 32		prserr  jsr close
   310 304E A2 71		        ldx #<errprs.begin
   311 3050 A0 32		        ldy #>errprs.begin
   312 3052 A9 17		        lda #errprs.end-errprs.begin
   313 3054 20 F2 31		        jsr print
   314 3057 20 19 31		        jsr list
   315 305A 60			        rts
   316
   317 				; exit with file error
   318 305B A9 88		filerr  lda #XIO.STAT.EOF     ; ignore end of file
   319 305D CD 53 03		        cmp IOCB1.STAT
   320 3060 F0 19		        beq filend
   321 3062 AD F8 32		        lda lcnt
   322 3065 20 DB 31		        jsr convha
   323 3068 8E AE 32		        stx errfil.line
   324 306B 8C AF 32		        sty errfil.line+1
   325 306E A2 88		        ldx #<errfil.begin
   326 3070 A0 32		        ldy #>errfil.begin
   327 3072 A9 29		        lda #errfil.end-errfil.begin
   328 3074 20 F2 31		        jsr print
   329 3077 20 49 32		        jsr close
   330 307A 60			        rts
   331 				        
   332 307B A2 B1		filend  ldx #<errnfd.begin
   333 307D A0 32		        ldy #>errnfd.begin
   334 307F A9 14		        lda #errnfd.end-errnfd.begin
   335 3081 20 F2 31		        jsr print
   336 3084 20 49 32		        jsr close
   337 3087 20 19 31		        jsr list
   338 308A 60			        rts
   339
   340 				; read mode and bank
   341 308B 20 49 32		found   jsr close
   342
   343 308E 20 76 31		        jsr rpara
   344
   345 				; set WARMST
   346 3091 38					sec
   347 3092 A5 0A				lda DOSVEC
   348 3094 E9 15				sbc #BW_WARMST
   349 3096 8D 49 06				sta _warmst+1        
   350 3099 A5 0B				lda DOSVEC+1
   351 309B E9 00				sbc #$00
   352 309D 8D 4A 06				sta _warmst+2
   353
   354 				; switch The!Cart
   355 30A0 A9 00		        lda #$00        ; switch off DMA
   356 30A2 8D 2F 02		        sta SDMCTL
   357 30A5 8D 00 D4		        sta DMACTL
   358
   359 30A8 78			        sei             ; mask all interrupts
   360 30A9 A9 00		        lda #$00
   361 30AB 8D 0E D4		        sta NMIEN
   362 				        
   363 30AE A9 02		        lda #$02		; switch off BASIC ROM
   364 30B0 0D 01 D3				ora PORTB
   365 30B3 8D 01 D3				sta PORTB
   366 30B6 A9 01				lda #$01
   367 30B8 8D F8 03				sta BASICF
   368
   369 				; set TC register
   370 30BB A9 00		        lda #$00
   371 30BD 8D A2 D5		        sta TCPBEN		; diable and set:
   372 30C0 8D A5 D5		        sta TCSBEN      ; disable Secondary Bank 
   373 30C3 8D A3 D5		        sta TCSBRL
   374 30C6 8D A4 D5		        sta TCSBRH
   375 30C9 8D A7 D5		        sta TCMOFR      ; cfg flash r/o
   376
   377 30CC AD FA 32		        lda mode        ; set mode
   378 30CF 8D A6 D5		        sta TCMOSL
   379 30D2 AA			        tax				; in X for cmp later
   380
   381 30D3 AD FB 32		        lda bankl		; set P bank
   382 30D6 8D A0 D5		        sta TCPBRL
   383 30D9 AD FC 32		        lda bankh
   384 30DC 8D A1 D5		        sta TCPBRH
   385 				        
   386 30DF A9 01				lda #$01		; finally enable and do not read/write
   387 30E1 8D A2 D5		        sta TCPBEN		; TC register any further
   388
   389 				; check for off
   390 30E4 E0 00		        cpx #TCMOSL.OFF
   391 30E6 F0 21		        beq _nocar
   392
   393 				; check for OSS
   394 30E8 E0 04				cpx #TCMOSL.OSS
   395 30EA D0 03				bne _inicar
   396 30EC 8D 00 D5				sta $d500		; reset OSS cartdridge
   397
   398 30EF			_inicar
   399 				; prepare init car and warm start
   400 30EF A9 01		        lda #$01        ; set cartridge flag
   401 30F1 8D 13 D0		        sta TRIG3
   402 30F4 8D FA 03		        sta GINTLK
   403 30F7 85 06		        sta TRNSMZ
   404 30F9 A9 00		        lda #$00        ; set cart check sum
   405 30FB AA			        tax
   406 30FC 18			        clc
   407 30FD 7D F0 BF		_ccloop adc $bff0,x
   408 3100 E8			        inx
   409 3101 D0 FA		        bne _ccloop
   410 3103 8D EB 03		        sta CARTCK
   411 3106 4C 00 06				jmp clear_cold
   412
   413 3109 A9 00		_nocar  lda #$00        ; set cartridge flag
   414 310B 8D 13 D0		        sta TRIG3
   415 310E 8D FA 03		        sta GINTLK
   416 3111 85 06		        sta TRNSMZ
   417 3113 8D EB 03		        sta CARTCK      ; set cart check sum
   418 3116 4C 4B 06				jmp just_warm
   419
   420 				; THE END
   421
   422 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   423 				; 
   424 				; List 
   425 				;
   426 3119 A2 E7		list    ldx #<erruse.begin
   427 311B A0 32		        ldy #>erruse.begin
   428 311D A9 11		        lda #erruse.end-erruse.begin
   429 311F 20 F2 31		        jsr print
   430 				        
   431 3122 A9 01		        lda #$01
   432 3124 8D F8 32		        sta lcnt
   433 				        
   434 3127 20 0B 32		        jsr open
   435 312A 10 03				bpl _list
   436 312C 4C 3E 30				jmp opnerr
   437
   438 312F 20 2A 32		_list   jsr input       ; read line
   439 3132 30 34		        bmi _lsterr
   440
   441 3134 A9 20		_lnext	lda #' '        ; reset current mark
   442 3136 8D 0D 33		        sta lbuffer+3
   443 				        
   444 3139 20 76 31		        jsr rpara
   445 				        
   446 313C AD A6 D5		        lda TCMOSL      ; cmp current with para
   447 313F CD FA 32		        cmp mode
   448 3142 D0 15		        bne _print
   449
   450 3144 AD A1 D5		        lda TCPBRH
   451 3147 CD FC 32		        cmp bankh
   452 314A D0 0D		        bne _print
   453
   454 314C AD A0 D5		        lda TCPBRL
   455 314F CD FB 32		        cmp bankl
   456 3152 D0 05		        bne _print
   457
   458 3154 A9 3E		        lda #'>'        ; set current mark
   459 3156 8D 0D 33		        sta lbuffer+3
   460
   461 3159			_print
   462 				;		lda #$9b        ; set return after name
   463 				;        sta pbuffer+8
   464
   465 3159 A2 0A		        ldx #<lbuffer
   466 315B A0 33		        ldy #>lbuffer
   467 315D A9 15		        lda #$15
   468 315F 20 F2 31		        jsr print
   469 				        
   470 3162 EE F8 32		        inc lcnt
   471 3165 4C 2F 31		        jmp _list 
   472
   473 3168 A9 88		_lsterr lda #XIO.STAT.EOF     ; ignore end of file
   474 316A CD 53 03		        cmp IOCB1.STAT
   475 316D F0 03		        beq _lstend
   476 316F 4C 5B 30				jmp filerr
   477 3172 20 49 32		_lstend	jsr close
   478 3175 60			        rts
   479
   480 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   481 				;
   482 				; Read parameter (mode, bank low and bank high)
   483 				;
   484 3176 AE 17 33		rpara   ldx pbuffer+9   ; read mode
   485 3179 AC 18 33		        ldy pbuffer+10
   486 317C 20 BB 31		        jsr convah
   487 317F 8D FA 32		        sta mode
   488
   489 3182 AE 1A 33		        ldx pbuffer+12  ; read bank low
   490 3185 AC 1B 33		        ldy pbuffer+13
   491 3188 20 BB 31		        jsr convah
   492 318B 8D FC 32		        sta bankh
   493
   494 318E AE 1C 33		        ldx pbuffer+14  ; read bank high
   495 3191 AC 1D 33		        ldy pbuffer+15
   496 3194 20 BB 31		        jsr convah
   497 3197 8D FB 32		        sta bankl
   498 				        
   499 319A 60			        rts
   500
   501 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   502 				; 
   503 				; Check Command Line with File Buffer
   504 				;
   505 				; IN    pbuffer   address to file buffer
   506 				;       paridy    index to parameter in DOSVEC
   507
   508 319B			check ; check command line and file buffer  
   509 319B A2 00		        ldx #$00
   510 319D AC F9 32		        ldy paridy 
   511 31A0 B1 0A		checkn  lda (DOSVEC),y
   512 31A2 DD 0E 33		        cmp pbuffer,x
   513 31A5 D0 05		        bne checkc
   514 31A7 E8			        inx
   515 31A8 C8			        iny
   516 31A9 4C A0 31		        jmp checkn
   517 				        
   518 31AC C9 9B		checkc  cmp #$9b
   519 31AE D0 09		        bne notfnd
   520 31B0 A9 20		        lda #' '
   521 31B2 DD 0E 33		        cmp pbuffer,x
   522 31B5 D0 02		        bne notfnd
   523 				        
   524 31B7 38			        sec
   525 31B8 60			        rts
   526
   527 31B9 18			notfnd  clc
   528 31BA 60			        rts
   529
   530 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   531 				; 
   532 				; Convert ATASCI to hex
   533 				;
   534 				; IN    X,Y   high, low ASCII digit 
   535 				;        A    hex value
   536
   537 31BB 8A			convah  txa
   538 31BC 38			        sec
   539 31BD E9 30		        sbc #'0'
   540 31BF C9 0A		        cmp #10
   541 31C1 90 02		        bcc hnum0_9
   542 31C3 E9 07		        sbc #'A'-'9'-1
   543 31C5 0A			hnum0_9 asl
   544 31C6 0A			        asl
   545 31C7 0A			        asl
   546 31C8 0A			        asl
   547 31C9 8D D9 31		        sta hbits+1
   548 31CC 98			        tya
   549 31CD 38			        sec
   550 31CE E9 30		        sbc #'0'
   551 31D0 C9 0A		        cmp #10
   552 31D2 90 02		        bcc lnum0_9
   553 31D4 E9 07		        sbc #'A'-'9'-1
   554 31D6 29 0F		lnum0_9 and #$0F
   555 31D8 09 00		hbits   ora #$00
   556 31DA 60			        rts
   557
   558 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   559 				; 
   560 				; Convert Hex to ATASCII
   561 				;
   562 				; IN    A    byte
   563 				; OUT X,Y    two ATASCII codes of hex representation
   564 				;
   565
   566 31DB			convha ; conv hex to atascii
   567 31DB 48			        pha                    
   568 31DC 4A			        lsr
   569 31DD 4A			        lsr
   570 31DE 4A			        lsr
   571 31DF 4A			        lsr
   572 31E0 F8			        sed        
   573 31E1 18			        clc
   574 31E2 69 90		        adc #$90
   575 31E4 69 40		        adc #$40
   576 31E6 AA			        tax
   577 31E7 68			        pla
   578 31E8 29 0F		        and #$0f
   579 31EA 18			        clc
   580 31EB 69 90		        adc #$90
   581 31ED 69 40		        adc #$40
   582 31EF A8			        tay
   583 31F0 D8			        cld            
   584 31F1 60			        rts
   585
   586 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   587 				; 
   588 				; Print Message
   589 				;
   590 				; IN    X,Y    low, high byte of address to message
   591 				;        A    length of message
   592
   593 31F2			print ; print message
   594 31F2 8D 48 03		        sta IOCB0.BUFLEN
   595 31F5 A9 00		        lda #$00
   596 31F7 8D 49 03		        sta IOCB0.BUFLEN+1
   597 31FA 8E 44 03		        stx IOCB0.BUF
   598 31FD 8C 45 03		        sty IOCB0.BUF+1
   599 3200 A9 0B		        lda #XIO.PUT
   600 3202 8D 42 03		        sta IOCB0.CMD
   601 3205 A2 00		        ldx #$00
   602 3207 20 56 E4		        jsr CIOV
   603 320A 60			        rts
   604
   605 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   606 				; 
   607 				; Open File for Read
   608 				;
   609 				; IN    X,Y    low, high byte of address to file name
   610 				;
   611
   612 320B			open ; open file
   613 320B A9 FD		        lda #<fname
   614 320D 8D 54 03		        sta IOCB1.BUF
   615 3210 A9 32		        lda #>fname
   616 3212 8D 55 03		        sta IOCB1.BUF+1
   617 3215 A9 04		        lda #XIO.READ
   618 3217 8D 5A 03		        sta IOCB1.AUX1
   619 321A A9 00		        lda #$00
   620 321C 8D 5B 03		        sta IOCB1.AUX2
   621 321F A9 03		        lda #XIO.OPEN
   622 3221 8D 52 03		        sta IOCB1.CMD
   623 3224 A2 10		        ldx #$10
   624 3226 20 56 E4		        jsr CIOV
   625 3229 60			        rts
   626
   627 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   628 				; 
   629 				; Input from File
   630 				;
   631 				; IN    X,Y    low, high byte of address to buffer
   632 				;       A      length of buffer
   633
   634 322A			input ; input file
   635 322A A9 0E		        lda #<pbuffer
   636 322C 8D 54 03		        sta IOCB1.BUF
   637 322F A9 33		        lda #>pbuffer
   638 3231 8D 55 03		        sta IOCB1.BUF+1
   639 3234 A9 11		        lda #$11
   640 3236 8D 58 03		        sta IOCB1.BUFLEN
   641 3239 A9 00		        lda #$00
   642 323B 8D 59 03		        sta IOCB1.BUFLEN+1        
   643 323E A9 05		        lda #XIO.INPUT
   644 3240 8D 52 03		        sta IOCB1.CMD
   645 3243 A2 10		        ldx #$10
   646 3245 20 56 E4		        jsr CIOV
   647 3248 60			        rts
   648 				        
   649 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   650 				; 
   651 				; Close File
   652 				;
   653 3249 A9 0C		close   lda #XIO.CLOSE
   654 324B 8D 52 03		        sta IOCB1.CMD
   655 324E A2 10		        ldx #$10
   656 3250 20 56 E4		        jsr CIOV
   657 3253 60			        rts
   658
   659
   660
   661 				; messages        
   662
   663 3254			startmsg.begin
   664 3254 43 41 52 20 66 6F +         .byte 'CAR for The!Cart ver46bw hjx',$9B
   665 3271			startmsg.end
   666
   667 3271			errprs.begin
   668 3271 20 20 45 72 72 6F +         .byte '  Error - no parameter',$9b
   669 3288			errprs.end
   670
   671 3288			errfil.begin
   672 3288 20 20 45 72 72 6F +         .byte '  Error - D1:TCAR.CFG',$9b
   673 329E 20 20 50 61 72 73 +         .byte '  Parsing line $'
   674 32AE			errfil.line
   675 32AE 58 58 9B		        .byte 'XX',$9B
   676 32B1			errfil.end
   677
   678 32B1			errnfd.begin
   679 32B1 20 20 45 72 72 6F +         .byte '  Error - not found',$9b
   680 32C5			errnfd.end
   681
   682 32C5			erropn.begin
   683 32C5 20 20 45 72 72 6F +         .byte '  Error - Cannot open D1:TCAR.CFG',$9b
   684 32E7			erropn.end
   685
   686 32E7			erruse.begin
   687 32E7 20 20 55 73 65 20 +         .byte '  Use TCAR name:',$9B
   688 32F8			erruse.end
   689
   690 				; variables
   691
   692 32F8 01			lcnt    .byte $01        
   693 32F9 00			paridy  .byte $00
   694 32FA 00			mode    .byte $00
   695 32FB 00			bankl   .byte $00
   696 32FC 00			bankh   .byte $00
   697 				        
   698 32FD 44 31 3A 3E 54 43 + fname   .byte 'D1:>TCAR.CFG',$9b
   699 330A 20 20 20 20		lbuffer .byte '    '
   700 330E 5F 5F 5F 5F 5F 5F + pbuffer .byte '________________',$9b,$FF
   701
   702
   703 				        
   704 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   705 				; 
   706 				; Run address
   707 				;
   708 02E0-02E1> 00 30		        run start
