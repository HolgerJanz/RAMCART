mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/DOS/TCAR.ASM
     1 				; The!Cart Bank Switch
     2
     3
     4 				;
     5 				; OS equ
     6 				;
     7 = 0006			TRNSMZ  = $0006
     8 = 000A			DOSVEC  = $000a
     9 = 0042			CRITIC  = $0042
    10 = 0080			LOMEM   = $0080
    11
    12 = 03F8			BASICF  = $03f8
    13
    14 = 022F			SDMCTL  = $022f
    15 = 03FA			GINTLK  = $3fa
    16 = 03EB			CARTCK  = $3eb
    17 = 02E4			RAMSIZ	= $02e4
    18 = 02E5			MEMTOP  = $02E5
    19 = 02E7			MEMLO   = $02E7
    20
    21 = D013			TRIG3   = $d013
    22 = D400			DMACTL  = $d400 
    23 = D40E			NMIEN   = $d40e
    24
    25 = D301			PORTB   = $d301
    26
    27 = E474			WARMSV  = $e474
    28
    29 = 0008			WARMST = $08
    30 = 0009			BOOT?  = $09
    31 = 0244			COLDST = $0244
    32
    33 				; 
    34 				; IO EQUATES
    35 				; 
    36 = 0340			IOCB0        =  $0340     ; address of first IOCB
    37 = 0342			IOCB0.CMD    = IOCB0+2    ; where command goes in IOCB
    38 = 0343			IOCB0.STAT   = IOCB0+3    ; state returned
    39 = 0344			IOCB0.BUF    = IOCB0+4    ; buffer (or name) address
    40 = 0348			IOCB0.BUFLEN = IOCB0+8    ; max buffer length address
    41 = 034A			IOCB0.AUX1   = IOCB0+10   ; Auxilliary byte 1
    42 = 034B			IOCB0.AUX2   = IOCB0+11   ; Auxilliary byte 2
    43
    44 = 0350			IOCB1        =  $0350     ; address of first IOCB
    45 = 0352			IOCB1.CMD    = IOCB1+2    ; where command goes in IOCB
    46 = 0353			IOCB1.STAT   = IOCB1+3    ; state returned
    47 = 0354			IOCB1.BUF    = IOCB1+4    ; buffer (or name) address
    48 = 0358			IOCB1.BUFLEN = IOCB1+8    ; max buffer length address
    49 = 035A			IOCB1.AUX1   = IOCB1+10   ; Auxilliary byte 1
    50 = 035B			IOCB1.AUX2   = IOCB1+11   ; Auxilliary byte 2
    51
    52
    53 = 00FE			XIO.FMT = 254   ; Format command
    54 = 0005			XIO.INPUT = 5   ; Input Line
    55 = 0009			XIO.PRINT = 9   ; Print line
    56 = 0003			XIO.OPEN  = 3   ; Open
    57 = 000C			XIO.CLOSE = 12  ; Close
    58 = 0004			XIO.READ  = 4   ; Read
    59 = 0008			XIO.WRITE = 8   ; Write
    60 = 0007			XIO.GET   = 7   ; Get
    61 = 000B			XIO.PUT   = 11  ; Put
    62
    63 = 0088			XIO.STAT.EOF = $88
    64
    65 = E456			CIOV = $E456   ; the classic location
    66
    67 				;
    68 				; SpartaDOS 
    69 				;
    70 = 000A			SD_BUFOFF		= $0A ; offset in line buffer
    71 = 003F			SD_LBUF			= $3F ; offset to line buffer
    72 = 0003			SD_ZCRNAME		= $03 ; offset for jmp to crunch name
    73 = 0021			SD_COMFNAM		= $21 ; offset to result buffer for crunch name 
    74 = 000A			SD_LSIO			= $0A ; negative offset to SIO vector
    75
    76 				;
    77 				; BW-DOS
    78 				;
    79
    80 = 0015			BW_WARMST 		= $15 ; negative offset WARMST $0ce4
    81
    82 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    83 				; 
    84 				; The!Cart programming information
    85 				; (c) 2013 Matthias Reichl
    86 				;
    87 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    88 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    89 				; 25AA020A). The memory is addressed using 16384 8k banks
    90 				; (64 8k banks when using RAM instead of flash).
    91 				; 
    92 				; The cartridge configuration registers are located at
    93 				; $D5A0-$D5A8. All registers are read/write unless noted
    94 				; otherwise. Unused bits shall be written as '0' and
    95 				; always read back as '0'.
    96 				; 
    97 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    98 				; flash bank 0, writes to flash are disabled.
    99 				; 
   100 				; Depending on the selected cartridge mode additional
   101 				; registers are enabled at $D5xx.
   102 				; 
   103 				; The primary bank register also serves as a base bank
   104 				; register for the various sub-modes.
   105 				; 
   106 				; The secondary bank register is only used in "flexi mode".
   107 				;
   108
   109 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   110 				; 
   111 				; The!Cart Register (from-to,default)
   112 				;
   113
   114 				; Mode Select
   115 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   116 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   117 				; other than the ones listed here are reserved (and result
   118 				; in "cartridge off"):
   119 				; $00: off, cartridge disabled
   120 				; $01: 8k banks at $A000
   121 				; $02: AtariMax 1MBit / 128k
   122 				; $03: Atarimax 8MBit / 1MB
   123 				; $04: OSS M091
   124 				; $08: SDX 64k cart, $D5Ex banking
   125 				; $09: Diamond GOS 64k cart, $D5Dx banking
   126 				; $0A: Express 64k cart, $D57x banking
   127 				; $0C: Atrax 128k cart
   128 				; $0D: Williams 64k cart
   129 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   130 				; $21: standard 16k cart at $8000-$BFFF
   131 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   132 				; $23: Blizzard 16k
   133 				; $24: Sic!Cart 512k
   134 				; $28: 16k Mega cart
   135 				; $29: 32k Mega cart
   136 				; $2A: 64k Mega cart
   137 				; $2B: 128k Mega cart
   138 				; $2C: 256k Mega cart
   139 				; $2D: 512k Mega cart
   140 				; $2E: 1024k Mega cart
   141 				; $2F: 2048k Mega cart
   142 				; $30: 32k XEGS cart
   143 				; $31: 64k XEGS cart
   144 				; $32: 128k XEGS cart
   145 				; $33: 256k XEGS cart
   146 				; $34: 512k XEGS cart
   147 				; $35: 1024k XEGS cart
   148 				; $38: 32k SWXEGS cart
   149 				; $39: 64k SWXEGS cart
   150 				; $3A: 128k SWXEGS cart
   151 				; $3B: 256k SWXEGS cart
   152 				; $3C: 512k SWXEGS cart
   153 				; $3D: 1024k SWXEGS cart
   154 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   155 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   156 = 0004			TCMOSL.OSS   = $04
   157 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   158 				                         ; separate 8k banks at $A000 and $8000
   159 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   160
   161 				; how to figure out that The!Cart is not active?
   162 				; If the address is not used then the XL returns $ff but
   163 				; the XE (and old 800) return $d5 (high byte of address,
   164 				; the value of the last bus cycle)
   165 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   166 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   167
   168 				; Mode Flash/RAM Select
   169 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   170 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   171 				; bit 1: primary bank source (0=flash, 1=RAM)
   172 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   173 				; bit 3: secondary bank source (0=flash, 1=RAM)
   174 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   175 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   176
   177 				; Primary Bank
   178 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   179 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   180 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   181
   182 				; Secondary Bank 
   183 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   184 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   185 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   186
   187 				; SPI interface to EEPROM
   188 = D5A8			TCINEP = $d5a8
   189 				; bit 0: SPI CLK
   190 				; bit 1: SPI CS
   191 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   192
   193 				; configuration lock
   194 = D5AF			TCCOLO = $d5af
   195 				; Writing to this register disables "The!Cart" registers
   196 				; at $d5aX.
   197
   198
   199
   200
   201 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   202 				;
   203 				; Clear memory and init cart
   204 				;
   205
   206 						org $600
   207 				clear_cold
   208 				; clear zero page non OS part
   209 FFFF> 0600-0650> A9 00	        lda #$00
   210 0602 A2 7F				ldx #$7f
   211 0604 95 80		clrlpp  sta LOMEM,x
   212 0606 CA					dex
   213 0607 10 FB				bpl clrlpp
   214
   215 				; clear main memory
   216 0609 AD E7 02				lda MEMLO
   217 060C 8D 18 06				sta clrloop+1
   218 060F AD E8 02				lda MEMLO+1
   219 0612 8D 19 06				sta clrloop+2
   220 0615 A2 00				ldx #$00
   221 0617 8E FF FF		clrloop	stx $ffff
   222 061A EE 18 06				inc clrloop+1	; inc address
   223 061D D0 F8				bne clrloop
   224 061F EE 19 06				inc clrloop+2
   225 0622 AD 19 06				lda clrloop+2
   226 0625 C9 C0				cmp #$C0        ;  max RAMSIZ
   227 0627 90 EE				bcc clrloop
   228
   229 				; cold start cartridge
   230 0629 A9 FF				lda #$ff
   231 062B 8D 44 02		        sta COLDST
   232 062E A9 00				lda #$00
   233 0630 85 08				sta WARMST
   234 0632 A9 01				lda #$01
   235 0634 85 09				sta BOOT?
   236 0636 20 4E 06				jsr _inicarvec
   237 0639 A9 00				lda #$00 ;$ff
   238 063B 85 08				sta WARMST
   239 063D A9 00				lda #$00
   240 063F 8D 44 02				sta COLDST
   241 0642 A9 01				lda #$01
   242 0644 85 09				sta BOOT?
   243
   244 				; reset BW-DOS WARMST
   245 0646 A9 00				lda #$00
   246 0648 8D FF FF		_warmst	sta $FFFF
   247
   248 064B			just_warm			
   249 064B 4C 74 E4				jmp WARMSV      	; warm start
   250
   251 064E			_inicarvec
   252 064E 6C FE BF				jmp ($bffe)		; Cartridge init vector
   253
   254 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   255 				;
   256 				; Main
   257 				;
   258
   259 0651			        org $3000
   260 3000			start        
   261 				; message
   262 3000-331D> A2 52		        ldx #<startmsg.begin
   263 3002 A0 32		        ldy #>startmsg.begin
   264 3004 A9 1D		        lda #startmsg.end-startmsg.begin
   265 3006 20 F0 31		        jsr print
   266
   267 				; check for parameter
   268 3009 A0 0A		        ldy #SD_BUFOFF
   269 300B B1 0A		        lda (DOSVEC),y
   270 300D 18			        clc
   271 300E 69 3F		        adc #SD_LBUF
   272 3010 A8			        tay
   273 3011 B1 0A		        lda (DOSVEC),y
   274 3013 C9 9B		        cmp #$9B
   275 3015 F0 34		        beq prserr
   276
   277 3017 C8			        iny
   278 3018 8C F7 32		        sty paridy      ;set index to parameter
   279
   280 				; read sys file        
   281 301B 20 09 32		        jsr open
   282 301E 30 1E		        bmi opnerr
   283 				                
   284 3020 20 28 32		rdnext  jsr input       ; read line
   285 3023 30 36		        bmi filerr
   286 				                
   287 3025 A9 20		        lda #' '
   288 3027 CD 14 33		        cmp pbuffer+8   ; check for spaces at 9 and 12
   289 302A D0 2F		        bne filerr
   290 302C A9 20		        lda #' '
   291 302E CD 17 33		        cmp pbuffer+11
   292 3031 D0 28		        bne filerr
   293 				        
   294 3033 20 99 31		        jsr check
   295 3036 B0 53		        bcs found
   296 				        
   297 3038 EE F6 32		        inc lcnt
   298 303B 4C 20 30		        jmp rdnext
   299
   300 				; exit with open error                  
   301 303E 20 47 32		opnerr  jsr close
   302 3041 A2 C3		        ldx #<erropn.begin
   303 3043 A0 32		        ldy #>erropn.begin
   304 3045 A9 22		        lda #erropn.end-erropn.begin
   305 3047 20 F0 31		        jsr print
   306 304A 60			        rts
   307
   308 				; exit with parse error                  
   309 304B 20 47 32		prserr  jsr close
   310 304E A2 6F		        ldx #<errprs.begin
   311 3050 A0 32		        ldy #>errprs.begin
   312 3052 A9 17		        lda #errprs.end-errprs.begin
   313 3054 20 F0 31		        jsr print
   314 3057 20 17 31		        jsr list
   315 305A 60			        rts
   316
   317 				; exit with file error
   318 305B A9 88		filerr  lda #XIO.STAT.EOF     ; ignore end of file
   319 305D CD 53 03		        cmp IOCB1.STAT
   320 3060 F0 19		        beq filend
   321 3062 AD F6 32		        lda lcnt
   322 3065 20 D9 31		        jsr convha
   323 3068 8E AC 32		        stx errfil.line
   324 306B 8C AD 32		        sty errfil.line+1
   325 306E A2 86		        ldx #<errfil.begin
   326 3070 A0 32		        ldy #>errfil.begin
   327 3072 A9 29		        lda #errfil.end-errfil.begin
   328 3074 20 F0 31		        jsr print
   329 3077 20 47 32		        jsr close
   330 307A 60			        rts
   331 				        
   332 307B A2 AF		filend  ldx #<errnfd.begin
   333 307D A0 32		        ldy #>errnfd.begin
   334 307F A9 14		        lda #errnfd.end-errnfd.begin
   335 3081 20 F0 31		        jsr print
   336 3084 20 47 32		        jsr close
   337 3087 20 17 31		        jsr list
   338 308A 60			        rts
   339
   340 				; read mode and bank
   341 308B 20 47 32		found   jsr close
   342
   343 308E 20 74 31		        jsr rpara
   344
   345 				; set WARMST
   346 3091 38					sec
   347 3092 A5 0A				lda DOSVEC
   348 3094 E9 15				sbc #BW_WARMST
   349 3096 8D 49 06				sta _warmst+1        
   350 3099 A5 0B				lda DOSVEC+1
   351 309B E9 00				sbc #$00
   352 309D 8D 4A 06				sta _warmst+2
   353
   354 				; switch The!Cart
   355 30A0 A9 00		        lda #$00        ; switch off DMA
   356 30A2 8D 2F 02		        sta SDMCTL
   357 30A5 8D 00 D4		        sta DMACTL
   358
   359 30A8 78			        sei             ; mask all interrupts
   360 30A9 A9 00		        lda #$00
   361 30AB 8D 0E D4		        sta NMIEN
   362 				        
   363 30AE A9 02		        lda #$02		; switch off BASIC ROM
   364 30B0 0D 01 D3				ora PORTB
   365 30B3 8D 01 D3				sta PORTB
   366 30B6 A9 01				lda #$01
   367 30B8 8D F8 03				sta BASICF
   368
   369 				; set TC register
   370 30BB 8D A2 D5		        sta TCPBEN		; diable and set:
   371 30BE 8D A3 D5		        sta TCSBRL      ; disable Secondary Bank 
   372 30C1 8D A4 D5		        sta TCSBRH
   373 30C4 8D A5 D5		        sta TCSBEN
   374 30C7 8D A7 D5		        sta TCMOFR      ; cfg flash r/o
   375
   376 30CA AD F8 32		        lda mode        ; set mode
   377 30CD 8D A6 D5		        sta TCMOSL
   378 30D0 AA			        tax				; in X for cmp later
   379
   380 30D1 AD F9 32		        lda bankl		; set P bank
   381 30D4 8D A0 D5		        sta TCPBRL
   382 30D7 AD FA 32		        lda bankh
   383 30DA 8D A1 D5		        sta TCPBRH
   384 				        
   385 30DD A9 01				lda #$01		; finally enable and do not read/write
   386 30DF 8D A2 D5		        sta TCPBEN		; TC register any further
   387
   388 				; check for off
   389 30E2 E0 00		        cpx #TCMOSL.OFF
   390 30E4 F0 21		        beq _nocar
   391
   392 				; check for OSS
   393 30E6 E0 04				cpx #TCMOSL.OSS
   394 30E8 D0 03				bne _inicar
   395 30EA 8D 00 D5				sta $d500		; reset OSS cartdridge
   396
   397 30ED			_inicar
   398 				; prepare init car and warm start
   399 30ED A9 01		        lda #$01        ; set cartridge flag
   400 30EF 8D 13 D0		        sta TRIG3
   401 30F2 8D FA 03		        sta GINTLK
   402 30F5 85 06		        sta TRNSMZ
   403 30F7 A9 00		        lda #$00        ; set cart check sum
   404 30F9 AA			        tax
   405 30FA 18			        clc
   406 30FB 7D F0 BF		_ccloop adc $bff0,x
   407 30FE E8			        inx
   408 30FF D0 FA		        bne _ccloop
   409 3101 8D EB 03		        sta CARTCK
   410 3104 4C 00 06				jmp clear_cold
   411
   412 3107 A9 00		_nocar  lda #$00        ; set cartridge flag
   413 3109 8D 13 D0		        sta TRIG3
   414 310C 8D FA 03		        sta GINTLK
   415 310F 85 06		        sta TRNSMZ
   416 3111 8D EB 03		        sta CARTCK      ; set cart check sum
   417 3114 4C 4B 06				jmp just_warm
   418
   419 				; THE END
   420
   421 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   422 				; 
   423 				; List 
   424 				;
   425 3117 A2 E5		list    ldx #<erruse.begin
   426 3119 A0 32		        ldy #>erruse.begin
   427 311B A9 11		        lda #erruse.end-erruse.begin
   428 311D 20 F0 31		        jsr print
   429 				        
   430 3120 A9 01		        lda #$01
   431 3122 8D F6 32		        sta lcnt
   432 				        
   433 3125 20 09 32		        jsr open
   434 3128 10 03				bpl _list
   435 312A 4C 3E 30				jmp opnerr
   436
   437 312D 20 28 32		_list   jsr input       ; read line
   438 3130 30 34		        bmi _lsterr
   439
   440 3132 A9 20		_lnext	lda #' '        ; reset current mark
   441 3134 8D 0B 33		        sta lbuffer+3
   442 				        
   443 3137 20 74 31		        jsr rpara
   444 				        
   445 313A AD A6 D5		        lda TCMOSL      ; cmp current with para
   446 313D CD F8 32		        cmp mode
   447 3140 D0 15		        bne _print
   448
   449 3142 AD A1 D5		        lda TCPBRH
   450 3145 CD FA 32		        cmp bankh
   451 3148 D0 0D		        bne _print
   452
   453 314A AD A0 D5		        lda TCPBRL
   454 314D CD F9 32		        cmp bankl
   455 3150 D0 05		        bne _print
   456
   457 3152 A9 3E		        lda #'>'        ; set current mark
   458 3154 8D 0B 33		        sta lbuffer+3
   459
   460 3157			_print
   461 				;		lda #$9b        ; set return after name
   462 				;        sta pbuffer+8
   463
   464 3157 A2 08		        ldx #<lbuffer
   465 3159 A0 33		        ldy #>lbuffer
   466 315B A9 15		        lda #$15
   467 315D 20 F0 31		        jsr print
   468 				        
   469 3160 EE F6 32		        inc lcnt
   470 3163 4C 2D 31		        jmp _list 
   471
   472 3166 A9 88		_lsterr lda #XIO.STAT.EOF     ; ignore end of file
   473 3168 CD 53 03		        cmp IOCB1.STAT
   474 316B F0 03		        beq _lstend
   475 316D 4C 5B 30				jmp filerr
   476 3170 20 47 32		_lstend	jsr close
   477 3173 60			        rts
   478
   479 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480 				;
   481 				; Read parameter (mode, bank low and bank high)
   482 				;
   483 3174 AE 15 33		rpara   ldx pbuffer+9   ; read mode
   484 3177 AC 16 33		        ldy pbuffer+10
   485 317A 20 B9 31		        jsr convah
   486 317D 8D F8 32		        sta mode
   487
   488 3180 AE 18 33		        ldx pbuffer+12  ; read bank low
   489 3183 AC 19 33		        ldy pbuffer+13
   490 3186 20 B9 31		        jsr convah
   491 3189 8D FA 32		        sta bankh
   492
   493 318C AE 1A 33		        ldx pbuffer+14  ; read bank high
   494 318F AC 1B 33		        ldy pbuffer+15
   495 3192 20 B9 31		        jsr convah
   496 3195 8D F9 32		        sta bankl
   497 				        
   498 3198 60			        rts
   499
   500 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   501 				; 
   502 				; Check Command Line with File Buffer
   503 				;
   504 				; IN    pbuffer   address to file buffer
   505 				;       paridy    index to parameter in DOSVEC
   506
   507 3199			check ; check command line and file buffer  
   508 3199 A2 00		        ldx #$00
   509 319B AC F7 32		        ldy paridy 
   510 319E B1 0A		checkn  lda (DOSVEC),y
   511 31A0 DD 0C 33		        cmp pbuffer,x
   512 31A3 D0 05		        bne checkc
   513 31A5 E8			        inx
   514 31A6 C8			        iny
   515 31A7 4C 9E 31		        jmp checkn
   516 				        
   517 31AA C9 9B		checkc  cmp #$9b
   518 31AC D0 09		        bne notfnd
   519 31AE A9 20		        lda #' '
   520 31B0 DD 0C 33		        cmp pbuffer,x
   521 31B3 D0 02		        bne notfnd
   522 				        
   523 31B5 38			        sec
   524 31B6 60			        rts
   525
   526 31B7 18			notfnd  clc
   527 31B8 60			        rts
   528
   529 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   530 				; 
   531 				; Convert ATASCI to hex
   532 				;
   533 				; IN    X,Y   high, low ASCII digit 
   534 				;        A    hex value
   535
   536 31B9 8A			convah  txa
   537 31BA 38			        sec
   538 31BB E9 30		        sbc #'0'
   539 31BD C9 0A		        cmp #10
   540 31BF 90 02		        bcc hnum0_9
   541 31C1 E9 07		        sbc #'A'-'9'-1
   542 31C3 0A			hnum0_9 asl
   543 31C4 0A			        asl
   544 31C5 0A			        asl
   545 31C6 0A			        asl
   546 31C7 8D D7 31		        sta hbits+1
   547 31CA 98			        tya
   548 31CB 38			        sec
   549 31CC E9 30		        sbc #'0'
   550 31CE C9 0A		        cmp #10
   551 31D0 90 02		        bcc lnum0_9
   552 31D2 E9 07		        sbc #'A'-'9'-1
   553 31D4 29 0F		lnum0_9 and #$0F
   554 31D6 09 00		hbits   ora #$00
   555 31D8 60			        rts
   556
   557 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   558 				; 
   559 				; Convert Hex to ATASCII
   560 				;
   561 				; IN    A    byte
   562 				; OUT X,Y    two ATASCII codes of hex representation
   563 				;
   564
   565 31D9			convha ; conv hex to atascii
   566 31D9 48			        pha                    
   567 31DA 4A			        lsr
   568 31DB 4A			        lsr
   569 31DC 4A			        lsr
   570 31DD 4A			        lsr
   571 31DE F8			        sed        
   572 31DF 18			        clc
   573 31E0 69 90		        adc #$90
   574 31E2 69 40		        adc #$40
   575 31E4 AA			        tax
   576 31E5 68			        pla
   577 31E6 29 0F		        and #$0f
   578 31E8 18			        clc
   579 31E9 69 90		        adc #$90
   580 31EB 69 40		        adc #$40
   581 31ED A8			        tay
   582 31EE D8			        cld            
   583 31EF 60			        rts
   584
   585 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   586 				; 
   587 				; Print Message
   588 				;
   589 				; IN    X,Y    low, high byte of address to message
   590 				;        A    length of message
   591
   592 31F0			print ; print message
   593 31F0 8D 48 03		        sta IOCB0.BUFLEN
   594 31F3 A9 00		        lda #$00
   595 31F5 8D 49 03		        sta IOCB0.BUFLEN+1
   596 31F8 8E 44 03		        stx IOCB0.BUF
   597 31FB 8C 45 03		        sty IOCB0.BUF+1
   598 31FE A9 0B		        lda #XIO.PUT
   599 3200 8D 42 03		        sta IOCB0.CMD
   600 3203 A2 00		        ldx #$00
   601 3205 20 56 E4		        jsr CIOV
   602 3208 60			        rts
   603
   604 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   605 				; 
   606 				; Open File for Read
   607 				;
   608 				; IN    X,Y    low, high byte of address to file name
   609 				;
   610
   611 3209			open ; open file
   612 3209 A9 FB		        lda #<fname
   613 320B 8D 54 03		        sta IOCB1.BUF
   614 320E A9 32		        lda #>fname
   615 3210 8D 55 03		        sta IOCB1.BUF+1
   616 3213 A9 04		        lda #XIO.READ
   617 3215 8D 5A 03		        sta IOCB1.AUX1
   618 3218 A9 00		        lda #$00
   619 321A 8D 5B 03		        sta IOCB1.AUX2
   620 321D A9 03		        lda #XIO.OPEN
   621 321F 8D 52 03		        sta IOCB1.CMD
   622 3222 A2 10		        ldx #$10
   623 3224 20 56 E4		        jsr CIOV
   624 3227 60			        rts
   625
   626 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627 				; 
   628 				; Input from File
   629 				;
   630 				; IN    X,Y    low, high byte of address to buffer
   631 				;       A      length of buffer
   632
   633 3228			input ; input file
   634 3228 A9 0C		        lda #<pbuffer
   635 322A 8D 54 03		        sta IOCB1.BUF
   636 322D A9 33		        lda #>pbuffer
   637 322F 8D 55 03		        sta IOCB1.BUF+1
   638 3232 A9 11		        lda #$11
   639 3234 8D 58 03		        sta IOCB1.BUFLEN
   640 3237 A9 00		        lda #$00
   641 3239 8D 59 03		        sta IOCB1.BUFLEN+1        
   642 323C A9 05		        lda #XIO.INPUT
   643 323E 8D 52 03		        sta IOCB1.CMD
   644 3241 A2 10		        ldx #$10
   645 3243 20 56 E4		        jsr CIOV
   646 3246 60			        rts
   647 				        
   648 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   649 				; 
   650 				; Close File
   651 				;
   652 3247 A9 0C		close   lda #XIO.CLOSE
   653 3249 8D 52 03		        sta IOCB1.CMD
   654 324C A2 10		        ldx #$10
   655 324E 20 56 E4		        jsr CIOV
   656 3251 60			        rts
   657
   658
   659
   660 				; messages        
   661
   662 3252			startmsg.begin
   663 3252 43 41 52 20 66 6F +         .byte 'CAR for The!Cart ver45bw hjx',$9B
   664 326F			startmsg.end
   665
   666 326F			errprs.begin
   667 326F 20 20 45 72 72 6F +         .byte '  Error - no parameter',$9b
   668 3286			errprs.end
   669
   670 3286			errfil.begin
   671 3286 20 20 45 72 72 6F +         .byte '  Error - D1:TCAR.CFG',$9b
   672 329C 20 20 50 61 72 73 +         .byte '  Parsing line $'
   673 32AC			errfil.line
   674 32AC 58 58 9B		        .byte 'XX',$9B
   675 32AF			errfil.end
   676
   677 32AF			errnfd.begin
   678 32AF 20 20 45 72 72 6F +         .byte '  Error - not found',$9b
   679 32C3			errnfd.end
   680
   681 32C3			erropn.begin
   682 32C3 20 20 45 72 72 6F +         .byte '  Error - Cannot open D1:TCAR.CFG',$9b
   683 32E5			erropn.end
   684
   685 32E5			erruse.begin
   686 32E5 20 20 55 73 65 20 +         .byte '  Use TCAR name:',$9B
   687 32F6			erruse.end
   688
   689 				; variables
   690
   691 32F6 01			lcnt    .byte $01        
   692 32F7 00			paridy  .byte $00
   693 32F8 00			mode    .byte $00
   694 32F9 00			bankl   .byte $00
   695 32FA 00			bankh   .byte $00
   696 				        
   697 32FB 44 31 3A 3E 54 43 + fname   .byte 'D1:>TCAR.CFG',$9b
   698 3308 20 20 20 20		lbuffer .byte '    '
   699 330C 5F 5F 5F 5F 5F 5F + pbuffer .byte '________________',$9b,$FF
   700
   701
   702 				        
   703 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   704 				; 
   705 				; Run address
   706 				;
   707 02E0-02E1> 00 30		        run start
