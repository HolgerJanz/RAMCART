mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCSETDRV.ASM
     1 				;
     2 				; Set drive for TCDRIVER the Ramdisk and Flashdisk driver for The!Cart
     3 				;
     4
     5 				; System equates
     6 				;
     7 				; OS EQUATES
     8 				; ----------
     9 				; 
    10 				; IO EQUATES
    11 				; 
    12 = 0002			ICCOM       = $0002
    13 = 0008			ICBLL       = $0008
    14 = 0009			ICBLH       = $0009
    15 = 0340			IOCB0       = $0340
    16
    17 = 000A			DOSVEC		= $000A
    18 = 02E7			MEMLO		= $02e7
    19 				; 
    20 				; ROM VECTORS
    21 				; 
    22 = E456			CIOV        = $E456
    23
    24 				;
    25 				; SpartaDOS 
    26 				;
    27 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    28 = 003F			SD_LBUF        = $3F ; offset to line buffer
    29 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    30 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    31 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    32
    33 				; 
    34 				; The!Cart Register (from-to,default)
    35 				;
    36
    37 				; Mode Select
    38 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
    39 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
    40 				; other than the ones listed here are reserved (and result
    41 				; in "cartridge off"):
    42 				; $00: off, cartridge disabled
    43 				; $01: 8k banks at $A000
    44 				; $02: AtariMax 1MBit / 128k
    45 				; $03: Atarimax 8MBit / 1MB
    46 				; $04: OSS M091
    47 				; $08: SDX 64k cart, $D5Ex banking
    48 				; $09: Diamond GOS 64k cart, $D5Dx banking
    49 				; $0A: Express 64k cart, $D57x banking
    50 				; $0C: Atrax 128k cart
    51 				; $0D: Williams 64k cart
    52 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
    53 				; $21: standard 16k cart at $8000-$BFFF
    54 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
    55 				; $23: Blizzard 16k
    56 				; $24: Sic!Cart 512k
    57 				; $28: 16k Mega cart
    58 				; $29: 32k Mega cart
    59 				; $2A: 64k Mega cart
    60 				; $2B: 128k Mega cart
    61 				; $2C: 256k Mega cart
    62 				; $2D: 512k Mega cart
    63 				; $2E: 1024k Mega cart
    64 				; $2F: 2048k Mega cart
    65 				; $30: 32k XEGS cart
    66 				; $31: 64k XEGS cart
    67 				; $32: 128k XEGS cart
    68 				; $33: 256k XEGS cart
    69 				; $34: 512k XEGS cart
    70 				; $35: 1024k XEGS cart
    71 				; $38: 32k SWXEGS cart
    72 				; $39: 64k SWXEGS cart
    73 				; $3A: 128k SWXEGS cart
    74 				; $3B: 256k SWXEGS cart
    75 				; $3C: 512k SWXEGS cart
    76 				; $3D: 1024k SWXEGS cart
    77 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
    78 = 0004			TCMOSL.OSS   = $04
    79 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
    80 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
    81 				                         ; separate 8k banks at $A000 and $8000
    82 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
    83
    84 				; how to figure out that The!Cart is not active?
    85 				; If the address is not used then the XL returns $ff but
    86 				; the XE (and old 800) return $d5 (high byte of address,
    87 				; the value of the last bus cycle)
    88 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
    89 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
    90
    91 				; Mode Flash/RAM Select
    92 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
    93 				; bit 0: primary bank write enable (0=readOnly, 1=write)
    94 				; bit 1: primary bank source (0=flash, 1=RAM)
    95 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
    96 				; bit 3: secondary bank source (0=flash, 1=RAM)
    97 = 0000			TCMOFR.FLASH = $00
    98 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
    99 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   100
   101 				; Primary Bank
   102 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   103 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   104 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   105
   106 				; Secondary Bank 
   107 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   108 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   109 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   110
   111 				; SPI interface to EEPROM
   112 = D5A8			TCINEP = $d5a8
   113 				; bit 0: SPI CLK
   114 				; bit 1: SPI CS
   115 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   116
   117 				; configuration lock
   118 = D5AF			TCCOLO = $d5af
   119 				; Writing to this register disables "The!Cart" registers
   120 				; at $d5aX.
   121
   122
   123 							org $3000
   124 				start
   125 				; info message
   126 FFFF> 3000-3299> 20 64 +             jsr print
   127 3003 54 68 65 21 43 61 +             .byte 'The!Cart Set Drive ver42bw hjx',$9B,$FF
   128
   129 				; !!! DO NOT TOUCH TC REGISTERS, OSS CARTRIDGES HATE IT !!!!
   130 				; check for The!Cart
   131 				;             lda TCMOSL
   132 				;             cmp #TCMOSL.XLLOCK
   133 				;             beq noRamDisk
   134 				;             cmp #TCMOSL.XELOCK
   135 				;             bne checkDOS
   136 				;noRamDisk
   137 				;            jsr print
   138 				;            .byte '  Error: The!Cart not found',$9B,$FF
   139 				;            jmp printHelp
   140
   141 3023			checkDOS
   142 3023 AD E7 02					lda MEMLO			; calc MEMLO-$08
   143 3026 38						sec
   144 3027 E9 08					sbc #$08
   145 3029 8D 4E 30					sta checkDOSel+1
   146 302C AD E8 02					lda MEMLO+1
   147 302F E9 00					sbc #$00
   148 3031 8D 55 30					sta checkDOSeh+1
   149 3034 A2 07					ldx #$07
   150 3036			checkDOSloop			
   151 3036 BD FA 31					lda checkArray,X
   152 3039 49 FF					eor #$ff
   153 303B DD 00 07		checkDOSa	cmp $700,X
   154 303E D0 05					bne noCheckArray
   155 3040 CA						dex 
   156 3041 10 F3					bpl checkDOSloop
   157 3043 30 38					bmi setConfAddress
   158 3045			noCheckArray			
   159 3045 EE 3C 30					inc checkDOSa+1		; increment address
   160 3048 D0 03					bne *+5
   161 304A EE 3D 30					inc checkDOSa+2
   162 							
   163 304D A9 00		checkDOSel	lda #$00			; check address for MEMLO
   164 304F CD 3C 30					cmp checkDOSa+1
   165 3052 D0 CF					bne checkDOS
   166 3054 A9 30		checkDOSeh	lda #$30
   167 3056 CD 3D 30					cmp checkDOSa+2
   168 3059 D0 C8					bne checkDOS		
   169 305B			noBWTCDOS			
   170 305B 20 64 32		            jsr print
   171 305E 20 20 45 72 72 6F +             .byte '  Error: No BW-DOS 1.31 TC',$9B,$FF
   172 307A 4C 2C 31		            jmp printHelp
   173
   174 307D			setConfAddress
   175 307D AD 3C 30		            lda checkDOSa+1
   176 3080 18			            clc
   177 3081 69 08		            adc #$08
   178 3083 8D DF 30		            sta confAddr+1
   179 3086 8D E8 30		            sta disAddr+1
   180 3089 AD 3D 30		            lda checkDOSa+2
   181 308C 69 00		            adc #$00
   182 308E 8D E0 30		            sta confAddr+2
   183 3091 8D E9 30		            sta disAddr+2
   184
   185 3094			startParameter
   186 3094 20 35 32					jsr paramCheck			; check for parameter
   187 3097 90 1C					bcc parameterEnd
   188 3099 20 47 32					jsr paramGet
   189 309C D0 71					bne parameterError
   190
   191 309E A0 22		            ldy #SD_COMFNAM+1		; get drive number
   192 30A0 B1 0A		            lda (DOSVEC),Y
   193 30A2 29 0F		            and #$0f
   194 30A4 AE AE 30		            ldx driveCnt+1
   195 30A7 9D F5 31		            sta driveNumbers,X
   196
   197 30AA EE AE 30					inc driveCnt+1			; next
   198 30AD A9 00		driveCnt	lda #$00
   199 30AF C9 05					cmp #$05
   200 30B1 D0 E1					bne startParameter
   201 30B3 F0 00					beq parameterEnd
   202
   203 30B5			parameterEnd
   204 30B5 AD AE 30					lda driveCnt+1
   205 30B8 F0 2B					beq displayDrive		; check no parameter
   206 30BA 20 35 32					jsr paramCheck			; check for too many parameter
   207 30BD B0 50					bcs parameterError
   208
   209 30BF 20 64 32					jsr print
   210 30C2 4E 65 77 20 63 6F + 			.byte 'New configuration:',$9b,$FF
   211 30D6 20 02 32					jsr printDrive
   212
   213 30D9 A2 04					ldx #$04
   214 30DB BD F5 31		driveLoop	lda driveNumbers,X
   215 30DE 9D 39 21		confAddr	sta $2139,X
   216 30E1 CA						dex
   217 30E2 10 F7					bpl driveLoop
   218 							
   219 30E4 60						rts
   220
   221 30E5			displayDrive
   222 30E5 A2 04					ldx #$04
   223 30E7			driveLoop2
   224 30E7 BD 39 21		disAddr		lda $2139,X
   225 30EA 9D F5 31					sta driveNumbers,X
   226 30ED CA						dex
   227 30EE 10 F7					bpl driveLoop2
   228 							
   229 30F0 20 64 32					jsr print
   230 30F3 43 75 72 72 65 6E + 			.byte 'Current configuration:',$9b,$FF
   231 310B 20 02 32					jsr printDrive 
   232 310E 60						rts
   233
   234 310F			parameterError
   235 310F 20 64 32		            jsr print
   236 3112 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter',$9B,$FF
   237
   238 312C			printHelp
   239 312C 20 64 32		            jsr print
   240 312F 20 20 50 61 72 61 +             .byte '  Parameter: Dx: [Da:]..[Dd:]',$9B
   241 314D 20 20 20 20 78 20 +             .byte '    x - number for ramdisk',$9B
   242 3168 20 20 20 20 61 2D +             .byte '    a-d - number for flash disk 1-4',$9B
   243 318C 20 20 55 73 65 20 + 			.byte '  Use D0: to disable drive.',$9b
   244 31A8 20 20 55 73 65 20 +             .byte '  Use shift+return/esc in start menu.',$9B
   245 31CE 20 20 49 66 20 44 +             .byte '  If Dx: equals Da-d:, Dx: precedes.',$9B,$FF
   246 31F4 60			            rts
   247
   248 31F5			driveNumbers
   249 31F5 00						.byte $00	; Ramdisk
   250 31F6 00						.byte $00	; F1:
   251 31F7 00						.byte $00	; F2:
   252 31F8 00						.byte $00	; F3:
   253 31F9 00						.byte $00	; F4:
   254
   255 				;checkArray	.byte $b0,$70,$30,$f0,$3f,$3f,$3f,$3e
   256 				; must be hidden else it would be found in sector buffer
   257 31FA 4F 8F CF 0F C0 C0 + checkArray	.byte $4f,$8f,$Cf,$0f,$c0,$c0,$c0,$c1
   258
   259 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   260 				;
   261 				; print drive config
   262 				;
   263 3202			printDrive
   264 3202 A2 00		loop		ldx #$00
   265 3204 BD F5 31					lda driveNumbers,X
   266 3207 09 30					ora #$30
   267 3209 8D 14 32					sta printDrv
   268 320C 20 64 32					jsr print
   269 320F 52 41 4D 3D 44	printDev	.byte 'RAM=D'
   270 3214 20 FF		printDrv	.byte ' ',$FF
   271 3216 A9 20					lda #' '
   272 3218 8D 0F 32					sta printDev
   273 321B A9 46					lda #'F'
   274 321D 8D 10 32					sta printDev+1
   275 3220 EE 03 32					inc loop+1
   276 3223 AD 03 32					lda loop+1
   277 3226 09 30					ora #$30
   278 3228 8D 11 32					sta printDev+2
   279 322B C9 35					cmp #$35
   280 322D D0 D3					bne Loop
   281 322F 20 64 32					jsr print
   282 3232 9B FF					.byte $9b,$FF
   283 3234 60						rts
   284 							
   285 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   286 				;
   287 				; check for next parameter
   288 				;   sets carry if next parameter is available
   289 				;
   290 3235 A0 0A		paramCheck	ldy #SD_BUFOFF
   291 3237 B1 0A		            lda (DOSVEC),Y
   292 3239 18			            clc
   293 323A 69 3F		            adc #SD_LBUF
   294 323C A8			            tay
   295 323D B1 0A		            lda (DOSVEC),Y
   296 323F C9 9B		            cmp #$9b
   297 3241 18			            clc
   298 3242 F0 01		            beq pcheck_end
   299 3244 38						sec
   300 3245 60			pcheck_end	rts
   301
   302 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   303 				;
   304 				; get next parameter
   305 				;   calls crunch name 
   306 				;
   307 				; jump for jsr to crunch name
   308 3246 FF			pget_set	.byte $ff
   309 3247			paramGet		; set crunch name address, if necessary
   310 3247 2C 46 32					bit pget_set
   311 324A 10 14					bpl pget_call
   312 							
   313 324C A5 0A					lda DOSVEC
   314 324E 18			            clc
   315 324F 69 03		            adc #SD_ZCRNAME
   316 3251 8D 61 32		            sta pget_call+1
   317 				            
   318 3254 A5 0B		            lda DOSVEC+1
   319 3256 69 00		            adc #$00
   320 3258 8D 62 32		            sta pget_call+2
   321 				            
   322 325B A9 00					lda #$00
   323 325D 8D 46 32					sta pget_set
   324 							
   325 3260 20 FF FF		pget_call	jsr $ffff
   326 3263 60						rts
   327
   328
   329 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   330 				;
   331 				; print subroutine            
   332 				;
   333
   334 3264 68			print       pla
   335 3265 8D 75 32		            sta PRINTITER+1
   336 3268 68			            pla
   337 3269 8D 76 32		            sta PRINTITER+2
   338 326C EE 75 32		printLoop   inc PRINTITER+1
   339 326F D0 03		            bne PRINTITER
   340 3271 EE 76 32		            inc PRINTITER+2
   341 3274 AD FF FF		PRINTITER   lda $FFFF
   342 3277 C9 FF		            cmp #$FF
   343 3279 F0 06		            beq printEnd
   344 327B 20 8A 32		            jsr CIOputChar
   345 327E 4C 6C 32		            jmp printLoop
   346 3281 AD 76 32		printEnd    lda PRINTITER+2
   347 3284 48			            pha
   348 3285 AD 75 32		            lda PRINTITER+1
   349 3288 48			            pha
   350 3289 60			            rts
   351 				; call cio put char subroutine
   352 328A A2 00		CIOputChar  ldx #$00
   353 328C 8E 48 03		            stx IOCB0+ICBLL
   354 328F 8E 49 03		            stx IOCB0+ICBLH
   355 3292 A0 0B		            ldy #$0B
   356 3294 8C 42 03		            sty IOCB0+ICCOM
   357 3297 4C 56 E4		            jmp CIOV
   358
   359 02E0-02E1> 00 30					run start
