mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/RAMDISKU.ASM
     1 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2 				;
     3 				; RAMDISK ULTIMATE for SpartaDOS 3 for tfhh SRAM512k and U1MB
     4 				;   COMPY and RAMBO up to 1024k
     5 				;   by hjx (x) 2020
     6 				;
     7 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     8 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     9 				;
    10 				; System equates
    11 				;
    12 				; OS EQUATES
    13 				; ----------
    14 				; 
    15 				; IO EQUATES
    16 				; 
    17 = 0002			ICCOM       = $0002
    18 = 0008			ICBLL       = $0008
    19 = 0009			ICBLH       = $0009
    20 				; 
    21 				; OS VARIABLES FOR XL/XE
    22 				; 
    23 				; PAGE 0
    24 				; 
    25 = 000A			DOSVEC      = $000A
    26 = 000C			DOSINI      = $000C
    27 = 0012			RTCLOK      = $0012
    28 = 0032			BUFRLO      = $0032
    29 = 0033			BUFRHI      = $0033
    30 = 0034			BFENLO      = $0034
    31 = 0035			BFENHI      = $0035
    32 = 0042			CRITIC      = $0042
    33 = 00D0			ZBNKSWTMSK  = $00D0
    34 				; 
    35 				; PAGE 2
    36 				; 
    37 = 022F			SDMCTL      = $022F
    38 = 02E7			MEMLO       = $02E7
    39 				; 
    40 				; PAGE 3
    41 				; 
    42 = 0300			DDEVIC      = $0300
    43 = 0301			DUNIT       = $0301
    44 = 0302			DCOMND      = $0302
    45 = 0303			DSTATS		= $0303
    46 = 0304			DBUFLO      = $0304
    47 = 0305			DBUFHI      = $0305
    48 = 0308			DBYTLO      = $0308
    49 = 0309			DBYTHI      = $0309
    50 = 030A			DAUX1       = $030A
    51 = 030B			DAUX2       = $030B
    52 = 0340			IOCB0       = $0340
    53 				; 
    54 				; PIA
    55 				; 
    56 				;        PORTB $D301 XE
    57 				;        
    58 				;        0 - OS ROM on=1 off=0
    59 				;        1 - BASIC  on=0 off=1
    60 				;        2 - Bank-Switch
    61 				;        3 - Bank-Switch
    62 				;        4 - CPU-Switch   off=1 on=0
    63 				;        5 - ANTIC-Switch off=1 on=0
    64 				;        6 - unsued
    65 				;        7 - Self-Test on=0(if 0 is on) off=1
    66 				;        
    67 = D300			PORTA       = $D300
    68 = D301			PORTB       = $D301
    69 = D302			PACTL       = $D302
    70 = D303			PBCTL       = $D303
    71 				; 
    72 				; ANTIC
    73 				; 
    74 = D40E			NMIEN       = $D40E
    75 				; 
    76 				; ROM VECTORS
    77 				; 
    78 = E456			CIOV        = $E456
    79 				;
    80 				; SpartaDOS 
    81 				;
    82 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    83 = 003F			SD_LBUF        = $3F ; offset to line buffer
    84 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    85 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    86 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    87
    88 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    89 				;
    90 				; Start of code
    91 				;
    92 				            org $3000
    93 				            
    94 				; memory addresses to check for alias of main memory
    95 FFFF> 3000-38FB> 00	RB256TEST1  .byte $00 
    96 3001 00			RB256TEST2  .byte $00
    97
    98 				; bit mask kind Rambo1 ($00), Rambo2 ($01), or Compy ($FF)
    99 3002 FF			USEDMASK    .byte $FF
   100 				            
   101 3003			start
   102 3003 20 48 37		            jsr PRINT
   103 3006 52 61 6D 64 69 73 +             .byte 'Ramdisk Ultimate vers69 hjx',$9B,$FF
   104 				       
   105 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   106 				;
   107 				; determine extended memory
   108 				;
   109 3023 A9 BC		            lda #<BNKSWTMSK             ; check Compy
   110 3025 85 D0		            sta ZBNKSWTMSK
   111 3027 A9 38		            lda #>BNKSWTMSK
   112 3029 85 D1		            sta ZBNKSWTMSK+1
   113 302B 20 2B 36		            jsr CHKBNKS
   114 302E 8E AD 38		            stx BNKCNT
   115
   116 3031 A9 C8		            lda #<BNKSWTMSKR1           ; check Rambo1
   117 3033 85 D0		            sta ZBNKSWTMSK
   118 3035 A9 36		            lda #>BNKSWTMSKR1
   119 3037 85 D1		            sta ZBNKSWTMSK+1
   120 3039 20 2B 36		            jsr CHKBNKS
   121 303C EC AD 38		            cpx BNKCNT
   122 303F 30 0A		            bmi check_r2
   123 3041 F0 08		            beq check_r2
   124 3043 A9 00		            lda #$00
   125 3045 8D 02 30		            sta USEDMASK                ; used mask $00 Rambo1
   126 3048 8E AD 38		            stx BNKCNT                  ; save higher cnt
   127
   128 304B A9 08		check_r2    lda #<BNKSWTMSKR2           ; check Rambo2
   129 304D 85 D0		            sta ZBNKSWTMSK
   130 304F A9 37		            lda #>BNKSWTMSKR2
   131 3051 85 D1		            sta ZBNKSWTMSK+1
   132 3053 20 2B 36		            jsr CHKBNKS
   133 3056 EC AD 38		            cpx BNKCNT
   134 3059 30 1A		            bmi check_r1
   135 305B F0 18		            beq check_r1
   136 305D A9 01		            lda #$01
   137 305F 8D 02 30		            sta USEDMASK                ; used mask $01 Rambo2
   138 3062 8E AD 38		            stx BNKCNT                  ; save higher cnt
   139
   140 3065 A2 00		            ldx #$00                    ; copy Rambo2 to mask
   141 3067 BD 08 37		CPYR2M      lda BNKSWTMSKR2,X
   142 306A 9D BC 38		            sta BNKSWTMSK,X
   143 306D E8			            inx
   144 306E E0 40		            cpx #$40  
   145 3070 D0 F5		            bne CPYR2M
   146 3072 4C 87 30		            jmp start_rambo
   147
   148 3075			check_r1
   149 3075 2C 02 30		            bit USEDMASK
   150 3078 30 22		            bmi start_compy
   151 307A A2 00		            ldx #$00                    ; copy Rambo1 to mask
   152 307C BD C8 36		CPYR1M      lda BNKSWTMSKR1,X
   153 307F 9D BC 38		            sta BNKSWTMSK,X
   154 3082 E8			            inx
   155 3083 E0 40		            cpx #$40  
   156 3085 D0 F5		            bne CPYR1M
   157
   158 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   159 				;
   160 				; write kind of extended memory
   161 				;            
   162 3087			start_rambo
   163 3087 20 48 37		            jsr PRINT
   164 308A 20 20 46 6F 75 6E +             .byte '  Found Rambo ',$FF
   165 3099 4C B2 30		            jmp start_check
   166
   167 309C			start_compy
   168 309C E0 04		            cpx #$04
   169 309E 90 12		            bcc start_check
   170 30A0 20 48 37		            jsr PRINT
   171 30A3 20 20 46 6F 75 6E +             .byte '  Found Compy ',$FF
   172
   173 30B2			start_check
   174 				; check bank count
   175 30B2 AE AD 38		            ldx BNKCNT
   176 30B5 E0 04		            cpx #$04
   177 30B7 90 15		            bcc EXT_NO
   178 30B9 D0 36		            bne EXT_192
   179 30BB 20 48 37		            jsr PRINT
   180 30BE 36 34 6B 20 62 69 +             .byte '64k bits 23',$9B,$FF
   181 30CB 4C 04 32		            jmp EXT_END
   182 				; no banks            
   183 30CE 20 48 37		EXT_NO      jsr PRINT
   184 30D1 20 20 45 72 72 6F +             .byte '  Error: No extended memory',$9B,$FF
   185 30EE 4C 3C 32		            jmp PRNHLP
   186 				            
   187 30F1 E0 0C		EXT_192     cpx #$0C
   188 30F3 F0 17		            beq EXT_256
   189 30F5 B0 32		            bcs EXT_320
   190 30F7 20 48 37		            jsr PRINT
   191 30FA 31 32 38 4B 20 62 +             .byte '128K bits 236',$9B,$FF
   192 3109 4C 04 32		            jmp EXT_END
   193
   194 310C 20 48 37		EXT_256     jsr PRINT
   195 310F 31 39 32 4B 20 62 +             .byte '192K bits 2365 w/main',$9B,$FF
   196 3126 4C 04 32		            jmp EXT_END
   197 				            
   198 3129 E0 10		EXT_320     cpx #$10
   199 312B D0 31		            bne EXT_576
   200 312D 2C 02 30		            bit USEDMASK
   201 3130 30 16		            bmi CMP_320
   202 3132 20 48 37		            jsr PRINT
   203 3135 32 35 36 4B 20 62 +             .byte '256K bits 2365',$9B,$FF
   204 3145 4C 04 32		            jmp EXT_END
   205 3148 20 48 37		CMP_320     jsr PRINT
   206 314B 32 35 36 4B 20 62 +             .byte '256K bits 2367',$9B,$FF
   207 315B 4C 04 32		            jmp EXT_END
   208
   209 315E E0 20		EXT_576     cpx #$20
   210 3160 D0 4C		            bne EXT_1088     
   211 3162 2C 02 30		            bit USEDMASK
   212 3165 30 30		            bmi CMP_576
   213 3167 D0 17		            bne RA2_576
   214 3169 20 48 37		            jsr PRINT
   215 316C 35 31 32 4B 20 62 +             .byte '512K bits 23651',$9B,$FF
   216 317D 4C 04 32		            jmp EXT_END
   217 3180 20 48 37		RA2_576     jsr PRINT
   218 3183 35 31 32 4B 20 62 +             .byte '512K bits 23657',$9B,$FF
   219 3194 4C 04 32		            jmp EXT_END
   220 3197 20 48 37		CMP_576     jsr PRINT
   221 319A 35 31 32 4B 20 62 +             .byte '512K bits 23671',$9B,$FF
   222 31AB 4C 04 32		            jmp EXT_END
   223
   224 31AE E0 40		EXT_1088    cpx #$40
   225 31B0 F0 03		            beq EXT_1088EQ
   226 31B2 4C CE 30		            jmp EXT_NO
   227 31B5 2C 02 30		EXT_1088EQ  bit USEDMASK
   228 31B8 30 34		            bmi CMP_1088
   229 31BA D0 19		            bne RA2_1088
   230 31BC 20 48 37		            jsr PRINT
   231 31BF 31 30 32 34 4B 20 +             .byte '1024K bits 236517',$9B,$FF
   232 31D2 4C 04 32		            jmp EXT_END
   233 31D5 20 48 37		RA2_1088    jsr PRINT
   234 31D8 31 30 32 34 4B 20 +             .byte '1024K bits 236571',$9B,$FF
   235 31EB 4C 04 32		            jmp EXT_END
   236 31EE 20 48 37		CMP_1088    jsr PRINT
   237 31F1 31 30 32 34 4B 20 +             .byte '1024K bits 236710',$9B,$FF
   238
   239 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   240 				;
   241 				; parse parameter
   242 				;
   243 3204 A0 0A		EXT_END     ldy #SD_BUFOFF
   244 3206 B1 0A		            lda (DOSVEC),Y
   245 3208 18			            clc
   246 3209 69 3F		            adc #SD_LBUF
   247 320B A8			            tay
   248 320C B1 0A		            lda (DOSVEC),Y
   249 320E C9 9B		            cmp #$9B
   250 3210 F0 03		            beq ERRDRVNR
   251 3212 4C DC 32		            jmp PRSPARM
   252 				; no parameter -> error
   253 3215 20 48 37		ERRDRVNR    jsr PRINT
   254 3218 20 20 45 72 72 6F +             .byte '  Error: No drive number specified',$9B,$FF
   255 323C			PRNHLP
   256 323C 20 48 37		            jsr PRINT
   257 323F 20 20 55 73 65 3A +             .byte '  Use: RAMDISKU Dx: [/EDF]',$9B
   258 325A 20 20 20 20 78 20 +             .byte '    x - drive number for ramdisk',$9B
   259 327B 20 20 20 20 45 20 +             .byte '    E - use 64K less extended memory',$9B
   260 32A0 20 20 20 20 44 20 +             .byte '    D - install ramdisk driver',$9B
   261 32BF 20 20 20 20 46 20 +             .byte '    F - format ramdisk',$9B,$FF
   262 32D7 60			            rts
   263 				; jump for jsr to crunch name
   264 32D8 4C FF FF		CRNAME      jmp $FFFF
   265
   266 32DB 00			RDBNKCNT    .byte $00
   267
   268 				; set crunch name address
   269 32DC A5 0A		PRSPARM     lda DOSVEC
   270 32DE 18			            clc
   271 32DF 69 03		            adc #SD_ZCRNAME
   272 32E1 8D D9 32		            sta CRNAME+1
   273 32E4 A5 0B		            lda DOSVEC+1
   274 32E6 69 00		            adc #$00
   275 32E8 8D DA 32		            sta CRNAME+2
   276 				; get drive number SD_COMFNAM starts alway with Dx:
   277 32EB 20 D8 32		            jsr CRNAME
   278 32EE D0 47		            bne PARAMERR
   279 32F0 A0 22		            ldy #SD_COMFNAM+1
   280 32F2 B1 0A		            lda (DOSVEC),Y
   281 32F4 29 0F		            and #$0F
   282 32F6 8D BB 38		            sta DRVNUM
   283 				; check options /EDF
   284 32F9 20 D8 32		            jsr CRNAME
   285 32FC F0 64		            beq PRSPAREND
   286 32FE A0 24		            ldy #SD_COMFNAM+3
   287 3300 B1 0A		            lda (DOSVEC),Y
   288 3302 C9 2F		            cmp #'/'
   289 3304 D0 31		            bne PARAMERR
   290 3306 C8			PRSPARLOOP  iny
   291 3307 B1 0A		            lda (DOSVEC),Y
   292 3309 C9 9B		            cmp #$9B
   293 330B F0 55		            beq PRSPAREND
   294 				; save 4 banks for 130XE compatibilty
   295 330D C9 45		            cmp #'E'
   296 330F D0 08		            bne PRSPARNXT1
   297 3311 A9 04		            lda #$04
   298 3313 8D AE 38		            sta SPARBNKS
   299 3316 4C 06 33		            jmp PRSPARLOOP
   300 				; check install driver only
   301 3319 C9 44		PRSPARNXT1  cmp #'D'
   302 331B D0 0B		            bne PRSPARNXT2
   303 331D A9 FF		            lda #$FF
   304 331F 8D 61 33		            sta CHKPAROPT
   305 3322 8D E0 33		            sta CHKINIDRV
   306 3325 4C 06 33		            jmp PRSPARLOOP
   307 				; check format             
   308 3328 C9 46		PRSPARNXT2  cmp #'F'
   309 332A D0 0B		            bne PARAMERR
   310 332C A9 FF		            lda #$FF
   311 332E 8D 61 33		            sta CHKPAROPT
   312 3331 8D 7F 34		            sta CHKFRMT
   313 3334 4C 06 33		            jmp PRSPARLOOP
   314 3337 20 48 37		PARAMERR    jsr PRINT
   315 333A 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter specified',$9B,$FF
   316 335E 4C 3C 32		            jmp PRNHLP
   317
   318 3361 00			CHKPAROPT   .byte $00
   319
   320 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   321 				;
   322 				; check for spare banks
   323 				;
   324 3362			PRSPAREND
   325 3362 AD AE 38		            lda SPARBNKS
   326 3365 F0 53		            beq BNKCNTOK
   327 3367 20 48 37		            jsr PRINT
   328 336A 20 20 55 73 65 20 +             .byte '  Use 64K less extended memory',$9B,$FF
   329 338A AD AD 38		            lda BNKCNT
   330 338D C9 04		            cmp #$04
   331 338F D0 29		            bne BNKCNTOK
   332 3391 20 48 37		            jsr PRINT
   333 3394 20 20 45 72 72 6F +             .byte '  Error: No extra extended memory',$9B,$FF
   334 33B7 4C 3C 32		            jmp PRNHLP
   335 33BA			BNKCNTOK
   336 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   337 				;
   338 				; check for init driver and format
   339 				;
   340 				; set format and ini by options
   341 33BA 2C 61 33		            bit CHKPAROPT
   342 33BD 30 08		            bmi STRTINIFMT ; no options set default /DF
   343 33BF A9 FF		            lda #$FF
   344 33C1 8D E0 33		            sta CHKINIDRV
   345 33C4 8D 7F 34		            sta CHKFRMT
   346 33C7			STRTINIFMT
   347 				; install driver requested
   348 33C7 2C E0 33		            bit CHKINIDRV
   349 33CA 10 03		            bpl NOINIDRV
   350 33CC 20 E1 33		            jsr INIDRV
   351 33CF			NOINIDRV
   352 				; format if requested
   353 33CF 2C 61 33		            bit CHKPAROPT
   354 33D2 30 03		            bmi NOPREFRMT
   355 33D4 20 45 34		            jsr PREFRMT
   356 33D7			NOPREFRMT
   357 33D7 2C 7F 34		            bit CHKFRMT
   358 33DA 10 03		            bpl NOFRMTRD
   359 33DC 20 80 34		            jsr FRMTRD
   360 33DF			NOFRMTRD
   361 33DF 60			            rts
   362
   363 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   364 				;
   365 				; Subroutine install driver
   366 				;
   367 33E0 00			CHKINIDRV   .byte $00
   368
   369 33E1			INIDRV
   370 				; set jsr to original DOSINI
   371 33E1 A5 0C		            lda DOSINI
   372 33E3 8D 7F 37		            sta JSRDOSINI+1
   373 33E6 A5 0D		            lda DOSINI+1
   374 33E8 8D 80 37		            sta JSRDOSINI+2
   375 				; set MEMLO oldaddress, realloc
   376 33EB AD E7 02		            lda MEMLO
   377 33EE 8D BF 3A		            sta READSTADR
   378 33F1 8D C5 3A		            sta CPYTOADR
   379 33F4 AD E8 02		            lda MEMLO+1
   380 33F7 8D C0 3A		            sta READSTADR+1
   381 33FA 8D C6 3A		            sta CPYTOADR+1
   382 				; start realloc
   383 33FD 20 C9 3A		            jsr REASTART
   384 				; set new DOSINI            
   385 3400 A9 7E		REAL001     lda #<JSRDOSINI
   386 3402 85 0C		            sta DOSINI
   387 3404 A9 37		REAH001     lda #>JSRDOSINI
   388 3406 85 0D		            sta DOSINI+1
   389 				; get SIO and patch for RAMDISK
   390 3408 38			            sec
   391 3409 A5 0A		            lda DOSVEC
   392 340B E9 0A		            sbc #SD_LSIO
   393 340D 85 32		            sta BUFRLO
   394 340F A5 0B		            lda DOSVEC+1
   395 3411 E9 00		            sbc #$00
   396 3413 85 33		            sta BUFRHI
   397 3415 A0 00		            ldy #$00
   398 3417 B1 32		            lda (BUFRLO),Y
   399 3419 8D 9C 37		REAA001     sta JMPSIO+1      ;realloc $33CA
   400 341C A9 8C		REAL002     lda #<RAMDSIO
   401 341E 91 32		            sta (BUFRLO),Y
   402 3420 C8			            iny
   403 3421 B1 32		            lda (BUFRLO),Y
   404 3423 8D 9D 37		REAA002     sta JMPSIO+2      ;realloc $33D4
   405 3426 A9 37		REAH002     lda #>RAMDSIO
   406 3428 91 32		            sta (BUFRLO),Y
   407 				; set MEMLO            
   408 342A 20 81 37		REAA003     jsr SETMEMLO      ;realloc $33DB
   409 				; message
   410 342D 20 48 37		            jsr PRINT
   411 3430 20 20 44 72 69 76 +             .byte '  Driver installed',$9B,$FF
   412 3444 60			            rts
   413
   414
   415 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   416 				;
   417 				; Subroutine preserve ramdisk
   418 				;
   419 3445			PREFRMT
   420 				; switch off interrupts
   421 3445 78			            sei
   422 3446 A9 00		            lda #$00
   423 3448 8D 0E D4		            sta NMIEN
   424 				; switch bank
   425 344B AD 01 D3		            lda PORTB
   426 344E 48			            pha
   427 344F AE AE 38		            ldx SPARBNKS
   428 3452 BD BC 38		            lda BNKSWTMSK,X
   429 3455 8D 01 D3		            sta PORTB
   430 				; compare
   431 3458 A2 16		            ldx #$16
   432 345A BD 00 36		CHKFRMTLOOP lda RDHEAD,X
   433 345D DD 00 40		            cmp $4000,X
   434 3460 D0 0D		            bne CHKNOPREFRMT
   435 3462 E8			            inx
   436 3463 E0 21		            cpx #$21
   437 3465 D0 F3		            bne CHKFRMTLOOP
   438 				; clear format flag
   439 3467 A9 00		            lda #$00
   440 3469 8D 7F 34		            sta CHKFRMT
   441 346C 4C 74 34		            jmp CHKPREFRMTEND
   442 346F			CHKNOPREFRMT
   443 346F A9 FF		            lda #$FF
   444 3471 8D 7F 34		            sta CHKFRMT
   445 3474			CHKPREFRMTEND
   446 				; restore PORTB
   447 3474 68			            pla
   448 3475 8D 01 D3		            sta PORTB
   449 				; enable interrupts
   450 3478 A9 E0		            lda #$E0
   451 347A 8D 0E D4		            sta NMIEN
   452 347D 58			            cli
   453 				; set format flag
   454 347E 60			            rts
   455 				            
   456 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   457 				;
   458 				; Subroutine format ramdisk
   459 				;
   460 347F 00			CHKFRMT     .byte $00
   461
   462 3480			FRMTRD
   463 				; switch off interrupts
   464 3480 78			            sei
   465 3481 A9 00		            lda #$00
   466 3483 8D 0E D4		            sta NMIEN
   467 				; switch bank
   468 3486 AD 01 D3		            lda PORTB
   469 3489 48			            pha
   470 348A AE AE 38		            ldx SPARBNKS
   471 348D BD BC 38		            lda BNKSWTMSK,X
   472 3490 8D 01 D3		            sta PORTB
   473 				; clear loop
   474 3493 A9 00		            lda #$00
   475 3495 A8			            tay
   476 3496 99 00 40		FRMTCLP     sta $4000,Y
   477 3499 99 00 41		            sta $4100,Y
   478 349C 99 00 42		            sta $4200,Y
   479 349F 99 00 43		            sta $4300,Y
   480 34A2 99 00 44		            sta $4400,Y
   481 34A5 99 00 45		            sta $4500,Y
   482 34A8 99 00 46		            sta $4600,Y
   483 34AB C8			            iny
   484 34AC D0 E8		            bne FRMTCLP
   485 				; header loop            
   486 34AE A0 2A		            ldy #$2A
   487 34B0 B9 00 36		FRMTHLP     lda RDHEAD,Y
   488 34B3 99 00 40		            sta $4000,Y
   489 34B6 88			            dey
   490 34B7 10 F7		            bpl FRMTHLP
   491 34B9 A9 60		            lda #$60    ; write RTS to second boot sector
   492 34BB 8D 80 40		            sta $4080   ; see header jmp $3080
   493 				; calc banks for ramdisk            
   494 34BE AD AD 38		            lda BNKCNT
   495 34C1 38			            sec
   496 34C2 ED AE 38		            sbc SPARBNKS
   497 34C5 AA			            tax
   498 34C6 8E DB 32		            stx RDBNKCNT
   499 				; set size loop
   500 34C9 A0 00		            ldy #$00
   501 34CB BD 65 35		FRMTSLP     lda RDSIZE-4,X
   502 34CE 99 0B 40		            sta $400B,Y       ; total number of sectors on the disk
   503 34D1 E8			            inx               ; and number of free sectors on the disk
   504 34D2 C8			            iny
   505 34D3 C0 04		            cpy #$04
   506 34D5 D0 F4		            bne FRMTSLP
   507 				; set free sector VTOC             
   508 34D7 AD DB 32		            lda RDBNKCNT
   509 34DA 4A			            lsr
   510 34DB 4A			            lsr
   511 34DC AA			            tax
   512 34DD 20 5C 35		FRMTVTOCLP  jsr FILLHSEC
   513 34E0 AD 61 35		            lda L34AF+1
   514 34E3 18			            clc
   515 34E4 69 40		            adc #$40
   516 34E6 8D 61 35		            sta L34AF+1
   517 34E9 AD 62 35		            lda L34AF+2
   518 34EC 69 00		            adc #$00
   519 34EE 8D 62 35		            sta L34AF+2
   520 34F1 CA			            dex
   521 34F2 D0 E9		            bne FRMTVTOCLP
   522 				; set sector numbers in boot sector and correct VTOC
   523 34F4 AD DB 32		            lda RDBNKCNT
   524 34F7 AA			            tax
   525 34F8 38			            sec
   526 34F9 E9 01		            sbc #$01
   527 34FB 4A			            lsr
   528 34FC 4A			            lsr
   529 34FD 4A			            lsr                 ; 8 banks per sector of sector map
   530 34FE 18			            clc
   531 34FF 69 01		            adc #$01            
   532 3501 8D 0F 40		            sta $400F           ; number of bit map sectors used on the disk
   533 3504 18			            clc
   534 3505 69 04		            adc #$04
   535 3507 8D 09 40		            sta $4009           ; first sector map of the MAIN directory
   536 				; correct free sector map
   537 350A BD A5 35		            lda RDMAPSZ-4,X 
   538 350D 8D 80 41		            sta $4180
   539 3510 BD A6 35		            lda RDMAPSZ-3,X 
   540 3513 8D 81 41		            sta $4181
   541 				; calc adress for VTOC            
   542 3516 BD A7 35		            lda RDMAPSZ-2,X
   543 3519 85 32		            sta BUFRLO
   544 351B BD A8 35		            lda RDMAPSZ-1,X
   545 351E 85 33		            sta BUFRHI   
   546 3520 A0 04		            ldy #$04
   547 3522 AD 09 40		            lda $4009
   548 3525 18			            clc
   549 3526 69 01		            adc #$01
   550 3528 91 32		            sta (BUFRLO),Y
   551 				; create MAIN directory
   552 352A A2 00		            ldx #$00
   553 352C A0 80		            ldy #$80
   554 352E BD E9 35		L349B       lda RDMAIN,X
   555 3531 91 32		            sta (BUFRLO),Y
   556 3533 E8			            inx
   557 3534 C8			            iny
   558 3535 E0 17		            cpx #$17
   559 3537 D0 F5		            bne L349B
   560 				; restore PORTB
   561 3539 68			            pla
   562 353A 8D 01 D3		            sta PORTB
   563 				; enable interrupts
   564 353D A9 E0		            lda #$E0
   565 353F 8D 0E D4		            sta NMIEN
   566 3542 58			            cli
   567 				; write message
   568 3543 20 48 37		            jsr PRINT
   569 3546 20 20 52 61 6D 64 +             .byte '  Ramdisk formatted',$9B,$FF
   570 355B 60			            rts
   571 				; set VTOC            
   572 355C A0 00		FILLHSEC    ldy #$00
   573 355E A9 FF		            lda #$FF
   574 3560 99 80 41		L34AF       sta $4180,Y
   575 3563 C8			            iny
   576 3564 C0 40		            cpy #$40
   577 3566 D0 F8		            bne L34AF
   578 3568 60			            rts
   579 				;
   580 				; data array for format ram disk
   581 				;
   582 				;                 total, free number of sectors
   583 3569			RDSIZE
   584 3569 00 02 F9 01		            .word $0200,$01F9 ; 64k
   585 356D 00 04 F9 03		            .word $0400,$03F9 ; 128k
   586 3571 00 06 F8 05		            .word $0600,$05F8 ; 192k
   587 3575 00 08 F8 07		            .word $0800,$07F8 ; 256k
   588 3579 00 0A F7 09		            .word $0A00,$09F7 ; 320k
   589 357D 00 0C F7 0B		            .word $0C00,$0BF7 ; 384k
   590 3581 00 0E F6 0D		            .word $0E00,$0DF6 ; 448k
   591 3585 00 10 F6 0F		            .word $1000,$0ff6 ; 512k
   592 				; extension for 1088k
   593 3589 00 00 00 00		            .word $0000,$0000 ; dummy
   594 358D 00 00 00 00		            .word $0000,$0000 ; dummy
   595 3591 00 00 00 00		            .word $0000,$0000 ; dummy
   596 3595 00 00 00 00		            .word $0000,$0000 ; dummy
   597 3599 00 00 00 00		            .word $0000,$0000 ; dummy
   598 359D 00 00 00 00		            .word $0000,$0000 ; dummy
   599 35A1 00 1E F2 1D		            .word $1E00,$1DF2 ; 1024-64=960k reserve 4 banks (130XE)
   600 35A5 00 20 F2 1F		            .word $2000,$1ff2 ; 1024k
   601
   602 35A9			RDMAPSZ
   603 35A9 01 FF		            .byte $01,$FF       ; 64k
   604 35AB 00 42		            .word $4200
   605 				            
   606 35AD 01 FF		            .byte $01,$FF       ; 128k
   607 35AF 00 42		            .word $4200
   608 				            
   609 35B1 00 FF		            .byte $00,$FF       ; 192k
   610 35B3 80 42		            .word $4280
   611 				            
   612 35B5 00 FF		            .byte $00,$FF       ; 256k
   613 35B7 80 42		            .word $4280
   614 				            
   615 35B9 00 7F		            .byte $00,$7F       ; 320k
   616 35BB 00 43		            .word $4300
   617 				            
   618 35BD 00 7F		            .byte $00,$7F       ; 384k
   619 35BF 00 43		            .word $4300
   620 				            
   621 35C1 00 3F		            .byte $00,$3F       ; 448k
   622 35C3 80 43		            .word $4380
   623 				            
   624 35C5 00 3F		            .byte $00,$3F       ; 512k
   625 35C7 80 43		            .word $4380
   626
   627 				; extension for 1088k
   628 35C9 00 00		            .byte $00,$00       ; dummy
   629 35CB 00 00		            .word $0000
   630
   631 35CD 00 00		            .byte $00,$00       ; dummy
   632 35CF 00 00		            .word $000
   633
   634 35D1 00 00		            .byte $00,$00       ; dummy
   635 35D3 00 00		            .word $0000
   636
   637 35D5 00 00		            .byte $00,$00       ; dummy
   638 35D7 00 00		            .word $0000
   639
   640 35D9 00 00		            .byte $00,$00       ; dummy
   641 35DB 00 00		            .word $0000
   642
   643 35DD 00 00		            .byte $00,$00       ; dummy
   644 35DF 00 00		            .word $0000
   645
   646 35E1 00 03		            .byte $00,$03       ; 1024-64=960k reserve 4 banks (130XE)
   647 35E3 80 45		            .word $4580
   648
   649 35E5 00 03		            .byte $00,$03       ; 1024k 
   650 35E7 80 45		            .word $4580
   651
   652 35E9			RDMAIN
   653 35E9 28			            .byte $28                   ; ???
   654 35EA 00 00		            .byte $00,$00               ; Sector number of the parent directory, $00 this is root
   655 35EC 17 00 00		            .byte $17,$00,$00           ; Length of the directory in bytes
   656 35EF 4D 41 49 4E 20 20 +             .byte 'MAIN       '         ; Name of the directory padded with spaces (8 bytes)
   657 35FA 0B 07 47		            .byte $0b,$07,$47           ; Date DD/MM/YY
   658 35FD 0B 0B 0B		            .byte $0b,$0b,$0b           ; Time HH:MM:SS
   659
   660 3600			RDHEAD
   661 3600 00			            .byte $00                   ; Usually 0. Some formatting tools put a $53 (='S) for SD here
   662 3601 03			            .byte $03                   ; Number of sectors to boot
   663 3602 00 07		            .byte $00,$07               ; Address where the boot sectors are loaded to
   664 3604 E0 07		            .byte $E0,$07               ; This address is copied to DOSINI. 2 bytes
   665 3606 4C 80 30		            .byte $4C,$80,$30           ; execution to code beginning jmp $3080
   666 3609 03 00		            .byte $03,$00               ; Sector number of the first sector map of the MAIN directory
   667 360B 00 04		            .byte $00,$04               ; Total number of sectors on the disk
   668 360D F9 03		            .byte $F9,$03               ; Number of free sectors on the disk
   669 360F 01			            .byte $01                   ; Number of bit map sectors on the disk
   670 3610 04 00		            .byte $04,$00               ; Sector number of the first bit map sector
   671 3612 20 00		            .byte $20,$00               ; Sector number to begin the file data sector allocation search
   672 3614 00 00		            .byte $00,$00               ; Sector number to begin the directory data sector allocation search
   673 3616 52 41 4D 44 49 53 +             .byte 'RAMDISKU'            ; Disk volume name, 8 chars
   674 361E 00			            .byte $00                   ; Number of tracks on the disk, $00 for ramdisk or HD
   675 361F 80			            .byte $80                   ; Size of the sectors on this disk, $00 = 256 Byte
   676 3620 22			            .byte $22                   ; File system revision number of the disk format
   677 3621 00 00 00 00 00	            .byte $00,$00,$00,$00,$00   ; reserved - no known usage
   678 3626 00			            .byte $00                   ; Volume sequence number
   679 3627 16			            .byte $16                   ; Volume random number
   680 3628 00 00		            .byte $00,$00               ; Sector number of the first sector map of the file to be loaded when the disk is booted
   681 362A 00			            .byte $00                   ; This is the write LOCK flag, $FF locked, $00 unlocked
   682
   683 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   684 				;
   685 				; Subroutine check banks
   686 				;
   687 362B			CHKBNKS
   688 				; save PIA PORT B
   689 362B AD 01 D3		            lda PORTB
   690 362E 48			            pha
   691 				; switch off interrupts
   692 362F AD 2F 02		            lda SDMCTL
   693 3632 8D C7 36		            sta SSDMCTL
   694 3635 A9 00		            lda #$00
   695 3637 8D 2F 02		            sta SDMCTL
   696 363A 20 C0 36		            jsr WAITSYNC
   697 				; switch off interrupts
   698 363D 78			            sei
   699 363E A9 00		            lda #$00
   700 3640 8D 0E D4		            sta NMIEN
   701 				; try to save and write banks            
   702 3643 A0 3F		            ldy #$3F
   703 3645 B1 D0		BNKSAVWRT   lda (ZBNKSWTMSK),Y
   704 3647 8D 01 D3		            sta PORTB
   705 364A AD 00 70		            lda $7000
   706 364D 99 FC 39		            sta BNKSAVBUF,Y
   707 3650 B1 D0		            lda (ZBNKSWTMSK),Y
   708 3652 8D 00 70		            sta $7000
   709 3655 AD 01 70		            lda $7001
   710 3658 99 3C 3A		            sta BNKSAVBUF2,Y
   711 365B B1 D0		            lda (ZBNKSWTMSK),Y
   712 365D 0A			            asl
   713 365E 8D 01 70		            sta $7001
   714 3661 88			            dey
   715 3662 10 E1		            bpl BNKSAVWRT
   716 				; write to check memory aliases (RAMBO 256k)
   717 3664 A9 FF		            lda #$FF
   718 3666 8D 00 30		            sta RB256TEST1
   719 3669 A9 FF		            lda #$FF
   720 366B 8D 01 30		            sta RB256TEST2
   721 				; check banks
   722 366E C8			BNKCHK      iny
   723 366F B1 D0		            lda (ZBNKSWTMSK),Y
   724 3671 8D 01 D3		            sta PORTB
   725 3674 B1 D0		            lda (ZBNKSWTMSK),Y
   726 3676 CD 00 70		            cmp $7000
   727 3679 D0 0D		            bne BNKSTOP
   728 367B B1 D0		            lda (ZBNKSWTMSK),Y
   729 367D 0A			            asl
   730 367E CD 01 70		            cmp $7001
   731 3681 D0 05		            bne BNKSTOP
   732 3683 C0 3F		            cpy #$3F
   733 3685 D0 E7		            bne BNKCHK
   734 3687 C8			            iny
   735 3688 98			BNKSTOP     tya                 ; save bank count in X
   736 3689 AA			            tax
   737 				; restore banks
   738 368A A0 00		            ldy #$00
   739 368C B1 D0		BNKRESTR    lda (ZBNKSWTMSK),Y
   740 368E 8D 01 D3		            sta PORTB
   741 3691 B9 FC 39		            lda BNKSAVBUF,Y
   742 3694 8D 00 70		            sta $7000
   743 3697 B9 3C 3A		            lda BNKSAVBUF2,Y
   744 369A 8D 01 70		            sta $7001
   745 369D C8			            iny
   746 369E C0 40		            cpy #$40
   747 36A0 D0 EA		            bne BNKRESTR
   748 				; reset check memory aliases (RAMBO 256k)
   749 36A2 A9 00		            lda #$00
   750 36A4 8D 00 30		            sta RB256TEST1
   751 36A7 A9 00		            lda #$00
   752 36A9 8D 01 30		            sta RB256TEST2
   753 				; restore PIA PORT B
   754 36AC 68			            pla
   755 36AD 8D 01 D3		            sta PORTB
   756 				; enable interrupts
   757 36B0 A9 E0		            lda #$E0
   758 36B2 8D 0E D4		            sta NMIEN
   759 36B5 58			            cli
   760 				; enable interrupts
   761 36B6 AD C7 36		            lda SSDMCTL
   762 36B9 8D 2F 02		            sta SDMCTL
   763 36BC 20 C0 36		            jsr WAITSYNC
   764 36BF 60			            rts
   765 				; wait for sync            
   766 36C0 A5 14		WAITSYNC    lda RTCLOK+2
   767 36C2 C5 14		WAITLOOP    cmp RTCLOK+2
   768 36C4 F0 FC		            beq WAITLOOP
   769 36C6 60			            rts            
   770 36C7 00			SSDMCTL     .byte $00
   771
   772 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   773 				;
   774 				; Bank masks Rambo 1 and 2
   775 				;
   776 36C8			BNKSWTMSKR1
   777 36C8 E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE       ; 1110:0010 1110:0110 1110:1010 1110:1110
   778 36CC A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE       ; 1010:0010 1010:0110 1010:1010 1010:1110
   779 36D0 C2 C6 CA CE		            .byte $C2,$C6,$CA,$CE       ; 1100:0010 1100:0110 1100:1010 1100:1110
   780 36D4 82 86 8A 8E		            .byte $82,$86,$8A,$8E       ; 1000:0010 1000:0110 1000:1010 1000:1110
   781 36D8 E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC       ; 1110:0000 1110:0100 1110:1000 1110:1100
   782 36DC A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC       ; 1010:0000 1010:0100 1010:1000 1010:1100
   783 36E0 C0 C4 C8 CC		            .byte $C0,$C4,$C8,$CC       ; 1100:0000 1100:0100 1100:1000 1100:1100
   784 36E4 80 84 88 8C		            .byte $80,$84,$88,$8C       ; 1000:0000 1000:0100 1000:1000 1000:1100
   785 				; extension for 1088k
   786 36E8 62 66 6A 6E		            .byte $62,$66,$6A,$6E       ; 0110:0010 0110:0110 0110:1010 0110:1110
   787 36EC 22 26 2A 2E		            .byte $22,$26,$2A,$2E       ; 0010:0010 0010:0110 0010:1010 0010:1110
   788 36F0 42 46 4A 4E		            .byte $42,$46,$4A,$4E       ; 0100:0010 0100:0110 0100:1010 0100:1110
   789 36F4 02 06 0A 0E		            .byte $02,$06,$0A,$0E       ; 0000:0010 0000:0110 0000:1010 0000:1110
   790 36F8 60 64 68 6C		            .byte $60,$64,$68,$6C       ; 0110:0000 0110:0100 0110:1000 0110:1100
   791 36FC 20 24 28 2C		            .byte $20,$24,$28,$2C       ; 0010:0000 0010:0100 0010:1000 0010:1100
   792 3700 40 44 48 4C		            .byte $40,$44,$48,$4C       ; 0100:0000 0100:0100 0100:1000 0100:1100
   793 3704 00 04 08 0C		            .byte $00,$04,$08,$0C       ; 0000:0000 0000:0100 0000:1000 0000:1100
   794
   795 3708			BNKSWTMSKR2
   796 3708 E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE       ; 1110:0010 1110:0110 1110:1010 1110:1110
   797 370C A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE       ; 1010:0010 1010:0110 1010:1010 1010:1110
   798 3710 C2 C6 CA CE		            .byte $C2,$C6,$CA,$CE       ; 1100:0010 1100:0110 1100:1010 1100:1110
   799 3714 82 86 8A 8E		            .byte $82,$86,$8A,$8E       ; 1000:0010 1000:0110 1000:1010 1000:1110
   800 3718 62 66 6A 6E		            .byte $62,$66,$6A,$6E       ; 0110:0010 0110:0110 0110:1010 0110:1110
   801 371C 22 26 2A 2E		            .byte $22,$26,$2A,$2E       ; 0010:0010 0010:0110 0010:1010 0010:1110
   802 3720 42 46 4A 4E		            .byte $42,$46,$4A,$4E       ; 0100:0010 0100:0110 0100:1010 0100:1110
   803 3724 02 06 0A 0E		            .byte $02,$06,$0A,$0E       ; 0000:0010 0000:0110 0000:1010 0000:1110
   804 				; extension for 1088k
   805 3728 E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC       ; 1110:0000 1110:0100 1110:1000 1110:1100
   806 372C A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC       ; 1010:0000 1010:0100 1010:1000 1010:1100
   807 3730 C0 C4 C8 CC		            .byte $C0,$C4,$C8,$CC       ; 1100:0000 1100:0100 1100:1000 1100:1100
   808 3734 80 84 88 8C		            .byte $80,$84,$88,$8C       ; 1000:0000 1000:0100 1000:1000 1000:1100
   809 3738 60 64 68 6C		            .byte $60,$64,$68,$6C       ; 0110:0000 0110:0100 0110:1000 0110:1100
   810 373C 20 24 28 2C		            .byte $20,$24,$28,$2C       ; 0010:0000 0010:0100 0010:1000 0010:1100
   811 3740 40 44 48 4C		            .byte $40,$44,$48,$4C       ; 0100:0000 0100:0100 0100:1000 0100:1100
   812 3744 00 04 08 0C		            .byte $00,$04,$08,$0C       ; 0000:0000 0000:0100 0000:1000 0000:1100
   813
   814 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   815 				;
   816 				; print subroutine            
   817 				;
   818 3748 68			PRINT       pla
   819 3749 8D 59 37		            sta PRINTITER+1
   820 374C 68			            pla
   821 374D 8D 5A 37		            sta PRINTITER+2
   822 3750 EE 59 37		PRINTLOOP   inc PRINTITER+1
   823 3753 D0 03		            bne PRINTITER
   824 3755 EE 5A 37		            inc PRINTITER+2
   825 3758 AD FF FF		PRINTITER   lda $FFFF
   826 375B C9 FF		            cmp #$FF
   827 375D F0 06		            beq PRINTEND
   828 375F 20 6E 37		            jsr CIOPUTCHR
   829 3762 4C 50 37		            jmp PRINTLOOP
   830 3765 AD 5A 37		PRINTEND    lda PRINTITER+2
   831 3768 48			            pha
   832 3769 AD 59 37		            lda PRINTITER+1
   833 376C 48			            pha
   834 376D 60			            rts
   835 				; call cio put char subroutine
   836 376E A2 00		CIOPUTCHR   ldx #$00
   837 3770 8E 48 03		            stx IOCB0+ICBLL
   838 3773 8E 49 03		            stx IOCB0+ICBLH
   839 3776 A0 0B		            ldy #$0B
   840 3778 8C 42 03		            sty IOCB0+ICCOM
   841 377B 4C 56 E4		            jmp CIOV
   842
   843
   844 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   845 				;;; BEGIN OF REALLOC BLOCK
   846 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   847 				;
   848 				; start of resident driver
   849 				;
   850 				; to realloc routines
   851 				; DOSINI set MEMLO at reset
   852 377E			REABEGIN
   853 377E 20 00 00		JSRDOSINI   jsr $0000
   854
   855 3781			SETMEMLO    
   856 3781 A9 FC		REAL003     lda #<REAEND
   857 3783 8D E7 02		            sta MEMLO
   858 3786 A9 39		REAH003     lda #>REAEND
   859 3788 8D E8 02		            sta MEMLO+1
   860 378B 60			            rts
   861 				;
   862 				; new DOSVEC for RAMDISK device
   863 				;
   864 378C AD 00 03		RAMDSIO     lda DDEVIC
   865 378F C9 31		            cmp #$31
   866 3791 D0 08		            bne JMPSIO
   867 3793 AD 01 03		            lda DUNIT
   868 3796 CD BB 38		REAA004     cmp DRVNUM
   869 3799 F0 03		            beq L358A
   870 379B 4C 00 00		JMPSIO      jmp $0000
   871 379E AD 04 03		L358A       lda DBUFLO
   872 37A1 85 34		            sta BFENLO
   873 37A3 AD 05 03		            lda DBUFHI
   874 37A6 85 35		            sta BFENHI
   875 37A8 AD 02 03		            lda DCOMND
   876 				; command STATUS REQUEST
   877 37AB C9 53		            cmp #$53 
   878 37AD D0 1B		            bne NEXT1
   879 37AF AD B6 38		REAA009     lda L36BF
   880 37B2 4A			            lsr
   881 37B3 4A			            lsr
   882 37B4 49 30		            eor #$30
   883 37B6 AC B2 38		REAA010     ldy L36BB
   884 37B9 C0 1A		            cpy #$1A
   885 37BB D0 02		            bne L35B4
   886 37BD 09 80		            ora #$80
   887 37BF A0 00		L35B4       ldy #$00
   888 37C1 91 34		            sta (BFENLO),Y
   889 37C3 C8			            iny
   890 37C4 A9 FF		            lda #$FF
   891 37C6 91 34		            sta (BFENLO),Y
   892 37C8 30 22		            bmi JMPSIOEND
   893 				; command RETURN CONFIGURATION
   894 37CA C9 4E		NEXT1       cmp #$4E
   895 37CC D0 0C		            bne NEXT2
   896 37CE A0 0B		            ldy #$0B            ; 12 bytes
   897 37D0			RETCNFLOOP
   898 37D0 B9 AF 38		REAA011     lda CONFBUF,Y
   899 37D3 91 34		            sta (BFENLO),Y
   900 37D5 88			            dey
   901 37D6 10 F8		            bpl RETCNFLOOP
   902 37D8 30 12		            bmi JMPSIOEND
   903 				; command SET CONFIGURATION
   904 37DA C9 4F		NEXT2       cmp #$4F
   905 37DC D0 11		            bne NEXT3
   906 37DE A0 07		            ldy #$07
   907 37E0 B1 34		            lda (BFENLO),Y
   908 37E2 8D B6 38		REAA012     sta L36BF
   909 37E5 A0 03		            ldy #$03
   910 37E7 B1 34		            lda (BFENLO),Y
   911 37E9 8D B2 38		REAA013     sta L36BB
   912
   913 37EC			JMPSIOEND
   914 37EC 4C A3 38		REAA014     jmp RDSIOEND
   915 				; command FORMAT DISK
   916 37EF C9 21		NEXT3       cmp #$21
   917 37F1 D0 0B		            bne NEXT4
   918 37F3 A0 00		SIOFRMT     ldy #$00
   919 37F5 A9 FF		            lda #$FF
   920 37F7 91 34		            sta (BFENLO),Y
   921 37F9 C8			            iny
   922 37FA 91 34		            sta (BFENLO),Y
   923 37FC D0 EE		            bne JMPSIOEND
   924 				; command FORMAT DISK ENHANCED
   925 37FE C9 22		NEXT4       cmp #$22
   926 3800 D0 0C		            bne NEXT5
   927 3802 A9 1A		            lda #$1A
   928 3804 8D B2 38		REAA015     sta L36BB
   929 3807 A9 80		            lda #$80
   930 3809 8D B6 38		REAA016     sta L36BF
   931 380C D0 E5		            bne SIOFRMT
   932 				; command GET SECTOR
   933 380E C9 52		NEXT5       cmp #$52
   934 3810 F0 0B		            beq PUTGETSEC
   935 				; command PUT SECTOR WITH VERIFY
   936 3812 C9 57		            cmp #$57
   937 3814 F0 07		            beq PUTGETSEC
   938 				; command PUT SECTOR
   939 3816 C9 50		            cmp #$50
   940 3818 F0 03		            beq PUTGETSEC
   941 381A 4C A6 38		REAA020     jmp RDSIOEND+3
   942
   943 381D A9 00		PUTGETSEC   lda #$00
   944 381F 85 32		            sta BUFRLO
   945 3821 AD 0A 03		            lda DAUX1
   946 3824 38			            sec
   947 3825 E9 01		            sbc #$01
   948 3827 85 33		            sta BUFRHI
   949 3829 AD 0B 03		            lda DAUX2
   950 382C E9 00		            sbc #$00
   951 382E 06 33		            asl BUFRHI
   952 3830 2A			            rol
   953 3831 2C 08 03		            bit DBYTLO
   954 3834 30 06		            bmi L3631
   955 3836 0E B6 38		REAA017     asl L36BF
   956 3839 06 33		            asl BUFRHI
   957 383B 2A			            rol
   958 383C 48			L3631       pha
   959 383D A5 33		            lda BUFRHI
   960 383F 4A			            lsr
   961 3840 4A			            lsr
   962 3841 66 32		            ror BUFRLO
   963 3843 09 40		            ora #$40
   964 3845 85 33		            sta BUFRHI
   965 				            
   966 3847 AD 02 03		            lda DCOMND
   967 384A C9 52		            cmp #$52
   968 384C F0 0D		            beq L3656
   969 				            
   970 384E A0 00		            ldy #$00
   971 3850 B1 34		L364B       lda (BFENLO),Y
   972 3852 99 FC 38		REAA005     sta BUFFERXX1,Y
   973 3855 C8			            iny
   974 3856 CC 08 03		            cpy DBYTLO
   975 3859 D0 F5		            bne L364B
   976 				; check bank number
   977 385B 68			L3656       pla
   978 385C 18			            clc
   979 385D 6D AE 38		REAA021     adc SPARBNKS
   980 3860 CD AD 38		REAA018     cmp BNKCNT
   981 3863 B0 41		            bcs RDSIOEND+3
   982 				; switch bank          
   983 3865 A8			            tay
   984 3866 AE 01 D3		            ldx PORTB
   985 				;            inc CRITIC
   986 				;            sei
   987 				;            lda #$00
   988 				;            sta NMIEN
   989 				     
   990 3869 B9 BC 38		REAA019     lda BNKSWTMSK,Y
   991 386C 8D 01 D3		            sta PORTB
   992 				            
   993 386F A0 00		            ldy #$00
   994 3871 AD 02 03		            lda DCOMND
   995 3874 C9 52		            cmp #$52
   996 3876 D0 1D		            bne L369B
   997 				            
   998 3878 B1 32		L367B       lda (BUFRLO),Y
   999 387A 99 FC 38		REAA006     sta BUFFERXX1,Y
  1000 387D C8			            iny
  1001 387E CC 08 03		            cpy DBYTLO
  1002 3881 D0 F5		            bne L367B
  1003 				; restore bank
  1004 3883 8E 01 D3		            stx PORTB
  1005 				;            lda #$E0
  1006 				;            sta NMIEN
  1007 				;            cli
  1008 				;            dec CRITIC 
  1009 				             
  1010 3886 A0 00		            ldy #$00
  1011 3888			L368E
  1012 3888 B9 FC 38		REAA008     lda BUFFERXX1,Y
  1013 388B 91 34		            sta (BFENLO),Y
  1014 388D C8			            iny
  1015 388E CC 08 03		            cpy DBYTLO
  1016 3891 D0 F5		            bne L368E
  1017 3893 F0 0E		            beq RDSIOEND
  1018 3895			L369B
  1019 3895 B9 FC 38		REAA007     lda BUFFERXX1,Y
  1020 3898 91 32		            sta (BUFRLO),Y
  1021 389A C8			            iny
  1022 389B CC 08 03		            cpy DBYTLO
  1023 389E D0 F5		            bne L369B
  1024 				; restore bank
  1025 38A0 8E 01 D3		            stx PORTB
  1026 				;            lda #$E0
  1027 				;            sta NMIEN
  1028 				;            cli
  1029 				;            dec CRITIC 
  1030 				            
  1031 38A3 A0 01		RDSIOEND    ldy #$01
  1032 38A5 2C A0 8B		            bit $8BA0 ; $2c, ldy #$8b ; error #NAK
  1033 38A8 8C 03 03					sty DSTATS
  1034 38AB 98			            tya
  1035 38AC 60			            rts
  1036 				            
  1037 38AD 00			BNKCNT      .byte $00
  1038 38AE 00			SPARBNKS    .byte $00
  1039
  1040 				; drive configuration buffer
  1041 38AF 28 01 12		CONFBUF     .byte $28,$01,$12
  1042 38B2 00 00 00 00		L36BB       .byte $00,$00,$00,$00
  1043 38B6 80 FF 00 00 00	L36BF       .byte $80,$FF,$00,$00,$00
  1044
  1045 38BB 01			DRVNUM      .byte $01
  1046
  1047 				; Compy Shop
  1048 38BC			BNKSWTMSK
  1049 38BC E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE ; 1110:0010 1110:0110 1110:1010 1110:1110
  1050 38C0 A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE ; 1010:0010 1010:0110 1010:1010 1010:1110
  1051 38C4 62 66 6A 6E		            .byte $62,$66,$6A,$6E ; 0110:0010 0110:0110 0110:1010 0110:1110 
  1052 38C8 22 26 2A 2E		            .byte $22,$26,$2A,$2E ; 0010:0010 0010:0110 0010:1010 0010:1110
  1053 38CC E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC ; 1110:0000 1110:0100 1110:1000 1110:1100
  1054 38D0 A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC ; 1010:0000 1010:0100 1010:1000 1010:1100
  1055 38D4 60 64 68 6C		            .byte $60,$64,$68,$6C ; 0110:0000 0110:0100 0110:1000 0110:1100
  1056 38D8 20 24 28 2C		            .byte $20,$24,$28,$2C ; 0010:0000 0010:0100 0010:1000 0010:1100
  1057 				; extension for 1088k
  1058 38DC E3 E7 EB EF		            .byte $E3,$E7,$EB,$EF ; 1110:0011 1110:0111 1110:1011 1110:1111
  1059 38E0 A3 A7 AB AF		            .byte $A3,$A7,$AB,$AF ; 1010:0011 1010:0111 1010:1011 1010:1111
  1060 38E4 63 67 6B 6F		            .byte $63,$67,$6B,$6F ; 0110:0011 0110:0111 0110:1011 0110:1111 
  1061 38E8 23 27 2B 2F		            .byte $23,$27,$2B,$2F ; 0010:0011 0010:0111 0010:1011 0010:1111
  1062 38EC E1 E5 E9 ED		            .byte $E1,$E5,$E9,$ED ; 1110:0001 1110:0101 1110:1001 1110:1101
  1063 38F0 A1 A5 A9 AD		            .byte $A1,$A5,$A9,$AD ; 1010:0001 1010:0101 1010:1001 1010:1101
  1064 38F4 61 65 69 6D		            .byte $61,$65,$69,$6D ; 0110:0001 0110:0101 0110:1001 0110:1101
  1065 38F8 21 25 29 2D		            .byte $21,$25,$29,$2D ; 0010:0001 0010:0101 0010:1001 0010:1101
  1066 				 
  1067
  1068 				; $100 Bytes
  1069 38FC			BUFFERXX1
  1070
  1071 				;            org $37E6
  1072 = 39FC			REAEND      = BUFFERXX1 + $100
  1073 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1074 				;;; END OF REALLOC BLOCK
  1075 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1076
  1077
  1078 				; $20 Bytes extension $40
  1079 = 39FC			BNKSAVBUF   = REAEND
  1080
  1081 				; $20 bytes extension $40
  1082 				;            org $3806
  1083 = 3A3C			BNKSAVBUF2  = BNKSAVBUF + $40
  1084
  1085 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1086 				;
  1087 				; Realloc data arrays
  1088 				; 
  1089 				;           org $3826
  1090 38FC			            org BNKSAVBUF2 + $40
  1091 				; realloc whole addresses
  1092 3A7C-3B8F> 1A 34		REATAB      .word REAA001+1 ;$33CA
  1093 3A7E 24 34		            .word REAA002+1 ;$33D4
  1094 3A80 2B 34		            .word REAA003+1 ;$33DB
  1095 3A82 97 37		            .word REAA004+1 ;$3583
  1096 3A84 53 38		            .word REAA005+1 ;$364E
  1097 3A86 7B 38		            .word REAA006+1 ;$367E
  1098 3A88 96 38		            .word REAA007+1 ;$369C
  1099 3A8A 89 38		            .word REAA008+1 ;$368F
  1100 3A8C B0 37		            .word REAA009+1 ;$35A5
  1101 3A8E B7 37		            .word REAA010+1 ;$35AC
  1102 3A90 D1 37		            .word REAA011+1 ;$35C6
  1103 3A92 E3 37		            .word REAA012+1 ;$35D8
  1104 3A94 EA 37		            .word REAA013+1 ;$35DF
  1105 3A96 ED 37		            .word REAA014+1 ;$35E2
  1106 3A98 05 38		            .word REAA015+1 ;$35FA
  1107 3A9A 0A 38		            .word REAA016+1 ;$35FF
  1108 3A9C 37 38		            .word REAA017+1 ;$362C
  1109 3A9E 61 38		            .word REAA018+1 ;$365C
  1110 3AA0 6A 38		            .word REAA019+1 ;$3667
  1111 3AA2 1B 38		            .word REAA020+1 ;$3610
  1112 3AA4 5E 38		            .word REAA021+1 ;$3659
  1113 3AA6 00 00		            .word $0000
  1114
  1115 				; realloc address low byte           
  1116 3AA8 01 34		            .word REAL001+1 ;$33B1
  1117 3AAA 1D 34		            .word REAL002+1 ;$33CD
  1118 3AAC 82 37		            .word REAL003+1 ;$356E
  1119 3AAE 00 00		            .word $0000
  1120
  1121 				; realloc address high byte (address to high byte and value of low byte)
  1122 3AB0 05 34		            .word REAH001+1  ;$33B5
  1123 3AB2 7E			            .byte <JSRDOSINI ;$6A
  1124 				                        
  1125 3AB3 27 34		            .word REAH002+1 ;$33D7
  1126 3AB5 8C			            .byte <RAMDSIO  ;$78
  1127 				            
  1128 3AB6 87 37		            .word REAH003+1  ;$3573
  1129 3AB8 FC			            .byte <BNKSAVBUF ;$E6
  1130 				            
  1131 3AB9 00 00		            .word $0000
  1132 				            
  1133 				; realloc code pointer
  1134 3ABB 7C 3A		REATABADR   .word REATAB
  1135 3ABD 7E 37		REASRCADR   .word REABEGIN
  1136 3ABF FF FF		READSTADR   .word $FFFF
  1137
  1138 				; copy code pointer
  1139 3AC1 7E 37		CPYFROMADR  .word REABEGIN
  1140 3AC3 7E 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1141 3AC5 FF FF		CPYTOADR    .word $FFFF
  1142
  1143 3AC7 00 00		            .word $0000
  1144
  1145 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1146 				;
  1147 				; Subroutine realloc driver code
  1148 				;
  1149 3AC9 A9 00		REASTART    lda #$00
  1150 3ACB 8D 8D 3B		            sta REALOOPCNT
  1151 3ACE AE 8D 3B		REALOOP     ldx REALOOPCNT
  1152 3AD1 BD BB 3A		            lda REATABADR,X
  1153 3AD4 8D 73 3B		            sta L3910+1
  1154 3AD7 BD BC 3A		            lda REATABADR+1,X
  1155 3ADA 8D 74 3B		            sta L3910+2
  1156 3ADD 0D 73 3B		            ora L3910+1
  1157 3AE0 D0 01		            bne L3881
  1158 3AE2 60			            rts
  1159 				            
  1160 3AE3 38			L3881       sec
  1161 3AE4 BD BF 3A		            lda READSTADR,X
  1162 3AE7 FD BD 3A		            sbc REASRCADR,X
  1163 3AEA 8D 8E 3B		            sta READIFLO
  1164 3AED BD C0 3A		            lda READSTADR+1,X
  1165 3AF0 FD BE 3A		            sbc REASRCADR+1,X
  1166 3AF3 8D 8F 3B		            sta READIFHI
  1167 				            
  1168 3AF6 20 7E 3B		L3894       jsr L391C
  1169 3AF9 F0 13		            beq L38AC
  1170 3AFB B1 D7		            lda ($D7),Y
  1171 3AFD 18			            clc
  1172 3AFE 6D 8E 3B		            adc READIFLO
  1173 3B01 91 D7		            sta ($D7),Y
  1174 3B03 C8			            iny
  1175 3B04 B1 D7		            lda ($D7),Y
  1176 3B06 6D 8F 3B		            adc READIFHI
  1177 3B09 91 D7		            sta ($D7),Y
  1178 3B0B 4C F6 3A		            jmp L3894
  1179 3B0E 20 7E 3B		L38AC       jsr L391C
  1180 3B11 F0 0B		            beq L38BC
  1181 3B13 B1 D7		            lda ($D7),Y
  1182 3B15 18			            clc
  1183 3B16 6D 8E 3B		            adc READIFLO
  1184 3B19 91 D7		            sta ($D7),Y
  1185 3B1B 4C 0E 3B		            jmp L38AC
  1186 3B1E 20 7E 3B		L38BC       jsr L391C
  1187 3B21 F0 11		            beq L38D2
  1188 3B23 20 72 3B		            jsr L3910
  1189 3B26 18			            clc
  1190 3B27 6D 8E 3B		            adc READIFLO
  1191 3B2A B1 D7		            lda ($D7),Y
  1192 3B2C 6D 8F 3B		            adc READIFHI
  1193 3B2F 91 D7		            sta ($D7),Y
  1194 3B31 4C 1E 3B		            jmp L38BC
  1195 3B34 AE 8D 3B		L38D2       ldx REALOOPCNT
  1196
  1197 3B37 BD C1 3A		            lda CPYFROMADR,X
  1198 3B3A 8D 55 3B		            sta L38F2+1
  1199 3B3D BD C2 3A		            lda CPYFROMADR+1,X
  1200 3B40 8D 56 3B		            sta L38F2+2
  1201
  1202 3B43 BD C5 3A		            lda CPYTOADR,X
  1203 3B46 8D 58 3B		            sta L38F2+4
  1204 3B49 BD C6 3A		            lda CPYTOADR+1,X
  1205 3B4C 8D 59 3B		            sta L38F2+5
  1206
  1207 3B4F BC C4 3A		            ldy CPYLENGTH+1,X
  1208 3B52 A2 00		            ldx #$00
  1209 3B54 BD FF FF		L38F2       lda $FFFF,X
  1210 3B57 9D FF FF		            sta $FFFF,X
  1211 3B5A E8			            inx
  1212 3B5B D0 F7		            bne L38F2
  1213 3B5D EE 56 3B		            inc L38F2+2
  1214 3B60 EE 59 3B		            inc L38F2+5
  1215 3B63 88			            dey
  1216 3B64 10 EE		            bpl L38F2
  1217 3B66 AD 8D 3B		            lda REALOOPCNT
  1218 3B69 18			            clc
  1219 3B6A 69 0C		            adc #$0C
  1220 3B6C 8D 8D 3B		            sta REALOOPCNT
  1221 3B6F 4C CE 3A		            jmp REALOOP
  1222 				            
  1223 3B72 AD FF FF		L3910       lda $FFFF
  1224 3B75 EE 73 3B		            inc L3910+1
  1225 3B78 D0 03		            bne L391B
  1226 3B7A EE 74 3B		            inc L3910+2
  1227 3B7D 60			L391B       rts
  1228
  1229 3B7E 20 72 3B		L391C       jsr L3910
  1230 3B81 85 D7		            sta $D7
  1231 3B83 20 72 3B		            jsr L3910
  1232 3B86 A0 00		            ldy #$00
  1233 3B88 85 D8		            sta $D8
  1234 3B8A 05 D7		            ora $D7
  1235 3B8C 60			            rts
  1236 				; loop variables
  1237 3B8D 00			REALOOPCNT  .byte $00
  1238 3B8E 00			READIFLO    .byte $00
  1239 3B8F 00			READIFHI    .byte $00
  1240
  1241 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1242 				;
  1243 				; Segment for start address
  1244 				;
  1245 02E0-02E1> 03 30		            run start
  1246 				         
