mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/MEMCLEAR.ASM
     1 				; clears memory from MEMLO to MEMTOP
     2
     3 = 02E5			MEMTOP      = $02E5
     4 = 02E7			MEMLO       = $02E7
     5 = 02FC			CH			= $02FC
     6 				; 
     7 				; CIO
     8 				; 
     9 = E456			CIOV        = $E456
    10 				; CIOCB addresses
    11 = 0340			ICHID		= $0340
    12 = 0341			ICDNO		= $0341
    13 = 0342			ICCOM       = $0342
    14 = 0343			ICSTA		= $0343
    15 = 0344			ICBAL       = $0344
    16 = 0345			ICBAH       = $0345
    17 = 0346			ICPTL		= $0346
    18 = 0347			ICPTH		= $0347
    19 = 0348			ICBLL       = $0348
    20 = 0349			ICBLH       = $0349
    21 = 034A			ICAX1		= $034a
    22 = 034B			ICAX2		= $034b
    23
    24
    25 				;
    26 				; SpartaDOS 
    27 				;
    28 = 000A			DOSVEC		= $000A
    29 				;
    30 = 000A			SD_BUFOFF   = $0A ; offset in line buffer
    31 = 003F			SD_LBUF     = $3F ; offset to line buffer
    32 = 0003			SD_ZCRNAME  = $03 ; offset for jmp to crunch name
    33 = 0021			SD_COMFNAM  = $21 ; offset to buffer for crunch name 
    34 = 000A			SD_LSIO     = $0A ; negative offset to SIO vector
    35
    36 							org $600
    37
    38 				clear_start
    39 FFFF> 0600-062C> AD E7 + 			lda MEMLO
    40 0603 8D 0F 06					sta clear_loop+1
    41 0606 AD E8 02					lda MEMLO+1
    42 0609 8D 10 06					sta clear_loop+2
    43 							
    44 060C A2 00		clearValue	ldx #$00
    45 060E 8E FF FF		clear_loop	stx $ffff
    46
    47 0611 AD 10 06					lda clear_loop+2	; check for MEMTOP
    48 0614 CD E6 02					cmp MEMTOP+1
    49 0617 D0 08					bne clear_inc
    50 0619 AD 0F 06					lda clear_loop+1
    51 061C CD E5 02					cmp MEMTOP
    52 061F B0 0B		            bcs clear_end
    53 				            
    54 0621 EE 0F 06		clear_inc   inc clear_loop+1	; inc address
    55 0624 D0 E8		            bne clear_loop
    56 0626 EE 10 06					inc clear_loop+2
    57 0629 4C 0E 06					jmp clear_loop
    58 							
    59 062C 60			clear_end	rts
    60
    61 062D						org $3000
    62
    63 3000-316C> 20 3E 31				jsr pcheck			; check for parameter 1
    64 3003 90 57					bcc startClear
    65
    66 3005 20 50 31					jsr pget			; get parameter
    67 3008 F0 2A					beq parameterError
    68 							
    69 300A A2 00		            ldx #$00
    70 300C A0 24		            ldy #SD_COMFNAM+3	; get value
    71 300E B1 0A		loop_r2     lda (DOSVEC),Y
    72 3010 C9 9B					cmp #$9b
    73 3012 F0 20					beq parameterError
    74 3014 9D A7 30					sta clr_char,x
    75 3017 C8						iny
    76 3018 E8						inx
    77 3019 E0 02		vchar_cnt	cpx #$02
    78 301B D0 F1					bne loop_r2
    79 							
    80 301D B1 0A					lda (DOSVEC),Y		; check for end after second char
    81 301F C9 9B					cmp #$9b
    82 3021 D0 11					bne parameterError
    83 							
    84 3023 AE A7 30					ldx clr_char			; convert to hex
    85 3026 AC A8 30					ldy clr_char+1
    86 3029 20 10 31					jsr conva2h			
    87 302C 8D 0D 06					sta clearValue+1
    88
    89 302F 20 3E 31					jsr pcheck			; check for too many parameter
    90 3032 90 28					bcc startClear
    91
    92 3034			parameterError
    93 3034 20 C6 30					jsr print
    94 3037 50 61 72 61 6D 65 + 			.byte 'Parameter Error: use MEMCLEAR [hh]',$9b,$ff
    95 305B 60						rts
    96
    97 305C			startClear
    98 305C AD E8 02					lda MEMLO+1
    99 305F 20 F9 30					jsr convh2a
   100 3062 8E 96 30					stx adr_low
   101 3065 8C 97 30					sty adr_low+1
   102 3068 AD E7 02					lda MEMLO
   103 306B 20 F9 30					jsr convh2a
   104 306E 8E 98 30					stx adr_low+2
   105 3071 8C 99 30					sty adr_low+3
   106
   107 3074 AD E6 02					lda MEMTOP+1
   108 3077 20 F9 30					jsr convh2a
   109 307A 8E 9C 30					stx adr_high
   110 307D 8C 9D 30					sty adr_high+1
   111 3080 AD E5 02					lda MEMTOP
   112 3083 20 F9 30					jsr convh2a
   113 3086 8E 9E 30					stx adr_high+2
   114 3089 8C 9F 30					sty adr_high+3
   115
   116 308C 20 C6 30			        jsr PRINT
   117 308F 43 6C 65 61 72 20 +     	    .byte 'Clear $' 
   118 3096 78 78 78 78 2D 24	adr_low		.byte 'xxxx-$'
   119 309C 79 79 79 79 20 77 + adr_high	.byte 'yyyy with $'
   120 30A7 30 30 3F 20 28 59 + clr_char	.byte '00? (Y)',$ff
   121
   122 30AF 20 2F 31			        jsr getKey
   123 30B2 C9 2B		    	    cmp #$2B
   124 30B4 D0 03		        	bne clear_abort
   125 30B6 4C 00 06		        	jmp clear_start
   126 				        	
   127 30B9			clear_abort
   128 30B9 20 C6 30			        jsr PRINT
   129 30BC 9B 41 62 6F 72 74 +     	    .byte $9b,'Abort.',$9b,$ff 
   130 30C5 60						rts
   131
   132 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   133 				;
   134 				; print subroutine            
   135 				;
   136 30C6 68			print		pla
   137 30C7 8D D7 30		            sta print_iter+1
   138 30CA 68			            pla
   139 30CB 8D D8 30		            sta print_iter+2
   140 30CE EE D7 30		print_loop  inc print_iter+1
   141 30D1 D0 03		            bne print_iter
   142 30D3 EE D8 30		            inc print_iter+2
   143 30D6 AD FF FF		print_iter  lda $ffff
   144 30D9 C9 FF		            cmp #$ff
   145 30DB F0 13		            beq print_end
   146 				            
   147 30DD A2 00		            ldx #$00			; put char
   148 30DF 8E 48 03		            stx ICBLL
   149 30E2 8E 49 03		            stx ICBLH
   150 30E5 A0 0B		            ldy #$0B
   151 30E7 8C 42 03		            sty ICCOM
   152 30EA 20 56 E4		            jsr CIOV
   153 				            
   154 30ED 4C CE 30		            jmp print_loop
   155 30F0 AD D8 30		print_end   lda print_iter+2
   156 30F3 48			            pha
   157 30F4 AD D7 30		            lda print_iter+1
   158 30F7 48			            pha
   159 30F8 60			            rts
   160
   161 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   162 				;
   163 				; convert hex to atascii
   164 				;   hex A -> atascii X,Y            
   165 				;
   166 30F9 48			convh2a		pha
   167 30FA 4A						lsr
   168 30FB 4A						lsr
   169 30FC 4A						lsr
   170 30FD 4A						lsr
   171 30FE F8						sed		
   172 30FF 18						clc
   173 3100 69 90					adc #$90
   174 3102 69 40					adc #$40
   175 3104 AA						tax
   176 3105 68						pla
   177 3106 29 0F					and #$0f
   178 3108 18						clc
   179 3109 69 90					adc #$90
   180 310B 69 40					adc #$40
   181 310D A8						tay
   182 310E D8						cld			
   183 310F 60						rts
   184
   185 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   186 				;
   187 				; convert atascii to hex
   188 				;   atascii X,Y -> hex A            
   189 				;
   190 3110 8A			conva2h		txa
   191 3111 20 22 31					jsr conva2h_h
   192 3114 0A						asl
   193 3115 0A						asl
   194 3116 0A						asl
   195 3117 0A						asl
   196 3118 8D 20 31					sta conva2h_o+1
   197 311B 98						tya
   198 311C 20 22 31					jsr conva2h_h
   199 311F 09 00		conva2h_o	ora #$00
   200 3121 60						rts
   201 							
   202 3122 38			conva2h_h   sec
   203 3123 E9 30		            sbc #'0'
   204 3125 C9 0A		            cmp #$0A
   205 3127 90 03		            bcc conva2h_hl
   206 3129 18			            clc
   207 312A 69 09		            adc #$09
   208 312C 29 0F		conva2h_hl  and #$0F
   209 312E 60			            rts
   210
   211 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   212 				;
   213 				; get key
   214 				;
   215 312F			getKey
   216 312F A9 FF				lda #$FF		; check for key
   217 3131 AA					tax
   218 3132 CD FC 02				cmp CH
   219 3135 F0 F8				beq getKey
   220 3137 AD FC 02				lda CH
   221 313A 8E FC 02				stx CH
   222 313D 60					rts
   223 							
   224 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   225 				;
   226 				; check for next parameter
   227 				;   sets carry if next parameter is available
   228 				;
   229 313E A0 0A		pcheck		ldy #SD_BUFOFF
   230 3140 B1 0A		            lda (DOSVEC),Y
   231 3142 18			            clc
   232 3143 69 3F		            adc #SD_LBUF
   233 3145 A8			            tay
   234 3146 B1 0A		            lda (DOSVEC),Y
   235 3148 C9 9B		            cmp #$9b
   236 314A 18			            clc
   237 314B F0 01		            beq pcheck_end
   238 314D 38						sec
   239 314E 60			pcheck_end	rts
   240
   241 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242 				;
   243 				; get next parameter
   244 				;   calls crunch name 
   245 				;
   246 				; jump for jsr to crunch name
   247 314F FF			pget_set	.byte $ff
   248 3150			pget		; set crunch name address, if necessary
   249 3150 2C 4F 31					bit pget_set
   250 3153 10 14					bpl pget_call
   251 							
   252 3155 A5 0A					lda DOSVEC
   253 3157 18			            clc
   254 3158 69 03		            adc #SD_ZCRNAME
   255 315A 8D 6A 31		            sta pget_call+1
   256 				            
   257 315D A5 0B		            lda DOSVEC+1
   258 315F 69 00		            adc #$00
   259 3161 8D 6B 31		            sta pget_call+2
   260 				            
   261 3164 A9 00					lda #$00
   262 3166 8D 4F 31					sta pget_set
   263 							
   264 3169 20 FF FF		pget_call	jsr $ffff
   265 316C 60						rts
   266 							
