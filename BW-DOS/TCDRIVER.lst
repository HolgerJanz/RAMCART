mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0303			DSTATS		= $0303
    41 = 0304			DBUFLO      = $0304
    42 = 0305			DBUFHI      = $0305
    43 = 0308			DBYTLO      = $0308
    44 = 0309			DBYTHI      = $0309
    45 = 030A			DAUX1       = $030A
    46 = 030B			DAUX2       = $030B
    47 = 0340			IOCB0       = $0340
    48 				; 
    49 				; PIA
    50 				; 
    51 = D300			PORTA       = $D300
    52 = D301			PORTB       = $D301
    53 = D302			PACTL       = $D302
    54 = D303			PBCTL       = $D303
    55 				; 
    56 				; ANTIC
    57 				;
    58 = D400			DMACTL      = $D400 
    59 = D40A			WSYNC       = $D40A
    60 = D40E			NMIEN       = $D40E
    61 				; 
    62 				; ROM VECTORS
    63 				; 
    64 = E456			CIOV        = $E456
    65 				;
    66 				; SpartaDOS 
    67 				;
    68 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    69 = 003F			SD_LBUF        = $3F ; offset to line buffer
    70 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    71 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    72 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    73
    74 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    75 				; 
    76 				; The!Cart programming information
    77 				; (c) 2013 Matthias Reichl
    78 				;
    79 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    80 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    81 				; 25AA020A). The memory is addressed using 16384 8k banks
    82 				; (64 8k banks when using RAM instead of flash).
    83 				; 
    84 				; The cartridge configuration registers are located at
    85 				; $D5A0-$D5A8. All registers are read/write unless noted
    86 				; otherwise. Unused bits shall be written as '0' and
    87 				; always read back as '0'.
    88 				; 
    89 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    90 				; flash bank 0, writes to flash are disabled.
    91 				; 
    92 				; Depending on the selected cartridge mode additional
    93 				; registers are enabled at $D5xx.
    94 				; 
    95 				; The primary bank register also serves as a base bank
    96 				; register for the various sub-modes.
    97 				; 
    98 				; The secondary bank register is only used in "flexi mode".
    99 				;
   100
   101 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102 				; 
   103 				; The!Cart Register (from-to,default)
   104 				;
   105
   106 				; Mode Select
   107 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   108 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   109 				; other than the ones listed here are reserved (and result
   110 				; in "cartridge off"):
   111 				; $00: off, cartridge disabled
   112 				; $01: 8k banks at $A000
   113 				; $02: AtariMax 1MBit / 128k
   114 				; $03: Atarimax 8MBit / 1MB
   115 				; $04: OSS M091
   116 				; $08: SDX 64k cart, $D5Ex banking
   117 				; $09: Diamond GOS 64k cart, $D5Dx banking
   118 				; $0A: Express 64k cart, $D57x banking
   119 				; $0C: Atrax 128k cart
   120 				; $0D: Williams 64k cart
   121 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   122 				; $21: standard 16k cart at $8000-$BFFF
   123 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   124 				; $23: Blizzard 16k
   125 				; $24: Sic!Cart 512k
   126 				; $28: 16k Mega cart
   127 				; $29: 32k Mega cart
   128 				; $2A: 64k Mega cart
   129 				; $2B: 128k Mega cart
   130 				; $2C: 256k Mega cart
   131 				; $2D: 512k Mega cart
   132 				; $2E: 1024k Mega cart
   133 				; $2F: 2048k Mega cart
   134 				; $30: 32k XEGS cart
   135 				; $31: 64k XEGS cart
   136 				; $32: 128k XEGS cart
   137 				; $33: 256k XEGS cart
   138 				; $34: 512k XEGS cart
   139 				; $35: 1024k XEGS cart
   140 				; $38: 32k SWXEGS cart
   141 				; $39: 64k SWXEGS cart
   142 				; $3A: 128k SWXEGS cart
   143 				; $3B: 256k SWXEGS cart
   144 				; $3C: 512k SWXEGS cart
   145 				; $3D: 1024k SWXEGS cart
   146 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   147 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   148 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   149 				                         ; separate 8k banks at $A000 and $8000
   150 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   151
   152 				; how to figure out that The!Cart is not active?
   153 				; If the address is not used then the XL returns $ff but
   154 				; the XE (and old 800) return $d5 (high byte of address,
   155 				; the value of the last bus cycle)
   156 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   157 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   158
   159 				; Mode Flash/RAM Select
   160 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   161 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   162 				; bit 1: primary bank source (0=flash, 1=RAM)
   163 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   164 				; bit 3: secondary bank source (0=flash, 1=RAM)
   165 = 0000			TCMOFR.FLASH = $00
   166 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   167 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   168
   169 				; Primary Bank
   170 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   171 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   172 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   173
   174 				; Secondary Bank 
   175 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   176 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   177 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   178
   179 				; SPI interface to EEPROM
   180 = D5A8			TCINEP = $d5a8
   181 				; bit 0: SPI CLK
   182 				; bit 1: SPI CS
   183 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   184
   185 				; configuration lock
   186 = D5AF			TCCOLO = $d5af
   187 				; Writing to this register disables "The!Cart" registers
   188 				; at $d5aX.
   189
   190
   191 				; macros
   192
   193 				; saves register: pushes bank register on stack
   194 				M_cart_push .macro
   195 				            lda TCPBEN
   196 				            pha
   197 				            lda TCMOSL
   198 				            pha
   199 				            lda TCMOFR
   200 				            pha
   201 				            lda TCPBRL
   202 				            pha
   203 				            lda TCPBRH
   204 				            pha
   205 				            .endm
   206
   207 				; restores register from stack: pops from stack
   208 				M_cart_pop  .macro
   209 				            pla                 
   210 				            sta TCPBRH          
   211 				            pla                 
   212 				            sta TCPBRL          
   213 				            pla                 
   214 				            sta TCMOFR          
   215 				            pla                 
   216 				            sta TCMOSL
   217 				            pla                 
   218 				            sta TCPBEN          
   219 				            .endm
   220 				 
   221 				; set bank: number of bank in X, uses A
   222 				M_cart_set  .macro
   223 				; set new The!Cart mode
   224 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   225 				            sta TCMOSL          
   226 				            lda #TCMOFR.PBRAM       ; set to RAM
   227 				            sta TCMOFR
   228 				            txa
   229 				            asl   
   230 				            sta TCPBRL              ; get bank number from X
   231 				            lda #$00                     
   232 				            sta TCPBRH              ; set high to $00
   233 				            lda #$01
   234 				            sta TCPBEN              ; enable        
   235 				            .endm
   236 				;
   237 				; Start of code
   238 				;
   239 				            org $3000
   240 				            
   241 				; info message
   242 FFFF> 3000-381C> 20 FF +             jsr PRINT
   243 3003 54 68 65 21 52 61 +             .byte 'The!Ramdisk for The!Cart ver42bw hjx',$9B,$FF
   244
   245 				; check for The!Cart
   246 3029 AD A6 D5		             lda TCMOSL
   247 302C C9 FF		             cmp #TCMOSL.XLLOCK
   248 302E F0 04		             beq NORAMDISK
   249 3030 C9 D5		             cmp #TCMOSL.XELOCK
   250 3032 D0 23		             bne RAMDISKINI
   251 3034			NORAMDISK
   252 				; no banks            
   253 3034 20 FF 35		            jsr PRINT
   254 3037 20 20 45 72 72 6F +             .byte '  Error: The!Cart not found',$9B,$FF
   255 3054 4C 4D 31		            jmp PRNHLP
   256 				                        
   257 3057			RAMDISKINI
   258 				; check for parameter
   259 3057 20 77 35					jsr PARAMCHECK
   260 305A B0 23		            bcs PRSPARM
   261 				; no parameter -> error
   262 305C 20 FF 35		            jsr PRINT
   263 305F 20 20 45 72 72 6F +             .byte '  Error: No parameter',$9B,$FF
   264 3076 4C 4D 31		            jmp PRNHLP
   265
   266 				; jump for jsr to crunch name
   267 3079 4C FF FF		CRNAME      jmp $FFFF
   268
   269 307C 00			CHKFRMT     .byte $00
   270 307D 00			CHKDRVR     .byte $00
   271 307E 00			CHKOPTN     .byte $00
   272
   273 				; set crunch name address
   274 307F A5 0A		PRSPARM     lda DOSVEC
   275 3081 18			            clc
   276 3082 69 03		            adc #SD_ZCRNAME
   277 3084 8D 7A 30		            sta CRNAME+1
   278 3087 A5 0B		            lda DOSVEC+1
   279 3089 69 00		            adc #$00
   280 308B 8D 7B 30		            sta CRNAME+2
   281 				            
   282 				; parameter parsing            
   283 				; get drive number SD_COMFNAM starts alway with Dx:
   284 308E 20 79 30		            jsr CRNAME
   285 3091 D0 4B		            bne PARAMERR1
   286 3093 A0 21		            ldy #SD_COMFNAM
   287 3095 B1 0A		            lda (DOSVEC),Y
   288 3097 C9 44					cmp #'D'
   289 3099 D0 43					bne PARAMERR1         
   290 309B C8			            iny
   291 309C B1 0A		            lda (DOSVEC),Y
   292 309E 29 0F		            and #$0F
   293 30A0 8D 18 38		            sta DRVNUM
   294
   295 				; check for list auf drives for flash drives
   296 30A3 A2 00					ldx #$00
   297 30A5 8E C9 30					stx FPARSLOOPX+1
   298 30A8 20 77 35		FPARSLOOP	jsr PARAMCHECK
   299 30AB 90 58		            bcc PRSPAREND
   300 30AD 20 79 30					jsr CRNAME
   301 30B0 D0 26		            bne PARAMOPT
   302 30B2 A0 21		            ldy #SD_COMFNAM
   303 30B4 B1 0A		            lda (DOSVEC),Y
   304 30B6 C9 44					cmp #'D'
   305 30B8 D0 76					bne PARAMERR            
   306 30BA C8			            iny
   307 30BB B1 0A		            lda (DOSVEC),Y
   308 30BD 29 0F		            and #$0F
   309 30BF AE C9 30					ldx FPARSLOOPX+1
   310 30C2 9D 19 38		            sta FDRVNUM,X
   311 30C5 EE C9 30		            inc FPARSLOOPX+1
   312 30C8 A2 04		FPARSLOOPX	ldx #$04
   313 30CA E0 04		            cpx #$04
   314 30CC D0 DA		            bne FPARSLOOP
   315 				            
   316 				; check options /xxx
   317 30CE 20 77 35					jsr PARAMCHECK
   318 30D1 90 32		            bcc PRSPAREND
   319 30D3 20 79 30		            jsr CRNAME
   320 30D6 F0 58		            beq PARAMERR
   321
   322 30D8 A0 24		PARAMOPT	ldy #SD_COMFNAM+3
   323 30DA B1 0A		            lda (DOSVEC),Y
   324 30DC C9 2F		            cmp #'/'
   325 30DE D0 50		PARAMERR1   bne PARAMERR
   326 30E0 C8			PRSPARLOOP  iny
   327 30E1 B1 0A		            lda (DOSVEC),Y
   328
   329 30E3 C9 9B		            cmp #$9B         ; end of parameter
   330 30E5 F0 1E		            beq PRSPAREND
   331 				            
   332 30E7 C9 46		PRSPARNXT1  cmp #'F'         ; format only ?
   333 30E9 D0 0B		            bne PRSPARNXT2
   334 30EB A9 FF		            lda #$FF
   335 30ED 8D 7E 30		            sta CHKOPTN
   336 30F0 8D 7C 30		            sta CHKFRMT
   337 30F3 4C E0 30		            jmp PRSPARLOOP
   338
   339 30F6 C9 44		PRSPARNXT2  cmp #'D'         ; driver only ?
   340 30F8 D0 36		            bne PARAMERR
   341 30FA A9 FF		            lda #$FF
   342 30FC 8D 7E 30		            sta CHKOPTN
   343 30FF 8D 7D 30		            sta CHKDRVR
   344 3102 4C E0 30		            jmp PRSPARLOOP
   345
   346 3105			PRSPAREND
   347 3105 20 77 35					jsr PARAMCHECK	; too many parameter
   348 3108 B0 26		            bcs PARAMERR
   349
   350 				; set format and ini by options
   351 310A 2C 7E 30		            bit CHKOPTN
   352 310D 30 08		            bmi STRTINIFMT ; no options set default /DF
   353 310F A9 FF		            lda #$FF
   354 3111 8D 7D 30		            sta CHKDRVR
   355 3114 8D 7C 30		            sta CHKFRMT
   356 3117			STRTINIFMT
   357 				; install driver requested
   358 3117 2C 7D 30		            bit CHKDRVR
   359 311A 10 03		            bpl NOINIDRV
   360 311C 20 38 32		            jsr STARTINST
   361 311F			NOINIDRV
   362 				; format if requested
   363 311F 2C 7E 30		            bit CHKOPTN
   364 3122 30 03		            bmi NOPREFRMT
   365 3124 20 B7 33		            jsr CHECKFRMT
   366 3127			NOPREFRMT
   367 3127 2C 7C 30		            bit CHKFRMT
   368 312A 10 03		            bpl NOFRMTRD
   369 312C 20 DE 32		            jsr FRMTRD
   370 312F			NOFRMTRD
   371 312F 60			            rts
   372
   373 3130 20 FF 35		PARAMERR    jsr PRINT
   374 3133 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter',$9B,$FF
   375 314D			PRNHLP
   376 314D 20 FF 35		            jsr PRINT
   377 3150 20 20 50 61 72 61 +             .byte '  Parameter: Dx: [Da:]..[Dd:] [/DF]',$9B
   378 3174 20 20 20 20 78 20 +             .byte '    x - number for ramdisk',$9B
   379 318F 20 20 20 20 61 2D +             .byte '    a-d - number for flash disk 1-4',$9B
   380 31B3 20 20 20 20 44 20 +             .byte '    D - install driver only',$9B
   381 31CF 20 20 20 20 46 20 +             .byte '    F - format ramdisk only',$9B
   382 31EB 20 20 55 73 65 20 +             .byte '  Use shift+return/esc in start menu.',$9B
   383 3211 20 20 49 66 20 44 +             .byte '  If Dx: equals Da-d:, Dx: precedes.',$9B,$FF
   384 3237 60			            rts
   385
   386
   387 3238			STARTINST   
   388 3238 20 FF 35		            jsr PRINT
   389 323B 44 72 69 76 65 72 +             .byte 'Driver installed',$9b,$ff
   390
   391 324D AD 18 38		            lda DRVNUM
   392 3250 18			            clc
   393 3251 69 30		            adc #'0'
   394 3253 8D 5E 32		            sta ramDx
   395 3256 20 FF 35					jsr PRINT
   396 3259 52 41 4D 3D 44	            .byte 'RAM=D'
   397 325E 78 20 FF		ramDx       .byte 'x ',$ff
   398
   399 3261			PRTFLASHDRV
   400 3261 A2 00					ldx #$00
   401 3263 8E 87 32					stx PRNDRVLPX+1
   402 3266 AE 87 32		PRNDRVLP	ldx PRNDRVLPX+1
   403 3269 BD 19 38		            lda FDRVNUM,X
   404 326C 18			            clc
   405 326D 69 30		            adc #'0'
   406 326F 8D 80 32		            sta flashDy
   407 3272 8A			            txa
   408 3273 18			            clc
   409 3274 69 31		            adc #'1'
   410 3276 8D 7D 32		            sta flashDx
   411 3279 20 FF 35					jsr PRINT
   412 327C 46						.byte 'F'
   413 327D 78 3D 44		flashDx		.byte 'x=D'
   414 3280 79 20 FF		flashDy     .byte 'y ',$ff
   415 3283 EE 87 32		PRTDRVNXT	inc PRNDRVLPX+1
   416 3286 A2 04		PRNDRVLPX	ldx #$04
   417 3288 E0 04					cpx #$04
   418 328A D0 DA					bne PRNDRVLP
   419 							
   420 328C 20 FF 35					jsr PRINT
   421 328F 9B FF					.byte $9b,$ff
   422
   423 3291			PRTDRVEND
   424 				; set jsr to original DOSINI
   425 3291 A5 0C		            lda DOSINI
   426 3293 8D 36 36		            sta JSRDOSINI+1
   427 3296 A5 0D		            lda DOSINI+1
   428 3298 8D 37 36		            sta JSRDOSINI+2
   429
   430 				; set MEMLO oldaddress, realloc
   431 329B AD E7 02		            lda MEMLO
   432 329E 8D D0 39		            sta READSTADR
   433 32A1 8D D6 39		            sta CPYTOADR
   434 32A4 AD E8 02		            lda MEMLO+1
   435 32A7 8D D1 39		            sta READSTADR+1
   436 32AA 8D D7 39		            sta CPYTOADR+1
   437 				;
   438 				; start realloc
   439 				;
   440 32AD 20 08 39		            jsr REASTART
   441
   442 				; set new DOSINI            
   443 32B0 A9 35		REAL001     lda #<JSRDOSINI
   444 32B2 85 0C		            sta DOSINI
   445 32B4 A9 36		REAH001     lda #>JSRDOSINI
   446 32B6 85 0D		            sta DOSINI+1
   447 				; get SIO and patch for RAMDISK
   448 32B8 38			            sec
   449 32B9 A5 0A		            lda DOSVEC
   450 32BB E9 0A		            sbc #SD_LSIO
   451 32BD 85 32		            sta BUFRLO
   452 32BF A5 0B		            lda DOSVEC+1
   453 32C1 E9 00		            sbc #$00
   454 32C3 85 33		            sta BUFRHI
   455 32C5 A0 00		            ldy #$00
   456 32C7 B1 32		            lda (BUFRLO),Y
   457 32C9 8D 62 36		REAA001     sta JMPSIO+1      ;realloc $33CA
   458 32CC A9 43		REAL002     lda #<RAMDSIO
   459 32CE 91 32		            sta (BUFRLO),Y
   460 32D0 C8			            iny
   461 32D1 B1 32		            lda (BUFRLO),Y
   462 32D3 8D 63 36		REAA002     sta JMPSIO+2      ;realloc $33D4
   463 32D6 A9 36		REAH002     lda #>RAMDSIO
   464 32D8 91 32		            sta (BUFRLO),Y
   465 				; set MEMLO            
   466 32DA 20 38 36		REAA003     jsr SETMEMLO      ;realloc $33DB
   467 32DD 60			            rts
   468
   469 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   470 				;
   471 				; format ramdisk
   472 				;
   473 32DE 20 FF 35		FRMTRD      jsr PRINT
   474 32E1 52 61 6D 64 69 73 +             .byte 'Ramdisk formatted',$9B,$FF
   475
   476 32F4 20 8F 35		            jsr cart_save
   477
   478 				; header loop            
   479 32F7 A2 00		            ldx #$00
   480 32F9 20 D5 35		            jsr cart_set
   481 32FC A0 7F		            ldy #$7f
   482 32FE B9 E0 33		_loophead1  lda RDSEC1,Y
   483 3301 99 00 80		            sta $8000,Y		; sector 1
   484 3304 88			            dey
   485 3305 10 F7		            bpl _loophead1
   486 3307 20 AE 35		            jsr cart_restore
   487
   488 330A A2 00		            ldx #$00
   489 330C 20 D5 35		            jsr cart_set
   490 330F A0 7F		            ldy #$7f
   491 3311 B9 60 34		_loophead2  lda RDSEC2,Y
   492 3314 99 80 80		            sta $8080,Y		; sector 2
   493 3317 88			            dey
   494 3318 10 F7		            bpl _loophead2
   495 331A 20 AE 35		            jsr cart_restore
   496
   497 331D A2 00		            ldx #$00
   498 331F 20 D5 35		            jsr cart_set
   499 3322 A0 7F		            ldy #$7f
   500 3324 B9 E0 34		_loophead3  lda RDSEC3,Y
   501 3327 99 00 81		            sta $8100,Y		; sector 3
   502 332A 88			            dey
   503 332B 10 F7		            bpl _loophead3
   504 332D 20 AE 35		            jsr cart_restore
   505
   506 				; set sector 4-7 to $ff VTOV 512k = 4096 sectors
   507 				; = 4 VTOC sectors
   508 3330 A2 00		_loop47     ldx #$00
   509 3332 20 D5 35		            jsr cart_set
   510 3335 A9 FF		            lda #$ff
   511 3337 A0 7F		            ldy #$7f
   512 3339 99 80 81		FRMTCLP47   sta $8180,Y
   513 333C 88			            dey
   514 333D 10 FA		            bpl FRMTCLP47
   515 333F 20 AE 35		            jsr cart_restore
   516 3342 AD 3A 33		            lda FRMTCLP47+1
   517 3345 18			            clc
   518 3346 69 80		            adc #$80
   519 3348 8D 3A 33		            sta FRMTCLP47+1
   520 334B AD 3B 33		            lda FRMTCLP47+2
   521 334E 69 00		            adc #$00
   522 3350 8D 3B 33		            sta FRMTCLP47+2
   523 3353 A9 04		_loopcnt47  lda #$04
   524 3355 CE 54 33		            dec _loopcnt47+1
   525 3358 D0 D6		            bne _loop47
   526
   527 				; clear sector 8-11 
   528 335A A2 00		_loop89     ldx #$00
   529 335C 20 D5 35		            jsr cart_set
   530 335F A9 00		            lda #$00
   531 3361 A0 7F		            ldy #$7f
   532 3363 99 80 83		FRMTCLP89   sta $8380,Y
   533 3366 88			            dey
   534 3367 10 FA		            bpl FRMTCLP89
   535 3369 20 AE 35		            jsr cart_restore
   536 336C AD 64 33		            lda FRMTCLP89+1
   537 336F 18			            clc
   538 3370 69 80		            adc #$80
   539 3372 8D 64 33		            sta FRMTCLP89+1
   540 3375 AD 65 33		            lda FRMTCLP89+2
   541 3378 69 00		            adc #$00
   542 337A 8D 65 33		            sta FRMTCLP89+2
   543 337D A9 04		_loopcnt89  lda #$04
   544 337F CE 7E 33		            dec _loopcnt89+1
   545 3382 D0 D6		            bne _loop89
   546
   547 3384 A2 00		            ldx #$00
   548 3386 20 D5 35		            jsr cart_set
   549 				; mark used sectors
   550 3389 A9 00		            lda #$00
   551 338B 8D 80 81		            sta $8180   ; sector 1-8
   552 338E A9 1F		            lda #$1f
   553 3390 8D 81 81		            sta $8181   ; sector 9-11
   554 				; set sector map for MAIN
   555 3393 A9 00		            lda #$00    ; two words $0000 (first and last)
   556 3395 8D 00 84		            sta $8400
   557 3398 8D 01 84		            sta $8401
   558 339B 8D 02 84		            sta $8402
   559 339E 8D 03 84		            sta $8403
   560 33A1 A9 0A		            lda #$0a    ;  and third $0009 start of main
   561 33A3 8D 04 84		            sta $8404
   562 				; set MAIN directory            
   563 33A6 A2 00		            ldx #$00
   564 33A8 BD 60 35		_loopmain   lda RDMAIN,x
   565 33AB 9D 80 84		            sta $8480,x
   566 33AE E8			            inx
   567 33AF E0 17		            cpx #$17
   568 33B1 D0 F5		            bne _loopmain
   569 33B3 20 AE 35		            jsr cart_restore
   570 				; finished
   571 33B6 60			            rts
   572
   573 				; check preformat
   574 33B7			checkfrmt
   575 33B7 20 8F 35		            jsr cart_save
   576 33BA A2 00		            ldx #$00
   577 33BC 20 D5 35		            jsr cart_set
   578
   579 33BF BD 66 35		_nxtcharv   lda RDMAINNAME,x    ; check volume name
   580 33C2 DD 86 84		            cmp $8486,x			; sector $09
   581 33C5 D0 0F		            bne _nofrmt
   582 33C7 E8			            inx
   583 33C8 E0 0B		            cpx #$0b
   584 33CA D0 F3		            bne _nxtcharv
   585 				            
   586 33CC 20 AE 35		            jsr cart_restore
   587 33CF A9 00		            lda #$00
   588 33D1 8D 7C 30		            sta CHKFRMT
   589 33D4 38			            sec
   590 33D5 60			            rts
   591 				            
   592 33D6 20 AE 35		_nofrmt     jsr cart_restore
   593 33D9 A9 FF		            lda #$FF
   594 33DB 8D 7C 30		            sta CHKFRMT
   595 33DE 18			            clc
   596 33DF 60			            rts
   597
   598 				; load boot sector to $3000 start $3080 and RTS ($60)
   599 33E0			RDSEC1
   600 33E0 00						.byte $00 ; Usually 0. Some formatting tools put a $53 (='S) for SD here.
   601 33E1 03			            .byte $03 ; Number of sectors to boot.
   602 33E2 00 30		            .byte $00,$30 ; Address where the boot sectors are loaded to
   603 33E4 E0 07		            .byte $E0,$07 ; This address is copied to DOSINI
   604 33E6 4C 80 30		            .byte $4c,$80,$30 ; After boot jump here: jmp $3080 (just RTS)
   605 33E9 09 00		            .byte $09,$00 ; Sector number of the first sector map of the MAIN directory
   606 33EB 00 10		            .word $1000 ; total sector count
   607 33ED F5 0F		            .word $0ff5 ; free sector count
   608 33EF 05			            .byte $05 ; Number of bit map sectors on the disk
   609 33F0 04 00		            .byte $04,$00 ; Sector number of the first bit map sector
   610 33F2 51 00		            .byte $51,$00 ; Sector number to begin the file data sector allocation search
   611 33F4 0B 00		            .byte $0B,$00 ; Sector number to begin the directory data sector allocation search
   612 33F6 43 41 52 54 35 31 +             .byte 'CART512K' ; Volume name, 8 chars
   613 33FE 01			            .byte $01 ; Tracks on disk (1 for ramdisks and HDs)
   614 33FF 80			            .byte $80 ; Sector size ($80=128,$00=256,$01=512)
   615 				;            .byte $20 ; File system version ($20=SD1.1-4.2 version 2.0, $21=Sd4.4> version 2.1) 
   616 				;            .byte $00,$00,$00,$00,$00 ; reserved - no known use
   617 				;            .byte $00 ; Volume sequence number
   618 				;            .byte $00 ; Volume random number
   619 				;            .byte $00,$00 ; Sector number of the first sector map of the file to be loaded when the disk is booted
   620 				;            .byte $00 ; Lock flag ($ff=locked, $00=unlocked)
   621 				;            .byte $00
   622 3400 20 06 01 FF FF 00 + 			.byte $20,$06,$01,$FF,$FF,$00,$00,$E4
   623 3408 00 00 00 00 00 00 + 			.byte $00,$00,$00,$00,$00,$00,$00,$00
   624 3410 45 72 72 6F 72 3A + 			.byte $45,$72,$72,$6F,$72,$3A,$20,$4E
   625 3418 6F 20 44 4F 53 9B + 			.byte $6F,$20,$44,$4F,$53,$9B,$AD,$28
   626 3420 30 8D 0A 03 AD 29 + 			.byte $30,$8D,$0A,$03,$AD,$29,$30,$8D
   627 3428 0B 03 A9 00 A2 2F + 			.byte $0B,$03,$A9,$00,$A2,$2F,$20,$F1
   628 3430 30 AD 00 2F 8D 28 + 			.byte $30,$AD,$00,$2F,$8D,$28,$30,$AD
   629 3438 01 2F 8D 29 30 A0 + 			.byte $01,$2F,$8D,$29,$30,$A0,$04,$84
   630 3440 91 A4 91 CC 1F 30 + 			.byte $91,$A4,$91,$CC,$1F,$30,$F0,$D6
   631 3448 B9 00 2F 8D 0A 03 + 			.byte $B9,$00,$2F,$8D,$0A,$03,$B9,$01
   632 3450 2F 8D 0B 03 C8 C8 + 			.byte $2F,$8D,$0B,$03,$C8,$C8,$84,$91
   633 3458 60 6C E2 02 00 00 + 			.byte $60,$6C,$E2,$02,$00,$00,$00,$00
   634
   635 3460			RDSEC2
   636 3460 A2 00 AD 1F 30 85 + 			.byte $A2,$00,$AD,$1F,$30,$85,$91,$85
   637 3468 90 8D 08 03 D0 01 + 			.byte $90,$8D,$08,$03,$D0,$01,$E8,$8E
   638 3470 09 03 20 0A 31 85 + 			.byte $09,$03,$20,$0A,$31,$85,$96,$20
   639 3478 0A 31 25 96 C9 FF + 			.byte $0A,$31,$25,$96,$C9,$FF,$D0,$37
   640 3480 A9 78 8D E2 02 A9 + 			.byte $A9,$78,$8D,$E2,$02,$A9,$30,$8D
   641 3488 E3 02 20 0A 31 85 + 			.byte $E3,$02,$20,$0A,$31,$85,$92,$20
   642 3490 0A 31 85 93 05 92 + 			.byte $0A,$31,$85,$93,$05,$92,$F0,$1C
   643 3498 20 0A 31 38 E5 92 + 			.byte $20,$0A,$31,$38,$E5,$92,$48,$08
   644 34A0 20 0A 31 28 E5 93 + 			.byte $20,$0A,$31,$28,$E5,$93,$85,$95
   645 34A8 68 85 94 20 6B 31 + 			.byte $68,$85,$94,$20,$6B,$31,$20,$79
   646 34B0 30 4C A0 30 6C E0 + 			.byte $30,$4C,$A0,$30,$6C,$E0,$02,$A9
   647 34B8 30 A2 30 8D 44 03 + 			.byte $30,$A2,$30,$8D,$44,$03,$8E,$45
   648 34C0 03 8E 48 03 A9 09 + 			.byte $03,$8E,$48,$03,$A9,$09,$8D,$42
   649 34C8 03 A2 00 20 56 E4 + 			.byte $03,$A2,$00,$20,$56,$E4,$4C,$EE
   650 34D0 30 A0 40 8C 03 03 + 			.byte $30,$A0,$40,$8C,$03,$03,$8D,$04
   651 34D8 03 8E 05 03 AD 0A + 			.byte $03,$8E,$05,$03,$AD,$0A,$03,$0D
   652
   653 34E0			RDSEC3
   654 34E0 0B 03 F0 D3 20 59 + 			.byte $0B,$03,$F0,$D3,$20,$59,$E4,$30
   655 34E8 CE 60 A9 00 85 95 + 			.byte $CE,$60,$A9,$00,$85,$95,$85,$94
   656 34F0 A6 90 EC 1F 30 F0 + 			.byte $A6,$90,$EC,$1F,$30,$F0,$06,$BD
   657 34F8 00 2E E6 90 60 20 + 			.byte $00,$2E,$E6,$90,$60,$20,$61,$30
   658 3500 A5 95 D0 17 AD 1F + 			.byte $A5,$95,$D0,$17,$AD,$1F,$30,$F0
   659 3508 04 A5 94 30 0E A9 + 			.byte $04,$A5,$94,$30,$0E,$A9,$00,$A2
   660 3510 2E 20 F1 30 38 26 + 			.byte $2E,$20,$F1,$30,$38,$26,$90,$AD
   661 3518 00 2E 60 A5 92 A6 + 			.byte $00,$2E,$60,$A5,$92,$A6,$93,$20
   662 3520 F1 30 A5 92 18 6D + 			.byte $F1,$30,$A5,$92,$18,$6D,$08,$03
   663 3528 85 92 A5 93 6D 09 + 			.byte $85,$92,$A5,$93,$6D,$09,$03,$85
   664 3530 93 38 A5 94 ED 08 + 			.byte $93,$38,$A5,$94,$ED,$08,$03,$85
   665 3538 94 A5 95 ED 09 03 + 			.byte $94,$A5,$95,$ED,$09,$03,$85,$95
   666 3540 4C 1D 31 A5 94 D0 + 			.byte $4C,$1D,$31,$A5,$94,$D0,$02,$C6
   667 3548 95 C6 94 20 10 31 + 			.byte $95,$C6,$94,$20,$10,$31,$A0,$00
   668 3550 91 92 E6 92 D0 02 + 			.byte $91,$92,$E6,$92,$D0,$02,$E6,$93
   669 3558 A5 94 05 95 D0 E5 + 			.byte $A5,$94,$05,$95,$D0,$E5,$60,$00
   670
   671
   672
   673 3560 28			RDMAIN      .byte $28 ; Bits 7-0: OpenWrite,-,SubDir,Del,Used,Arc,Hid,Prot
   674 3561 00 00		            .word $0000 ; First sector map of parent directory (MAIN=0)
   675 3563 17 00 00		            .byte $17,$00,$00 ; length of directory in bytes (always times 23 bytes)
   676 3566 4D 41 49 4E 20 20 + RDMAINNAME  .byte 'MAIN       ' ; Name 11 chars
   677 3571 0B 07 47		            .byte $0b,$07,$47 ; Date DD/MM/YY
   678 3574 0B 0B 0B		            .byte $0b,$0b,$0b ; Time HH:MM:SS
   679 				            
   680 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   681 				;
   682 				; parameter subroutines            
   683 				;
   684
   685 				;
   686 				; check for next parameter
   687 				;   sets carry if next parameter is available
   688 				;
   689 3577 A0 0A		PARAMCHECK	ldy #SD_BUFOFF
   690 3579 B1 0A		            lda (DOSVEC),Y
   691 357B 18			            clc
   692 357C 69 3F		            adc #SD_LBUF
   693 357E A8			            tay
   694 357F B1 0A		            lda (DOSVEC),Y
   695 3581 C9 9B		            cmp #$9b
   696 3583 18			            clc
   697 3584 F0 01		            beq PARAMCHECKE
   698 3586 38						sec
   699 3587 60			PARAMCHECKE	rts
   700 				            
   701 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   702 				;
   703 				; subroutines for The Cart
   704 				;
   705
   706 				; wait for sync            
   707 3588 A5 14		WAITSYNC    lda RTCLOK+2
   708 358A C5 14		WAITLOOP    cmp RTCLOK+2
   709 358C F0 FC		            beq WAITLOOP
   710 358E 60			            rts
   711
   712 358F			cart_save
   713 358F AD A6 D5		            lda TCMOSL
   714 3592 8D FA 35		            sta _tcmosl
   715 3595 AD A7 D5		            lda TCMOFR
   716 3598 8D FB 35		            sta _tcmofr
   717 359B AD A0 D5		            lda TCPBRL
   718 359E 8D FC 35		            sta _tcpbrl
   719 35A1 AD A1 D5		            lda TCPBRH
   720 35A4 8D FD 35		            sta _tcpbrh
   721 35A7 AD A2 D5		            lda TCPBEN
   722 35AA 8D FE 35		            sta _tcpben
   723
   724 35AD 60			            rts
   725
   726 35AE			cart_restore
   727 35AE AD FA 35		            lda _tcmosl
   728 35B1 8D A6 D5		            sta TCMOSL
   729 35B4 AD FB 35		            lda _tcmofr
   730 35B7 8D A7 D5		            sta TCMOFR
   731 35BA AD FC 35		            lda _tcpbrl
   732 35BD 8D A0 D5		            sta TCPBRL
   733 35C0 AD FD 35		            lda _tcpbrh
   734 35C3 8D A1 D5		            sta TCPBRH
   735 35C6 AD FE 35		            lda _tcpben
   736 35C9 8D A2 D5		            sta TCPBEN
   737
   738 35CC A9 E0		            lda #$e0          ; enable interrupts
   739 35CE 8D 0E D4		            sta NMIEN
   740 35D1 58			            cli
   741 35D2 C6 42		            dec CRITIC 
   742
   743 35D4 60			            rts
   744
   745 35D5			cart_set
   746 35D5 E6 42		            inc CRITIC 
   747 35D7 20 88 35		            jsr WAITSYNC        ; wait for vblank
   748 35DA 78			            sei                 ; disable interrupt
   749 35DB A9 00		            lda #$00
   750 35DD 8D 0E D4		            sta NMIEN
   751
   752 35E0 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   753 35E2 8D A6 D5		            sta TCMOSL          
   754 35E5 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   755 35E7 8D A7 D5		            sta TCMOFR
   756 35EA 8A			            txa
   757 35EB 0A			            asl   
   758 35EC 8D A0 D5		            sta TCPBRL              ; get bank number from X
   759 35EF A9 00		            lda #$00                     
   760 35F1 8D A1 D5		            sta TCPBRH              ; set high to $00
   761 35F4 A9 01		            lda #$01
   762 35F6 8D A2 D5		            sta TCPBEN              ; enable        
   763
   764 35F9 60			            rts            
   765
   766 35FA 00			_tcmosl     .byte $00
   767 35FB 00			_tcmofr     .byte $00
   768 35FC 00			_tcpbrl     .byte $00
   769 35FD 00			_tcpbrh     .byte $00
   770 35FE 00			_tcpben     .byte $00
   771
   772 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   773 				;
   774 				; print subroutine            
   775 				;
   776
   777 35FF 68			PRINT       pla
   778 3600 8D 10 36		            sta PRINTITER+1
   779 3603 68			            pla
   780 3604 8D 11 36		            sta PRINTITER+2
   781 3607 EE 10 36		PRINTLOOP   inc PRINTITER+1
   782 360A D0 03		            bne PRINTITER
   783 360C EE 11 36		            inc PRINTITER+2
   784 360F AD FF FF		PRINTITER   lda $FFFF
   785 3612 C9 FF		            cmp #$FF
   786 3614 F0 06		            beq PRINTEND
   787 3616 20 25 36		            jsr CIOPUTCHR
   788 3619 4C 07 36		            jmp PRINTLOOP
   789 361C AD 11 36		PRINTEND    lda PRINTITER+2
   790 361F 48			            pha
   791 3620 AD 10 36		            lda PRINTITER+1
   792 3623 48			            pha
   793 3624 60			            rts
   794 				; call cio put char subroutine
   795 3625 A2 00		CIOPUTCHR   ldx #$00
   796 3627 8E 48 03		            stx IOCB0+ICBLL
   797 362A 8E 49 03		            stx IOCB0+ICBLH
   798 362D A0 0B		            ldy #$0B
   799 362F 8C 42 03		            sty IOCB0+ICCOM
   800 3632 4C 56 E4		            jmp CIOV
   801
   802
   803
   804 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   805 				;;; BEGIN OF REALLOC BLOCK
   806 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   807
   808 				; to realloc routines
   809 				; DOSINI set MEMLO at reset
   810 3635			REABEGIN
   811
   812 3635 20 00 00		JSRDOSINI   jsr $0000
   813 3638			SETMEMLO    
   814 3638 A9 9D		REAL003     lda #<REAEND
   815 363A 8D E7 02		            sta MEMLO
   816 363D A9 38		REAH003     lda #>REAEND
   817 363F 8D E8 02		            sta MEMLO+1
   818 3642 60			            rts
   819
   820 				; new DOSVEC for RAMDISK device
   821 3643 AD 00 03		RAMDSIO     lda DDEVIC
   822 3646 C9 31		            cmp #$31
   823 3648 D0 17		            bne JMPSIO
   824 364A AD 18 38		REAA004     lda DRVNUM  ; check drive number for RAM
   825 364D CD 01 03		            cmp DUNIT
   826 3650 F0 1E		            beq NEWSIOGO
   827
   828 3652 A2 00					ldx #$00
   829 3654 BD 19 38		REAA026		lda FDRVNUM,X  ; check drive number for Flash
   830 3657 CD 01 03		            cmp DUNIT
   831 365A F0 08		            beq NEWSIOGOF
   832 365C E8						inx
   833 365D E0 04					cpx #$04
   834 365F D0 F3					bne REAA026
   835
   836 3661 4C 00 00		JMPSIO      jmp $0000
   837
   838 				; set flash bank
   839 3664			NEWSIOGOF
   840 3664 BD 10 38		REAA027		lda FBANKL,X
   841 3667 8D 6A 37		REAA028		sta SFBANKL+1	
   842 366A BD 14 38		REAA029		lda FBANKH,X
   843 366D 8D 6F 37		REAA030		sta SFBANKH+1
   844
   845 				; set buffer address
   846 3670 AD 04 03		NEWSIOGO    lda DBUFLO
   847 3673 85 34		            sta BFENLO
   848 3675 AD 05 03		            lda DBUFHI
   849 3678 85 35		            sta BFENHI
   850 				; load commad byte            
   851 367A AD 02 03		            lda DCOMND
   852 				; command STATUS REQUEST
   853 367D C9 53		            cmp #$53 
   854 367F D0 1B		            bne NEXT1
   855 3681 AD 0B 38		REAA009     lda CONFSECSIZ
   856 3684 4A			            lsr
   857 3685 4A			            lsr
   858 3686 49 30		            eor #$30
   859 3688 AC 07 38		REAA010     ldy L36BB
   860 368B C0 1A		            cpy #$1A
   861 368D D0 02		            bne L35B4
   862 368F 09 80		            ora #$80
   863 3691 A0 00		L35B4       ldy #$00
   864 3693 91 34		            sta (BFENLO),Y
   865 3695 C8			            iny
   866 3696 A9 FF		            lda #$FF
   867 3698 91 34		            sta (BFENLO),Y
   868 369A 30 24		            bmi JMPSIOEND
   869 				            
   870 				; command RETURN CONFIGURATION            
   871 369C C9 4E		NEXT1       cmp #$4E
   872 369E D0 0C		            bne NEXT2
   873 36A0 A0 0B		            ldy #$0B            ; 12 bytes
   874 36A2			RETCNFLOOP
   875 36A2 B9 04 38		REAA011     lda CONFBUF,Y
   876 36A5 91 34		            sta (BFENLO),Y
   877 36A7 88			            dey
   878 36A8 10 F8		            bpl RETCNFLOOP
   879 36AA 30 14		            bmi JMPSIOEND
   880
   881 				; command SET CONFIGURATION
   882 36AC C9 4F		NEXT2       cmp #$4F
   883 36AE D0 13		            bne NEXT3
   884 36B0 A0 07		            ldy #$07
   885 36B2 B1 34		            lda (BFENLO),Y
   886 36B4 F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   887 36B6 8D 0B 38		REAA012     sta CONFSECSIZ
   888 36B9 A0 03		            ldy #$03
   889 36BB B1 34		            lda (BFENLO),Y
   890 36BD 8D 07 38		REAA013     sta L36BB
   891
   892 36C0			JMPSIOEND
   893 36C0 4C FA 37		REAA014     jmp RDSIOEND
   894
   895 				; command FORMAT DISK
   896 36C3 C9 21		NEXT3       cmp #$21
   897 36C5 D0 0B		            bne NEXT4
   898 36C7 A0 00		SIOFRMT     ldy #$00
   899 36C9 A9 FF		            lda #$FF
   900 36CB 91 34		            sta (BFENLO),Y
   901 36CD C8			            iny
   902 36CE 91 34		            sta (BFENLO),Y
   903 36D0 D0 EE		            bne JMPSIOEND
   904
   905 				; command FORMAT DISK ENHANCED
   906 36D2 C9 22		NEXT4       cmp #$22
   907 36D4 D0 0C		            bne NEXT5
   908 36D6 A9 1A		            lda #$1A
   909 36D8 8D 07 38		REAA015     sta L36BB
   910 36DB A9 80		            lda #$80
   911 36DD 8D 0B 38		REAA016     sta CONFSECSIZ
   912 36E0 D0 E5		            bne SIOFRMT
   913 				            
   914 				; command PUT/GET SECTOR 
   915 36E2 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   916 36E4 F0 0B		            beq PUTGETSEC
   917 36E6 C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   918 36E8 F0 07		            beq PUTGETSEC
   919 36EA C9 50		            cmp #$50            ; command PUT SECTOR
   920 36EC F0 03		            beq PUTGETSEC
   921 36EE 4C FD 37		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   922 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   923 				; buffer address and calc byte count
   924 36F1 A9 00		PUTGETSEC   lda #$00
   925 36F3 85 32		            sta BUFRLO
   926 36F5 AD 0A 03		            lda DAUX1
   927 36F8 38			            sec
   928 36F9 E9 01		            sbc #$01
   929 36FB 85 33		            sta BUFRHI
   930 36FD AD 0B 03		            lda DAUX2
   931 3700 E9 00		            sbc #$00
   932 3702 06 33		            asl BUFRHI
   933 3704 2A			            rol
   934 3705 AA			            tax                 ; set X with memory bank number
   935 3706 A5 33		            lda BUFRHI
   936 3708 4A			            lsr
   937 3709 4A			            lsr
   938 370A 66 32		            ror BUFRLO
   939 370C 09 80		            ora #$80
   940 370E 85 33		            sta BUFRHI
   941 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   942 				; set buffer address in copy loops
   943 3710 A5 32		            lda BUFRLO
   944 3712 8D A5 37		REAA021     sta GETADRLP+1
   945 3715 8D D9 37		REAA022     sta PUTADRLP+1
   946 3718 A5 33		            lda BUFRHI
   947 371A 8D A6 37		REAA023     sta GETADRLP+2
   948 371D 8D DA 37		REAA024     sta PUTADRLP+2            
   949 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   950 				; check for GET
   951 3720 AD 02 03		            lda DCOMND
   952 3723 C9 52		            cmp #$52
   953 3725 F0 0A		            beq L3656           ; is GET
   954 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   955 				; PUT: put user data to buffer            
   956 3727 A0 7F		            ldy #$7F
   957 3729 B1 34		L364B       lda (BFENLO),Y
   958 372B 99 1D 38		REAA005     sta BUFFERXX1,Y
   959 372E 88			            dey
   960 372F 10 F8		            bpl L364B
   961 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   962 				; check if bank number is in range            
   963 3731 E0 20		L3656       cpx #$20            ; check bank number
   964 3733 B0 B9		            bcs REAA020         ; intermediate jmp to NAK
   965 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   966 3735			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM]
     1 3735 AD A2 D5		            lda TCPBEN
     2 3738 48			            pha
     3 3739 AD A6 D5		            lda TCMOSL
     4 373C 48			            pha
     5 373D AD A7 D5		            lda TCMOFR
     6 3740 48			            pha
     7 3741 AD A0 D5		            lda TCPBRL
     8 3744 48			            pha
     9 3745 AD A1 D5		            lda TCPBRH
    10 3748 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM
   967 3749 E6 42		            inc CRITIC
   968 374B A5 14		            lda RTCLOK+2
   969 374D C5 14		WAITLOOP2   cmp RTCLOK+2
   970 374F F0 FC		            beq WAITLOOP2
   971 3751 78			            sei                 ; disable interrupts
   972 3752 A9 00		            lda #$00
   973 3754 8D 0E D4		            sta NMIEN           ; 40 cycles
   974 				; set bank, number in X
   975 3757 A9 21		            lda #TCMOSL.16K     ; set 2x8k mode at $8000-$BFFF
   976 3759 8D A6 D5		            sta TCMOSL          
   977
   978 375C AD 18 38		REAA025     lda DRVNUM  		; check drive number for ram
   979 375F CD 01 03		            cmp DUNIT
   980 3762 F0 23		            beq setTCram
   981
   982 				; 512k user space start bank $3fc0
   983 				; 640k user space start bank $3fb0
   984 3764 A9 00		setTCflash  lda #TCMOFR.FLASH       ; set to FLASH
   985 3766 8D A7 D5		            sta TCMOFR
   986 3769 A9 B0		SFBANKL		lda #$b0
   987 376B 8D A0 D5		            sta TCPBRL
   988 376E A9 3F		SFBANKH		lda #$3f
   989 3770 8D A1 D5		            sta TCPBRH
   990 3773 8A			            txa
   991 3774 0A			            asl
   992 3775 18			            clc   
   993 3776 6D A0 D5		            adc TCPBRL              ; get bank number from X
   994 3779 8D A0 D5		            sta TCPBRL
   995 377C AD A1 D5		            lda TCPBRH
   996 377F 69 00		            adc #$00                     
   997 3781 8D A1 D5		            sta TCPBRH              ; set high to $00
   998 3784 18			            clc
   999 3785 90 0F		            bcc setTcend
  1000
  1001 3787 A9 03		setTCram    lda #TCMOFR.PBRAM       ; set to RAM
  1002 3789 8D A7 D5		            sta TCMOFR
  1003 378C 8A			            txa
  1004 378D 0A			            asl   
  1005 378E 8D A0 D5		            sta TCPBRL              ; get bank number from X
  1006 3791 A9 00		            lda #$00                     
  1007 3793 8D A1 D5		            sta TCPBRH              ; set high to $00
  1008
  1009 3796 A9 01		setTCend    lda #$01
  1010 3798 8D A2 D5		            sta TCPBEN              ; enable        
  1011 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1012 				; check for PUT
  1013 379B A0 7F		            ldy #$7F            ; 9 cycles
  1014 379D AD 02 03		            lda DCOMND
  1015 37A0 C9 52		            cmp #$52
  1016 37A2 D0 31		            bne L369B           ; is PUT
  1017 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1018 				; GET: read data to buffer
  1019 37A4			L367B
  1020 37A4 B9 FF FF		GETADRLP    lda $FFFF,Y         ; 5 cycles +
  1021 37A7 99 1D 38		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
  1022 37AA 88			            dey                 ; 2 cycles +
  1023 37AB 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2048
  1024 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1025 				; restore bank for write to user buffer
  1026 37AD			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM]
     1 37AD 68			            pla                 
     2 37AE 8D A1 D5		            sta TCPBRH          
     3 37B1 68			            pla                 
     4 37B2 8D A0 D5		            sta TCPBRL          
     5 37B5 68			            pla                 
     6 37B6 8D A7 D5		            sta TCMOFR          
     7 37B9 68			            pla                 
     8 37BA 8D A6 D5		            sta TCMOSL
     9 37BD 68			            pla                 
    10 37BE 8D A2 D5		            sta TCPBEN          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM
  1027 37C1 A9 E0		            lda #$e0            ; enable interrupts
  1028 37C3 8D 0E D4		            sta NMIEN
  1029 37C6 58			            cli
  1030 37C7 C6 42		            dec CRITIC          ; 54 cycles
  1031 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
  1032 				; GET: write buffer to user data            
  1033 37C9 A0 7F		            ldy #$7F
  1034 37CB			L368E
  1035 37CB B9 1D 38		REAA008     lda BUFFERXX1,Y
  1036 37CE 91 34		            sta (BFENLO),Y
  1037 37D0 88			            dey
  1038 37D1 10 F8		            bpl L368E
  1039 37D3 30 25		            bmi RDSIOEND
  1040 				            
  1041 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1042 				; PUT: buffer data to sector
  1043 37D5			L369B
  1044 37D5 B9 1D 38		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
  1045 37D8 99 FF FF		PUTADRLP    sta $FFFF,Y       ; 5 cycles
  1046 37DB 88			            dey               ; 2 cycles +              
  1047 37DC 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2048 
  1048 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1049 				; restore register
  1050 37DE			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM]
     1 37DE 68			            pla                 
     2 37DF 8D A1 D5		            sta TCPBRH          
     3 37E2 68			            pla                 
     4 37E3 8D A0 D5		            sta TCPBRL          
     5 37E6 68			            pla                 
     6 37E7 8D A7 D5		            sta TCMOFR          
     7 37EA 68			            pla                 
     8 37EB 8D A6 D5		            sta TCMOSL
     9 37EE 68			            pla                 
    10 37EF 8D A2 D5		            sta TCPBEN          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/BW-DOS/TCDRIVER.ASM
  1051 37F2 A9 E0		            lda #$e0            ; enable interrupts
  1052 37F4 8D 0E D4		            sta NMIEN
  1053 37F7 58			            cli
  1054 37F8 C6 42		            dec CRITIC          ; 54 cycles
  1055 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1056 				; set rc            
  1057 37FA A0 01		RDSIOEND    ldy #$01
  1058 37FC 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
  1059
  1060 37FF 8C 03 03					sty DSTATS
  1061 3802 98			            tya                 ; set RC
  1062 3803 60			            rts
  1063 				            
  1064 				; drive configuration buffer
  1065 3804 28 01 12		CONFBUF     .byte $28,$01,$12
  1066 3807 00			L36BB       .byte $00
  1067 3808 00 00 00		            .byte $00,$00,$00
  1068 380B 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
  1069 380C FF 00 00 00		            .byte $FF,$00,$00,$00
  1070
  1071 3810 B0			FBANKL		.byte $b0	; F1: 16.304 bank
  1072 3811 70						.byte $70	; F2: 16.240 bank
  1073 3812 30						.byte $30	; F3: 16.176 bank
  1074 3813 F0						.byte $f0
  1075
  1076 3814 3F			FBANKH		.byte $3f	; F1: 16.304 bank
  1077 3815 3F						.byte $3f	; F2: 16.240 bank
  1078 3816 3F						.byte $3f	; F3: 16.176 bank
  1079 3817 3E						.byte $3e	; F4: 16.112 bank
  1080
  1081 3818 00			DRVNUM      .byte $00	; RAM
  1082
  1083 3819 00			FDRVNUM     .byte $00	; F1:
  1084 381A 00						.byte $00	; F2:
  1085 381B 00						.byte $00	; F3:
  1086 381C 00						.byte $00	; F4:
  1087
  1088
  1089 				; $80 for 128Bytes ($100 for 256Bytes)
  1090 381D			BUFFERXX1
  1091 				;            org $37E6
  1092 = 389D			REAEND      = BUFFERXX1 + $80
  1093 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1094 				;;; END OF REALLOC BLOCK
  1095 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1096
  1097
  1098 				; $20 Bytes
  1099 = 389D			BNKSAVBUF   = REAEND
  1100
  1101 				; $20 bytes
  1102 				;            org $3806
  1103 				;BNKSAVBUF2  = BNKSAVBUF + $20
  1104
  1105 				 
  1106 				;           org $3826
  1107 381D			            org BNKSAVBUF + $20
  1108 				; realloc whole addresses
  1109 38BD-39D9> CA 32		REATAB      .word REAA001+1 ;$33CA
  1110 38BF D4 32		            .word REAA002+1 ;$33D4
  1111 38C1 DB 32		            .word REAA003+1 ;$33DB
  1112 38C3 4B 36		            .word REAA004+1 ;$3583
  1113 38C5 2C 37		            .word REAA005+1 ;$364E
  1114 38C7 A8 37		            .word REAA006+1 ;$367E
  1115 38C9 D6 37		            .word REAA007+1 ;$369C
  1116 38CB CC 37		            .word REAA008+1 ;$368F
  1117 38CD 82 36		            .word REAA009+1 ;$35A5
  1118 38CF 89 36		            .word REAA010+1 ;$35AC
  1119 38D1 A3 36		            .word REAA011+1 ;$35C6
  1120 38D3 B7 36		            .word REAA012+1 ;$35D8
  1121 38D5 BE 36		            .word REAA013+1 ;$35DF
  1122 38D7 C1 36		            .word REAA014+1 ;$35E2
  1123 38D9 D9 36		            .word REAA015+1 ;$35FA
  1124 38DB DE 36		            .word REAA016+1 ;$35FF
  1125 38DD EF 36		            .word REAA020+1 ;$3610
  1126 38DF 13 37		            .word REAA021+1
  1127 38E1 16 37		            .word REAA022+1
  1128 38E3 1B 37		            .word REAA023+1
  1129 38E5 1E 37		            .word REAA024+1
  1130 38E7 5D 37		            .word REAA025+1
  1131 38E9 55 36		            .word REAA026+1
  1132 38EB 65 36		            .word REAA027+1
  1133 38ED 68 36		            .word REAA028+1
  1134 38EF 6B 36		            .word REAA029+1
  1135 38F1 6E 36		            .word REAA030+1
  1136 38F3 00 00		            .word $0000
  1137 				 
  1138 				; realloc address low byte           
  1139 38F5 B1 32		            .word REAL001+1 ;$33B1
  1140 38F7 CD 32		            .word REAL002+1 ;$33CD
  1141 38F9 39 36		            .word REAL003+1 ;$356E
  1142 38FB 00 00		            .word $0000
  1143 				; realloc address high byte (address to high byte and value of low byte)
  1144 38FD B5 32		            .word REAH001+1  ;$33B5
  1145 38FF 35			            .byte <JSRDOSINI ;$6A
  1146 				                        
  1147 3900 D7 32		            .word REAH002+1 ;$33D7
  1148 3902 43			            .byte <RAMDSIO  ;$78
  1149 				            
  1150 3903 3E 36		            .word REAH003+1  ;$3573
  1151 3905 9D			            .byte <REAEND    ;$E6
  1152 				            
  1153
  1154 3906 00 00		            .word $0000
  1155 				            
  1156 3908 A9 00		REASTART    lda #$00
  1157 390A 8D DA 39		            sta REALOOPCNT
  1158 390D AE DA 39		REALOOP     ldx REALOOPCNT
  1159 3910 BD CC 39		            lda REATABADR,X
  1160 3913 8D B2 39		            sta L3910+1
  1161 3916 BD CD 39		            lda REATABADR+1,X
  1162 3919 8D B3 39		            sta L3910+2
  1163 391C 0D B2 39		            ora L3910+1
  1164 391F D0 01		            bne L3881
  1165 3921 60			            rts
  1166 				            
  1167 3922 38			L3881       sec
  1168 3923 BD D0 39		            lda READSTADR,X
  1169 3926 FD CE 39		            sbc REASRCADR,X
  1170 3929 8D DB 39		            sta READIFLO
  1171 392C BD D1 39		            lda READSTADR+1,X
  1172 392F FD CF 39		            sbc REASRCADR+1,X
  1173 3932 8D DC 39		            sta READIFHI
  1174 				            
  1175 3935 20 BD 39		L3894       jsr L391C
  1176 3938 F0 13		            beq L38AC
  1177 393A B1 D7		            lda ($D7),Y
  1178 393C 18			            clc
  1179 393D 6D DB 39		            adc READIFLO
  1180 3940 91 D7		            sta ($D7),Y
  1181 3942 C8			            iny
  1182 3943 B1 D7		            lda ($D7),Y
  1183 3945 6D DC 39		            adc READIFHI
  1184 3948 91 D7		            sta ($D7),Y
  1185 394A 4C 35 39		            jmp L3894
  1186 394D 20 BD 39		L38AC       jsr L391C
  1187 3950 F0 0B		            beq L38BC
  1188 3952 B1 D7		            lda ($D7),Y
  1189 3954 18			            clc
  1190 3955 6D DB 39		            adc READIFLO
  1191 3958 91 D7		            sta ($D7),Y
  1192 395A 4C 4D 39		            jmp L38AC
  1193 395D 20 BD 39		L38BC       jsr L391C
  1194 3960 F0 11		            beq L38D2
  1195 3962 20 B1 39		            jsr L3910
  1196 3965 18			            clc
  1197 3966 6D DB 39		            adc READIFLO
  1198 3969 B1 D7		            lda ($D7),Y
  1199 396B 6D DC 39		            adc READIFHI
  1200 396E 91 D7		            sta ($D7),Y
  1201 3970 4C 5D 39		            jmp L38BC
  1202 3973 AE DA 39		L38D2       ldx REALOOPCNT
  1203
  1204 3976 BD D2 39		            lda CPYFROMADR,X
  1205 3979 8D 94 39		            sta L38F2+1
  1206 397C BD D3 39		            lda CPYFROMADR+1,X
  1207 397F 8D 95 39		            sta L38F2+2
  1208
  1209 3982 BD D6 39		            lda CPYTOADR,X
  1210 3985 8D 97 39		            sta L38F2+4
  1211 3988 BD D7 39		            lda CPYTOADR+1,X
  1212 398B 8D 98 39		            sta L38F2+5
  1213
  1214 398E BC D5 39		            ldy CPYLENGTH+1,X
  1215 3991 A2 00		            ldx #$00
  1216 3993 BD FF FF		L38F2       lda $FFFF,X
  1217 3996 9D FF FF		            sta $FFFF,X
  1218 3999 E8			            inx
  1219 399A D0 F7		            bne L38F2
  1220 399C EE 95 39		            inc L38F2+2
  1221 399F EE 98 39		            inc L38F2+5
  1222 39A2 88			            dey
  1223 39A3 10 EE		            bpl L38F2
  1224 39A5 AD DA 39		            lda REALOOPCNT
  1225 39A8 18			            clc
  1226 39A9 69 0C		            adc #$0C
  1227 39AB 8D DA 39		            sta REALOOPCNT
  1228 39AE 4C 0D 39		            jmp REALOOP
  1229 				            
  1230 39B1 AD FF FF		L3910       lda $FFFF
  1231 39B4 EE B2 39		            inc L3910+1
  1232 39B7 D0 03		            bne L391B
  1233 39B9 EE B3 39		            inc L3910+2
  1234 39BC 60			L391B       rts
  1235
  1236 39BD 20 B1 39		L391C       jsr L3910
  1237 39C0 85 D7		            sta $D7
  1238 39C2 20 B1 39		            jsr L3910
  1239 39C5 A0 00		            ldy #$00
  1240 39C7 85 D8		            sta $D8
  1241 39C9 05 D7		            ora $D7
  1242 39CB 60			            rts
  1243
  1244 				; realloc code pointer
  1245 39CC BD 38		REATABADR   .word REATAB
  1246 39CE 35 36		REASRCADR   .word REABEGIN
  1247 39D0 FF FF		READSTADR   .word $FFFF
  1248 				; copy code pointer
  1249 39D2 35 36		CPYFROMADR  .word REABEGIN
  1250 39D4 68 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1251 39D6 FF FF		CPYTOADR    .word $FFFF
  1252 39D8 00 00		            .word $0000
  1253 				            
  1254 				; $01 byte
  1255 39DA			REALOOPCNT  ;= $392B
  1256 = 39DB			READIFLO   = REALOOPCNT+1
  1257 = 39DC			READIFHI   = READIFLO+1
  1258
  1259
  1260 				         
