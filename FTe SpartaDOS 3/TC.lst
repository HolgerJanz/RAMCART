mads 1.9.9
     1 				; The!Cart Bank Switch
     2
     3
     4 				;
     5 				; OS equ
     6 				;
     7
     8 = 000A			DOSVEC  = $000a
     9 = 0042			CRITIC  = $0042
    10
    11 = 022F			SDMCTL  = $022f
    12 = 03FA			GINTLK  = $3fa
    13 = 03EB			CARTCK  = $3eb
    14
    15 = D013			TRIG3   = $d013
    16 = D400			DMACTL  = $d400 
    17 = D40E			NMIEN   = $d40e
    18
    19 = E474			WARMST  = $e474
    20
    21 				; 
    22 				; IO EQUATES
    23 				; 
    24 = 0340			IOCB0        =  $0340     ; address of first IOCB
    25 = 0342			IOCB0.CMD    = IOCB0+2    ; where command goes in IOCB
    26 = 0343			IOCB0.STAT   = IOCB0+3    ; state returned
    27 = 0344			IOCB0.BUF    = IOCB0+4    ; buffer (or name) address
    28 = 0348			IOCB0.BUFLEN = IOCB0+8    ; max buffer length address
    29 = 034A			IOCB0.AUX1   = IOCB0+10   ; Auxilliary byte 1
    30 = 034B			IOCB0.AUX2   = IOCB0+11   ; Auxilliary byte 2
    31
    32 = 0350			IOCB1        =  $0350     ; address of first IOCB
    33 = 0352			IOCB1.CMD    = IOCB1+2    ; where command goes in IOCB
    34 = 0353			IOCB1.STAT   = IOCB1+3    ; state returned
    35 = 0354			IOCB1.BUF    = IOCB1+4    ; buffer (or name) address
    36 = 0358			IOCB1.BUFLEN = IOCB1+8    ; max buffer length address
    37 = 035A			IOCB1.AUX1   = IOCB1+10   ; Auxilliary byte 1
    38 = 035B			IOCB1.AUX2   = IOCB1+11   ; Auxilliary byte 2
    39
    40
    41 = 00FE			XIO.FMT = 254   ; Format command
    42 = 0005			XIO.INPUT = 5   ; Input Line
    43 = 0009			XIO.PRINT = 9   ; Print line
    44 = 0003			XIO.OPEN  = 3   ; Open
    45 = 000C			XIO.CLOSE = 12  ; Close
    46 = 0004			XIO.READ  = 4   ; Read
    47 = 0008			XIO.WRITE = 8   ; Write
    48 = 0007			XIO.GET   = 7   ; Get
    49 = 000B			XIO.PUT   = 11  ; Put
    50
    51 = 0088			XIO.STAT.EOF = $88
    52
    53 = E456			CIOV = $E456   ; the classic location
    54
    55 				;
    56 				; SpartaDOS 
    57 				;
    58 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    59 = 003F			SD_LBUF        = $3F ; offset to line buffer
    60 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    61 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    62 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    63
    64 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    65 				; 
    66 				; The!Cart programming information
    67 				; (c) 2013 Matthias Reichl
    68 				;
    69 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    70 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    71 				; 25AA020A). The memory is addressed using 16384 8k banks
    72 				; (64 8k banks when using RAM instead of flash).
    73 				; 
    74 				; The cartridge configuration registers are located at
    75 				; $D5A0-$D5A8. All registers are read/write unless noted
    76 				; otherwise. Unused bits shall be written as '0' and
    77 				; always read back as '0'.
    78 				; 
    79 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    80 				; flash bank 0, writes to flash are disabled.
    81 				; 
    82 				; Depending on the selected cartridge mode additional
    83 				; registers are enabled at $D5xx.
    84 				; 
    85 				; The primary bank register also serves as a base bank
    86 				; register for the various sub-modes.
    87 				; 
    88 				; The secondary bank register is only used in "flexi mode".
    89 				;
    90
    91 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    92 				; 
    93 				; The!Cart Register (from-to,default)
    94 				;
    95
    96 				; Mode Select
    97 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
    98 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
    99 				; other than the ones listed here are reserved (and result
   100 				; in "cartridge off"):
   101 				; $00: off, cartridge disabled
   102 				; $01: 8k banks at $A000
   103 				; $02: AtariMax 1MBit / 128k
   104 				; $03: Atarimax 8MBit / 1MB
   105 				; $04: OSS M091
   106 				; $08: SDX 64k cart, $D5Ex banking
   107 				; $09: Diamond GOS 64k cart, $D5Dx banking
   108 				; $0A: Express 64k cart, $D57x banking
   109 				; $0C: Atrax 128k cart
   110 				; $0D: Williams 64k cart
   111 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   112 				; $21: standard 16k cart at $8000-$BFFF
   113 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   114 				; $23: Blizzard 16k
   115 				; $24: Sic!Cart 512k
   116 				; $28: 16k Mega cart
   117 				; $29: 32k Mega cart
   118 				; $2A: 64k Mega cart
   119 				; $2B: 128k Mega cart
   120 				; $2C: 256k Mega cart
   121 				; $2D: 512k Mega cart
   122 				; $2E: 1024k Mega cart
   123 				; $2F: 2048k Mega cart
   124 				; $30: 32k XEGS cart
   125 				; $31: 64k XEGS cart
   126 				; $32: 128k XEGS cart
   127 				; $33: 256k XEGS cart
   128 				; $34: 512k XEGS cart
   129 				; $35: 1024k XEGS cart
   130 				; $38: 32k SWXEGS cart
   131 				; $39: 64k SWXEGS cart
   132 				; $3A: 128k SWXEGS cart
   133 				; $3B: 256k SWXEGS cart
   134 				; $3C: 512k SWXEGS cart
   135 				; $3D: 1024k SWXEGS cart
   136 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   137 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   138 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   139 				                         ; separate 8k banks at $A000 and $8000
   140 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   141
   142 				; how to figure out that The!Cart is not active?
   143 				; If the address is not used then the XL returns $ff but
   144 				; the XE (and old 800) return $d5 (high byte of address,
   145 				; the value of the last bus cycle)
   146 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   147 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   148
   149 				; Mode Flash/RAM Select
   150 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   151 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   152 				; bit 1: primary bank source (0=flash, 1=RAM)
   153 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   154 				; bit 3: secondary bank source (0=flash, 1=RAM)
   155 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   156 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   157
   158 				; Primary Bank
   159 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   160 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   161 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   162
   163 				; Secondary Bank 
   164 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   165 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   166 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   167
   168 				; SPI interface to EEPROM
   169 = D5A8			TCINEP = $d5a8
   170 				; bit 0: SPI CLK
   171 				; bit 1: SPI CS
   172 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   173
   174 				; configuration lock
   175 = D5AF			TCCOLO = $d5af
   176 				; Writing to this register disables "The!Cart" registers
   177 				; at $d5aX.
   178
   179
   180 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   181 				;
   182 				; Main
   183 				;
   184
   185 				        org $3000
   186 				        
   187 				; message
   188 FFFF> 3000-32B5> A2 E0	        ldx #<startmsg.begin
   189 3002 A0 30		        ldy #>startmsg.begin
   190 3004 A9 1F		        lda #startmsg.end-startmsg.begin
   191 3006 20 54 32		        jsr print
   192
   193 				; check for parameter
   194 3009 A0 0A		        ldy #SD_BUFOFF
   195 300B B1 0A		        lda (DOSVEC),y
   196 300D 18			        clc
   197 300E 69 3F		        adc #SD_LBUF
   198 3010 A8			        tay
   199 3011 B1 0A		        lda (DOSVEC),y
   200 3013 C9 9B		        cmp #$9B
   201 3015 F0 27		        beq prserr
   202
   203 3017 C8			        iny
   204 3018 8C 68 31		        sty paridy      ;set index to parameter
   205
   206 				; read sys file        
   207 301B 20 6D 32		        jsr open
   208 301E 30 1E		        bmi prserr
   209 				                
   210 3020 20 8C 32		rdnext  jsr input       ; read line
   211 3023 30 29		        bmi filerr
   212 				                
   213 3025 A9 20		        lda #' '
   214 3027 CD 83 31		        cmp pbuffer+8   ; check for spaces at 9 and 12
   215 302A D0 22		        bne filerr
   216 302C A9 20		        lda #' '
   217 302E CD 86 31		        cmp pbuffer+11
   218 3031 D0 1B		        bne filerr
   219 				        
   220 3033 20 FD 31		        jsr check
   221 3036 B0 46		        bcs found
   222 				        
   223 3038 EE 67 31		        inc lcnt
   224 303B 4C 20 30		        jmp rdnext
   225
   226 				; exit with parse error                  
   227 303E 20 AB 32		prserr  jsr close
   228 3041 A2 FF		        ldx #<errprs.begin
   229 3043 A0 30		        ldy #>errprs.begin
   230 3045 A9 17		        lda #errprs.end-errprs.begin
   231 3047 20 54 32		        jsr print
   232 304A 20 8D 31		        jsr list
   233 304D 60			        rts
   234
   235 				; exit with file error                  
   236 304E A9 88		filerr  lda #XIO.STAT.EOF     ; ignore end of file
   237 3050 CD 53 03		        cmp IOCB1.STAT
   238 3053 F0 19		        beq filend
   239 3055 AD 67 31		        lda lcnt
   240 3058 20 3D 32		        jsr convha
   241 305B 8E 3C 31		        stx errfil.line
   242 305E 8C 3D 31		        sty errfil.line+1
   243 3061 A2 16		        ldx #<errfil.begin
   244 3063 A0 31		        ldy #>errfil.begin
   245 3065 A9 29		        lda #errfil.end-errfil.begin
   246 3067 20 54 32		        jsr print
   247 306A 20 AB 32		        jsr close
   248 306D 60			        rts
   249 				        
   250 306E A2 3F		filend  ldx #<errnfd.begin
   251 3070 A0 31		        ldy #>errnfd.begin
   252 3072 A9 14		        lda #errnfd.end-errnfd.begin
   253 3074 20 54 32		        jsr print
   254 3077 20 AB 32		        jsr close
   255 307A 20 8D 31		        jsr list
   256 307D 60			        rts
   257
   258 				; read mode and bank
   259 307E 20 AB 32		found   jsr close
   260
   261 3081 20 D8 31		        jsr rpara
   262 				        
   263 				; switch The!Cart
   264 3084 A9 00		        lda #$00        ; switch off DMA
   265 3086 8D 2F 02		        sta SDMCTL
   266 3089 8D 00 D4		        sta DMACTL
   267
   268 308C 78			        sei             ; mask all interrupts
   269 308D A9 00		        lda #$00
   270 308F 8D 0E D4		        sta NMIEN
   271
   272 3092 AD 6A 31		        lda bankl
   273 3095 8D A0 D5		        sta TCPBRL
   274 3098 AD 6B 31		        lda bankh       ; set P bank 
   275 309B 8D A1 D5		        sta TCPBRH
   276 				        
   277 309E A9 00		        lda #$00
   278 30A0 8D A3 D5		        sta TCSBRL      ; set S bank 
   279 30A3 8D A4 D5		        sta TCSBRH
   280 30A6 8D A5 D5		        sta TCSBEN      ; disable S
   281
   282 30A9 8D A7 D5		        sta TCMOFR      ; cfg flash r/o
   283 30AC AD 69 31		        lda mode        ; set mode
   284 30AF 8D A6 D5		        sta TCMOSL
   285
   286 30B2 C9 00		        cmp #TCMOSL.OFF
   287 30B4 F0 18		        beq _nocar
   288
   289 30B6 A9 01		        lda #$01        ; set cartridge flag
   290 30B8 8D 13 D0		        sta TRIG3
   291 30BB 8D FA 03		        sta GINTLK
   292 				        
   293 30BE A9 00		        lda #$00        ; set cart check sum
   294 30C0 AA			        tax
   295 30C1 18			        clc
   296 30C2 7D F0 BF		_ccloop adc $bff0,x
   297 30C5 E8			        inx
   298 30C6 D0 FA		        bne _ccloop
   299 30C8 8D EB 03		        sta CARTCK
   300 30CB 4C DB 30		        jmp _end
   301
   302 30CE A9 00		_nocar  lda #$00        ; set cartridge flag
   303 30D0 8D 13 D0		        sta TRIG3
   304 30D3 8D FA 03		        sta GINTLK
   305 30D6 A9 00		        lda #$00        ; set cart check sum
   306 30D8 8D EB 03		        sta CARTCK
   307
   308 30DB 68			_end    pla             ; clear return adr from stack 
   309 30DC 68			        pla
   310 				        
   311 30DD 4C 74 E4		        jmp WARMST      ; warm start
   312
   313 				; THE END
   314
   315
   316 				; messages        
   317
   318 30E0			startmsg.begin
   319 30E0 4D 65 6E 75 20 76 +         .byte 'Menu ver46 for The!Cart by hjx',$9B
   320 30FF			startmsg.end
   321
   322 30FF			errprs.begin
   323 30FF 20 20 45 72 72 6F +         .byte '  Error - no parameter',$9b
   324 3116			errprs.end
   325
   326 3116			errfil.begin
   327 3116 20 20 45 72 72 6F +         .byte '  Error - THECART.SYS',$9b
   328 312C 20 20 50 61 72 73 +         .byte '  Parsing line $'
   329 313C			errfil.line
   330 313C 58 58 9B		        .byte 'XX',$9B
   331 313F			errfil.end
   332
   333 313F			errnfd.begin
   334 313F 20 20 45 72 72 6F +         .byte '  Error - not found',$9b
   335 3153			errnfd.end
   336
   337 3153			erruse.begin
   338 3153 20 20 55 73 65 20 +         .byte '  Use THECART name:',$9B
   339 3167			erruse.end
   340
   341 				; variables
   342
   343 3167 01			lcnt    .byte $01        
   344 3168 00			paridy  .byte $00
   345 3169 00			mode    .byte $00
   346 316A 00			bankl   .byte $00
   347 316B 00			bankh   .byte $00
   348 				        
   349 316C 44 31 3A 3E 54 43 + fname   .byte 'D1:>TC.CFG',$9b
   350 3177 20 20 20 20		lbuffer .byte '    '
   351 317B 5F 5F 5F 5F 5F 5F + pbuffer .byte '________________',$9b,$FF
   352
   353
   354 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   355 				; 
   356 				; List 
   357 				;
   358 318D A2 53		list    ldx #<erruse.begin
   359 318F A0 31		        ldy #>erruse.begin
   360 3191 A9 14		        lda #erruse.end-erruse.begin
   361 3193 20 54 32		        jsr print
   362 				        
   363 3196 20 6D 32		        jsr open
   364 3199 20 8C 32		_list   jsr input       ; read line
   365 319C 30 36		        bmi _endlst
   366
   367 319E A9 20		        lda #' '        ; reset current mark
   368 31A0 8D 7A 31		        sta lbuffer+3
   369 				        
   370 31A3 20 D8 31		        jsr rpara
   371 				        
   372 31A6 AD A6 D5		        lda TCMOSL      ; cmp current with para
   373 31A9 CD 69 31		        cmp mode
   374 31AC D0 15		        bne _print
   375
   376 31AE AD A1 D5		        lda TCPBRH
   377 31B1 CD 6B 31		        cmp bankh
   378 31B4 D0 0D		        bne _print
   379
   380 31B6 AD A0 D5		        lda TCPBRL
   381 31B9 CD 6A 31		        cmp bankl
   382 31BC D0 05		        bne _print
   383
   384 31BE A9 3E		        lda #'>'        ; set current mark
   385 31C0 8D 7A 31		        sta lbuffer+3
   386
   387 31C3 A9 9B		_print  lda #$9b        ; set return after name
   388 31C5 8D 83 31		        sta pbuffer+8
   389
   390 31C8 A2 77		        ldx #<lbuffer
   391 31CA A0 31		        ldy #>lbuffer
   392 31CC A9 0D		        lda #$0d
   393 31CE 20 54 32		        jsr print
   394 				        
   395 31D1 4C 99 31		        jmp _list 
   396
   397 31D4 20 AB 32		_endlst jsr close
   398 31D7 60			        rts
   399
   400 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   401 				;
   402 				; Read parameter (mode, bank low and bank high)
   403 				;
   404 31D8 AE 84 31		rpara   ldx pbuffer+9   ; read mode
   405 31DB AC 85 31		        ldy pbuffer+10
   406 31DE 20 1D 32		        jsr convah
   407 31E1 8D 69 31		        sta mode
   408
   409 31E4 AE 87 31		        ldx pbuffer+12  ; read bank low
   410 31E7 AC 88 31		        ldy pbuffer+13
   411 31EA 20 1D 32		        jsr convah
   412 31ED 8D 6B 31		        sta bankh
   413
   414 31F0 AE 89 31		        ldx pbuffer+14  ; read bank high
   415 31F3 AC 8A 31		        ldy pbuffer+15
   416 31F6 20 1D 32		        jsr convah
   417 31F9 8D 6A 31		        sta bankl
   418 				        
   419 31FC 60			        rts
   420
   421 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   422 				; 
   423 				; Check Command Line with File Buffer
   424 				;
   425 				; IN    pbuffer   address to file buffer
   426 				;       paridy    index to parameter in DOSVEC
   427
   428 31FD			check ; check command line and file buffer  
   429 31FD A2 00		        ldx #$00
   430 31FF AC 68 31		        ldy paridy 
   431 3202 B1 0A		checkn  lda (DOSVEC),y
   432 3204 DD 7B 31		        cmp pbuffer,x
   433 3207 D0 05		        bne checkc
   434 3209 E8			        inx
   435 320A C8			        iny
   436 320B 4C 02 32		        jmp checkn
   437 				        
   438 320E C9 9B		checkc  cmp #$9b
   439 3210 D0 09		        bne notfnd
   440 3212 A9 20		        lda #' '
   441 3214 DD 7B 31		        cmp pbuffer,x
   442 3217 D0 02		        bne notfnd
   443 				        
   444 3219 38			        sec
   445 321A 60			        rts
   446
   447 321B 18			notfnd  clc
   448 321C 60			        rts
   449
   450 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   451 				; 
   452 				; Convert ATASCI to hex
   453 				;
   454 				; IN    X,Y   high, low ASCII digit 
   455 				;        A    hex value
   456
   457 321D 8A			convah  txa
   458 321E 38			        sec
   459 321F E9 30		        sbc #'0'
   460 3221 C9 0A		        cmp #10
   461 3223 90 02		        bcc hnum0_9
   462 3225 E9 07		        sbc #'A'-'9'-1
   463 3227 0A			hnum0_9 asl
   464 3228 0A			        asl
   465 3229 0A			        asl
   466 322A 0A			        asl
   467 322B 8D 3B 32		        sta hbits+1
   468 322E 98			        tya
   469 322F 38			        sec
   470 3230 E9 30		        sbc #'0'
   471 3232 C9 0A		        cmp #10
   472 3234 90 02		        bcc lnum0_9
   473 3236 E9 07		        sbc #'A'-'9'-1
   474 3238 29 0F		lnum0_9 and #$0F
   475 323A 09 00		hbits   ora #$00
   476 323C 60			        rts
   477
   478 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   479 				; 
   480 				; Convert Hex to ATASCII
   481 				;
   482 				; IN    A    byte
   483 				; OUT X,Y    two ATASCII codes of hex representation
   484 				;
   485
   486 323D			convha ; conv hex to atascii
   487 323D 48			        pha                    
   488 323E 4A			        lsr
   489 323F 4A			        lsr
   490 3240 4A			        lsr
   491 3241 4A			        lsr
   492 3242 F8			        sed        
   493 3243 18			        clc
   494 3244 69 90		        adc #$90
   495 3246 69 40		        adc #$40
   496 3248 AA			        tax
   497 3249 68			        pla
   498 324A 29 0F		        and #$0f
   499 324C 18			        clc
   500 324D 69 90		        adc #$90
   501 324F 69 40		        adc #$40
   502 3251 A8			        tay
   503 3252 D8			        cld            
   504 3253 60			        rts
   505
   506 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   507 				; 
   508 				; Print Message
   509 				;
   510 				; IN    X,Y    low, high byte of address to message
   511 				;        A    length of message
   512
   513 3254			print ; print message
   514 3254 8D 48 03		        sta IOCB0.BUFLEN
   515 3257 A9 00		        lda #$00
   516 3259 8D 49 03		        sta IOCB0.BUFLEN+1
   517 325C 8E 44 03		        stx IOCB0.BUF
   518 325F 8C 45 03		        sty IOCB0.BUF+1
   519 3262 A9 0B		        lda #XIO.PUT
   520 3264 8D 42 03		        sta IOCB0.CMD
   521 3267 A2 00		        ldx #$00
   522 3269 20 56 E4		        jsr CIOV
   523 326C 60			        rts
   524
   525 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   526 				; 
   527 				; Open File for Read
   528 				;
   529 				; IN    X,Y    low, high byte of address to file name
   530 				;
   531
   532 326D			open ; open file
   533 326D A9 6C		        lda #<fname
   534 326F 8D 54 03		        sta IOCB1.BUF
   535 3272 A9 31		        lda #>fname
   536 3274 8D 55 03		        sta IOCB1.BUF+1
   537 3277 A9 04		        lda #XIO.READ
   538 3279 8D 5A 03		        sta IOCB1.AUX1
   539 327C A9 00		        lda #$00
   540 327E 8D 5B 03		        sta IOCB1.AUX2
   541 3281 A9 03		        lda #XIO.OPEN
   542 3283 8D 52 03		        sta IOCB1.CMD
   543 3286 A2 10		        ldx #$10
   544 3288 20 56 E4		        jsr CIOV
   545 328B 60			        rts
   546
   547 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   548 				; 
   549 				; Input from File
   550 				;
   551 				; IN    X,Y    low, high byte of address to buffer
   552 				;       A      length of buffer
   553
   554 328C			input ; input file
   555 328C A9 7B		        lda #<pbuffer
   556 328E 8D 54 03		        sta IOCB1.BUF
   557 3291 A9 31		        lda #>pbuffer
   558 3293 8D 55 03		        sta IOCB1.BUF+1
   559 3296 A9 11		        lda #$11
   560 3298 8D 58 03		        sta IOCB1.BUFLEN
   561 329B A9 00		        lda #$00
   562 329D 8D 59 03		        sta IOCB1.BUFLEN+1        
   563 32A0 A9 05		        lda #XIO.INPUT
   564 32A2 8D 52 03		        sta IOCB1.CMD
   565 32A5 A2 10		        ldx #$10
   566 32A7 20 56 E4		        jsr CIOV
   567 32AA 60			        rts
   568 				        
   569 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   570 				; 
   571 				; Close File
   572 				;
   573 32AB A9 0C		close   lda #XIO.CLOSE
   574 32AD 8D 52 03		        sta IOCB1.CMD
   575 32B0 A2 10		        ldx #$10
   576 32B2 20 56 E4		        jsr CIOV
   577 32B5 60			        rts
   578 				        
