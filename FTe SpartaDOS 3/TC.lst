mads 1.9.9
     1 				; The!Cart Bank Switch
     2
     3
     4 				;
     5 				; OS equ
     6 				;
     7
     8 = 000A			DOSVEC  = $000a
     9 = 0042			CRITIC  = $0042
    10
    11 = 022F			SDMCTL  = $022f
    12 = 03FA			GINTLK  = $3fa
    13 = 03EB			CARTCK  = $3eb
    14
    15 = D013			TRIG3   = $d013
    16 = D400			DMACTL  = $d400 
    17 = D40E			NMIEN   = $d40e
    18
    19 = E474			WARMST  = $e474
    20
    21 				; 
    22 				; IO EQUATES
    23 				; 
    24 = 0340			IOCB0        =  $0340     ; address of first IOCB
    25 = 0342			IOCB0.CMD    = IOCB0+2    ; where command goes in IOCB
    26 = 0343			IOCB0.STAT   = IOCB0+3    ; state returned
    27 = 0344			IOCB0.BUF    = IOCB0+4    ; buffer (or name) address
    28 = 0348			IOCB0.BUFLEN = IOCB0+8    ; max buffer length address
    29 = 034A			IOCB0.AUX1   = IOCB0+10   ; Auxilliary byte 1
    30 = 034B			IOCB0.AUX2   = IOCB0+11   ; Auxilliary byte 2
    31
    32 = 0350			IOCB1        =  $0350     ; address of first IOCB
    33 = 0352			IOCB1.CMD    = IOCB1+2    ; where command goes in IOCB
    34 = 0353			IOCB1.STAT   = IOCB1+3    ; state returned
    35 = 0354			IOCB1.BUF    = IOCB1+4    ; buffer (or name) address
    36 = 0358			IOCB1.BUFLEN = IOCB1+8    ; max buffer length address
    37 = 035A			IOCB1.AUX1   = IOCB1+10   ; Auxilliary byte 1
    38 = 035B			IOCB1.AUX2   = IOCB1+11   ; Auxilliary byte 2
    39
    40
    41 = 00FE			XIO.FMT = 254   ; Format command
    42 = 0005			XIO.INPUT = 5   ; Input Line
    43 = 0009			XIO.PRINT = 9   ; Print line
    44 = 0003			XIO.OPEN  = 3   ; Open
    45 = 000C			XIO.CLOSE = 12  ; Close
    46 = 0004			XIO.READ  = 4   ; Read
    47 = 0008			XIO.WRITE = 8   ; Write
    48 = 0007			XIO.GET   = 7   ; Get
    49 = 000B			XIO.PUT   = 11  ; Put
    50
    51 = 0088			XIO.STAT.EOF = $88
    52
    53 = E456			CIOV = $E456   ; the classic location
    54
    55 				;
    56 				; SpartaDOS 
    57 				;
    58 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    59 = 003F			SD_LBUF        = $3F ; offset to line buffer
    60 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    61 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    62 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    63
    64 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    65 				; 
    66 				; The!Cart programming information
    67 				; (c) 2013 Matthias Reichl
    68 				;
    69 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    70 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    71 				; 25AA020A). The memory is addressed using 16384 8k banks
    72 				; (64 8k banks when using RAM instead of flash).
    73 				; 
    74 				; The cartridge configuration registers are located at
    75 				; $D5A0-$D5A8. All registers are read/write unless noted
    76 				; otherwise. Unused bits shall be written as '0' and
    77 				; always read back as '0'.
    78 				; 
    79 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    80 				; flash bank 0, writes to flash are disabled.
    81 				; 
    82 				; Depending on the selected cartridge mode additional
    83 				; registers are enabled at $D5xx.
    84 				; 
    85 				; The primary bank register also serves as a base bank
    86 				; register for the various sub-modes.
    87 				; 
    88 				; The secondary bank register is only used in "flexi mode".
    89 				;
    90
    91 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    92 				; 
    93 				; The!Cart Register (from-to,default)
    94 				;
    95
    96 				; Mode Select
    97 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
    98 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
    99 				; other than the ones listed here are reserved (and result
   100 				; in "cartridge off"):
   101 				; $00: off, cartridge disabled
   102 				; $01: 8k banks at $A000
   103 				; $02: AtariMax 1MBit / 128k
   104 				; $03: Atarimax 8MBit / 1MB
   105 				; $04: OSS M091
   106 				; $08: SDX 64k cart, $D5Ex banking
   107 				; $09: Diamond GOS 64k cart, $D5Dx banking
   108 				; $0A: Express 64k cart, $D57x banking
   109 				; $0C: Atrax 128k cart
   110 				; $0D: Williams 64k cart
   111 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   112 				; $21: standard 16k cart at $8000-$BFFF
   113 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   114 				; $23: Blizzard 16k
   115 				; $24: Sic!Cart 512k
   116 				; $28: 16k Mega cart
   117 				; $29: 32k Mega cart
   118 				; $2A: 64k Mega cart
   119 				; $2B: 128k Mega cart
   120 				; $2C: 256k Mega cart
   121 				; $2D: 512k Mega cart
   122 				; $2E: 1024k Mega cart
   123 				; $2F: 2048k Mega cart
   124 				; $30: 32k XEGS cart
   125 				; $31: 64k XEGS cart
   126 				; $32: 128k XEGS cart
   127 				; $33: 256k XEGS cart
   128 				; $34: 512k XEGS cart
   129 				; $35: 1024k XEGS cart
   130 				; $38: 32k SWXEGS cart
   131 				; $39: 64k SWXEGS cart
   132 				; $3A: 128k SWXEGS cart
   133 				; $3B: 256k SWXEGS cart
   134 				; $3C: 512k SWXEGS cart
   135 				; $3D: 1024k SWXEGS cart
   136 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   137 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   138 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   139 				                         ; separate 8k banks at $A000 and $8000
   140 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   141
   142 				; how to figure out that The!Cart is not active?
   143 				; If the address is not used then the XL returns $ff but
   144 				; the XE (and old 800) return $d5 (high byte of address,
   145 				; the value of the last bus cycle)
   146 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   147 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   148
   149 				; Mode Flash/RAM Select
   150 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   151 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   152 				; bit 1: primary bank source (0=flash, 1=RAM)
   153 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   154 				; bit 3: secondary bank source (0=flash, 1=RAM)
   155 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   156 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   157
   158 				; Primary Bank
   159 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   160 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   161 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   162
   163 				; Secondary Bank 
   164 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   165 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   166 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   167
   168 				; SPI interface to EEPROM
   169 = D5A8			TCINEP = $d5a8
   170 				; bit 0: SPI CLK
   171 				; bit 1: SPI CS
   172 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   173
   174 				; configuration lock
   175 = D5AF			TCCOLO = $d5af
   176 				; Writing to this register disables "The!Cart" registers
   177 				; at $d5aX.
   178
   179
   180 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   181 				;
   182 				; Main
   183 				;
   184
   185 				        org $2000
   186 				; check for parameter
   187 FFFF> 2000-22A8> A0 0A	        ldy #SD_BUFOFF
   188 2002 B1 0A		        lda (DOSVEC),y
   189 2004 18			        clc
   190 2005 69 3F		        adc #SD_LBUF
   191 2007 A8			        tay
   192 2008 B1 0A		        lda (DOSVEC),y
   193 200A C9 9B		        cmp #$9B
   194 200C F0 27		        beq prserr
   195
   196 200E C8			        iny
   197 200F 8C 5B 21		        sty paridy      ;set index to parameter
   198
   199 				; read sys file        
   200 2012 20 60 22		        jsr open
   201 2015 30 1E		        bmi prserr
   202 				                
   203 2017 20 7F 22		rdnext  jsr input       ; read line
   204 201A 30 29		        bmi filerr
   205 				                
   206 201C A9 20		        lda #' '
   207 201E CD 76 21		        cmp pbuffer+8   ; check for spaces at 9 and 12
   208 2021 D0 22		        bne filerr
   209 2023 A9 20		        lda #' '
   210 2025 CD 79 21		        cmp pbuffer+11
   211 2028 D0 1B		        bne filerr
   212 				        
   213 202A 20 F0 21		        jsr check
   214 202D B0 46		        bcs found
   215 				        
   216 202F EE 5A 21		        inc lcnt
   217 2032 4C 17 20		        jmp rdnext
   218
   219 				; exit with parse error                  
   220 2035 20 9E 22		prserr  jsr close
   221 2038 A2 D7		        ldx #<errprs.begin
   222 203A A0 20		        ldy #>errprs.begin
   223 203C A9 15		        lda #errprs.end-errprs.begin
   224 203E 20 47 22		        jsr print
   225 2041 20 80 21		        jsr list
   226 2044 60			        rts
   227
   228 				; exit with file error                  
   229 2045 A9 88		filerr  lda #XIO.STAT.EOF     ; ignore end of file
   230 2047 CD 53 03		        cmp IOCB1.STAT
   231 204A F0 19		        beq filend
   232 204C AD 5A 21		        lda lcnt
   233 204F 20 30 22		        jsr convha
   234 2052 8E 10 21		        stx errfil.line
   235 2055 8C 11 21		        sty errfil.line+1
   236 2058 A2 EC		        ldx #<errfil.begin
   237 205A A0 20		        ldy #>errfil.begin
   238 205C A9 27		        lda #errfil.end-errfil.begin
   239 205E 20 47 22		        jsr print
   240 2061 20 9E 22		        jsr close
   241 2064 60			        rts
   242 				        
   243 2065 A2 13		filend  ldx #<errnfd.begin
   244 2067 A0 21		        ldy #>errnfd.begin
   245 2069 A9 12		        lda #errnfd.end-errnfd.begin
   246 206B 20 47 22		        jsr print
   247 206E 20 9E 22		        jsr close
   248 2071 20 80 21		        jsr list
   249 2074 60			        rts
   250
   251 				; read mode and bank
   252 2075 20 9E 22		found   jsr close
   253
   254 2078 20 CB 21		        jsr rpara
   255 				        
   256 				; switch The!Cart
   257 207B A9 00		        lda #$00        ; switch off DMA
   258 207D 8D 2F 02		        sta SDMCTL
   259 2080 8D 00 D4		        sta DMACTL
   260
   261 2083 78			        sei             ; mask all interrupts
   262 2084 A9 00		        lda #$00
   263 2086 8D 0E D4		        sta NMIEN
   264
   265 2089 AD 5D 21		        lda bankl
   266 208C 8D A0 D5		        sta TCPBRL
   267 208F AD 5E 21		        lda bankh       ; set P bank 
   268 2092 8D A1 D5		        sta TCPBRH
   269 				        
   270 2095 A9 00		        lda #$00
   271 2097 8D A3 D5		        sta TCSBRL      ; set S bank 
   272 209A 8D A4 D5		        sta TCSBRH
   273 209D 8D A5 D5		        sta TCSBEN      ; disable S
   274
   275 20A0 8D A7 D5		        sta TCMOFR      ; cfg flash r/o
   276 20A3 AD 5C 21		        lda mode        ; set mode
   277 20A6 8D A6 D5		        sta TCMOSL
   278
   279 20A9 C9 00		        cmp #TCMOSL.OFF
   280 20AB F0 18		        beq _nocar
   281
   282 20AD A9 01		        lda #$01        ; set cartridge flag
   283 20AF 8D 13 D0		        sta TRIG3
   284 20B2 8D FA 03		        sta GINTLK
   285 				        
   286 20B5 A9 00		        lda #$00        ; set cart check sum
   287 20B7 AA			        tax
   288 20B8 18			        clc
   289 20B9 7D F0 BF		_ccloop adc $bff0,x
   290 20BC E8			        inx
   291 20BD D0 FA		        bne _ccloop
   292 20BF 8D EB 03		        sta CARTCK
   293 20C2 4C D2 20		        jmp _end
   294
   295 20C5 A9 00		_nocar  lda #$00        ; set cartridge flag
   296 20C7 8D 13 D0		        sta TRIG3
   297 20CA 8D FA 03		        sta GINTLK
   298 20CD A9 00		        lda #$00        ; set cart check sum
   299 20CF 8D EB 03		        sta CARTCK
   300
   301 20D2 68			_end    pla             ; clear return adr from stack 
   302 20D3 68			        pla
   303 				        
   304 20D4 4C 74 E4		        jmp WARMST      ; warm start
   305
   306 				; THE END
   307
   308
   309 				; messages        
   310
   311 20D7			errprs.begin
   312 20D7 45 72 72 6F 72 20 +         .byte 'Error - no parameter',$9b
   313 20EC			errprs.end
   314
   315 20EC			errfil.begin
   316 20EC 45 72 72 6F 72 20 +         .byte 'Error - THECART.SYS',$9b
   317 2100 20 20 50 61 72 73 +         .byte '  Parsing line $'
   318 2110			errfil.line
   319 2110 58 58 9B		        .byte 'XX',$9B
   320 2113			errfil.end
   321
   322 2113			errnfd.begin
   323 2113 45 72 72 6F 72 20 +         .byte 'Error - not found',$9b
   324 2125			errnfd.end
   325
   326 2125			erruse.begin
   327 2125 20 20 4D 65 6E 75 +         .byte '  Menu ver45 for The!Cart by hjx',$9B
   328 2146 20 20 55 73 65 20 +         .byte '  Use THECART name:',$9B
   329 215A			erruse.end
   330
   331 				; variables
   332
   333 215A 01			lcnt    .byte $01        
   334 215B 00			paridy  .byte $00
   335 215C 00			mode    .byte $00
   336 215D 00			bankl   .byte $00
   337 215E 00			bankh   .byte $00
   338 				        
   339 215F 44 31 3A 3E 54 43 + fname   .byte 'D1:>TC.CFG',$9b
   340 216A 20 20 20 20		lbuffer .byte '    '
   341 216E 5F 5F 5F 5F 5F 5F + pbuffer .byte '________________',$9b,$FF
   342
   343
   344 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   345 				; 
   346 				; List 
   347 				;
   348 2180 A2 25		list    ldx #<erruse.begin
   349 2182 A0 21		        ldy #>erruse.begin
   350 2184 A9 35		        lda #erruse.end-erruse.begin
   351 2186 20 47 22		        jsr print
   352 				        
   353 2189 20 60 22		        jsr open
   354 218C 20 7F 22		_list   jsr input       ; read line
   355 218F 30 36		        bmi _endlst
   356
   357 2191 A9 20		        lda #' '        ; reset current mark
   358 2193 8D 6D 21		        sta lbuffer+3
   359 				        
   360 2196 20 CB 21		        jsr rpara
   361 				        
   362 2199 AD A6 D5		        lda TCMOSL      ; cmp current with para
   363 219C CD 5C 21		        cmp mode
   364 219F D0 15		        bne _print
   365
   366 21A1 AD A1 D5		        lda TCPBRH
   367 21A4 CD 5E 21		        cmp bankh
   368 21A7 D0 0D		        bne _print
   369
   370 21A9 AD A0 D5		        lda TCPBRL
   371 21AC CD 5D 21		        cmp bankl
   372 21AF D0 05		        bne _print
   373
   374 21B1 A9 3E		        lda #'>'        ; set current mark
   375 21B3 8D 6D 21		        sta lbuffer+3
   376
   377 21B6 A9 9B		_print  lda #$9b        ; set return after name
   378 21B8 8D 76 21		        sta pbuffer+8
   379
   380 21BB A2 6A		        ldx #<lbuffer
   381 21BD A0 21		        ldy #>lbuffer
   382 21BF A9 0D		        lda #$0d
   383 21C1 20 47 22		        jsr print
   384 				        
   385 21C4 4C 8C 21		        jmp _list 
   386
   387 21C7 20 9E 22		_endlst jsr close
   388 21CA 60			        rts
   389
   390 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   391 				;
   392 				; Read parameter (mode, bank low and bank high)
   393 				;
   394 21CB AE 77 21		rpara   ldx pbuffer+9   ; read mode
   395 21CE AC 78 21		        ldy pbuffer+10
   396 21D1 20 10 22		        jsr convah
   397 21D4 8D 5C 21		        sta mode
   398
   399 21D7 AE 7A 21		        ldx pbuffer+12  ; read bank low
   400 21DA AC 7B 21		        ldy pbuffer+13
   401 21DD 20 10 22		        jsr convah
   402 21E0 8D 5E 21		        sta bankh
   403
   404 21E3 AE 7C 21		        ldx pbuffer+14  ; read bank high
   405 21E6 AC 7D 21		        ldy pbuffer+15
   406 21E9 20 10 22		        jsr convah
   407 21EC 8D 5D 21		        sta bankl
   408 				        
   409 21EF 60			        rts
   410
   411 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   412 				; 
   413 				; Check Command Line with File Buffer
   414 				;
   415 				; IN    pbuffer   address to file buffer
   416 				;       paridy    index to parameter in DOSVEC
   417
   418 21F0			check ; check command line and file buffer  
   419 21F0 A2 00		        ldx #$00
   420 21F2 AC 5B 21		        ldy paridy 
   421 21F5 B1 0A		checkn  lda (DOSVEC),y
   422 21F7 DD 6E 21		        cmp pbuffer,x
   423 21FA D0 05		        bne checkc
   424 21FC E8			        inx
   425 21FD C8			        iny
   426 21FE 4C F5 21		        jmp checkn
   427 				        
   428 2201 C9 9B		checkc  cmp #$9b
   429 2203 D0 09		        bne notfnd
   430 2205 A9 20		        lda #' '
   431 2207 DD 6E 21		        cmp pbuffer,x
   432 220A D0 02		        bne notfnd
   433 				        
   434 220C 38			        sec
   435 220D 60			        rts
   436
   437 220E 18			notfnd  clc
   438 220F 60			        rts
   439
   440 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   441 				; 
   442 				; Convert ATASCI to hex
   443 				;
   444 				; IN    X,Y   high, low ASCII digit 
   445 				;        A    hex value
   446
   447 2210 8A			convah  txa
   448 2211 38			        sec
   449 2212 E9 30		        sbc #'0'
   450 2214 C9 0A		        cmp #10
   451 2216 90 02		        bcc hnum0_9
   452 2218 E9 07		        sbc #'A'-'9'-1
   453 221A 0A			hnum0_9 asl
   454 221B 0A			        asl
   455 221C 0A			        asl
   456 221D 0A			        asl
   457 221E 8D 2E 22		        sta hbits+1
   458 2221 98			        tya
   459 2222 38			        sec
   460 2223 E9 30		        sbc #'0'
   461 2225 C9 0A		        cmp #10
   462 2227 90 02		        bcc lnum0_9
   463 2229 E9 07		        sbc #'A'-'9'-1
   464 222B 29 0F		lnum0_9 and #$0F
   465 222D 09 00		hbits   ora #$00
   466 222F 60			        rts
   467
   468 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   469 				; 
   470 				; Convert Hex to ATASCII
   471 				;
   472 				; IN    A    byte
   473 				; OUT X,Y    two ATASCII codes of hex representation
   474 				;
   475
   476 2230			convha ; conv hex to atascii
   477 2230 48			        pha                    
   478 2231 4A			        lsr
   479 2232 4A			        lsr
   480 2233 4A			        lsr
   481 2234 4A			        lsr
   482 2235 F8			        sed        
   483 2236 18			        clc
   484 2237 69 90		        adc #$90
   485 2239 69 40		        adc #$40
   486 223B AA			        tax
   487 223C 68			        pla
   488 223D 29 0F		        and #$0f
   489 223F 18			        clc
   490 2240 69 90		        adc #$90
   491 2242 69 40		        adc #$40
   492 2244 A8			        tay
   493 2245 D8			        cld            
   494 2246 60			        rts
   495
   496 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   497 				; 
   498 				; Print Message
   499 				;
   500 				; IN    X,Y    low, high byte of address to message
   501 				;        A    length of message
   502
   503 2247			print ; print message
   504 2247 8D 48 03		        sta IOCB0.BUFLEN
   505 224A A9 00		        lda #$00
   506 224C 8D 49 03		        sta IOCB0.BUFLEN+1
   507 224F 8E 44 03		        stx IOCB0.BUF
   508 2252 8C 45 03		        sty IOCB0.BUF+1
   509 2255 A9 0B		        lda #XIO.PUT
   510 2257 8D 42 03		        sta IOCB0.CMD
   511 225A A2 00		        ldx #$00
   512 225C 20 56 E4		        jsr CIOV
   513 225F 60			        rts
   514
   515 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   516 				; 
   517 				; Open File for Read
   518 				;
   519 				; IN    X,Y    low, high byte of address to file name
   520 				;
   521
   522 2260			open ; open file
   523 2260 A9 5F		        lda #<fname
   524 2262 8D 54 03		        sta IOCB1.BUF
   525 2265 A9 21		        lda #>fname
   526 2267 8D 55 03		        sta IOCB1.BUF+1
   527 226A A9 04		        lda #XIO.READ
   528 226C 8D 5A 03		        sta IOCB1.AUX1
   529 226F A9 00		        lda #$00
   530 2271 8D 5B 03		        sta IOCB1.AUX2
   531 2274 A9 03		        lda #XIO.OPEN
   532 2276 8D 52 03		        sta IOCB1.CMD
   533 2279 A2 10		        ldx #$10
   534 227B 20 56 E4		        jsr CIOV
   535 227E 60			        rts
   536
   537 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 				; 
   539 				; Input from File
   540 				;
   541 				; IN    X,Y    low, high byte of address to buffer
   542 				;       A      length of buffer
   543
   544 227F			input ; input file
   545 227F A9 6E		        lda #<pbuffer
   546 2281 8D 54 03		        sta IOCB1.BUF
   547 2284 A9 21		        lda #>pbuffer
   548 2286 8D 55 03		        sta IOCB1.BUF+1
   549 2289 A9 11		        lda #$11
   550 228B 8D 58 03		        sta IOCB1.BUFLEN
   551 228E A9 00		        lda #$00
   552 2290 8D 59 03		        sta IOCB1.BUFLEN+1        
   553 2293 A9 05		        lda #XIO.INPUT
   554 2295 8D 52 03		        sta IOCB1.CMD
   555 2298 A2 10		        ldx #$10
   556 229A 20 56 E4		        jsr CIOV
   557 229D 60			        rts
   558 				        
   559 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   560 				; 
   561 				; Close File
   562 				;
   563 229E A9 0C		close   lda #XIO.CLOSE
   564 22A0 8D 52 03		        sta IOCB1.CMD
   565 22A3 A2 10		        ldx #$10
   566 22A5 20 56 E4		        jsr CIOV
   567 22A8 60			        rts
   568 				        
