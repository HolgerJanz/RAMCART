mads 1.9.9
     1 				; The!Cart Rom Switch
     2
     3
     4 				;
     5 				; OS equ
     6 				;
     7
     8 = 000A			DOSVEC  = $000a
     9 = 0042			CRITIC  = $0042
    10
    11 = 022F			SDMCTL  = $022f
    12 = 03FA			GINTLK  = $3fa
    13 = 03EB			CARTCK  = $3eb
    14
    15 = D013			TRIG3   = $d013
    16 = D400			DMACTL  = $d400 
    17 = D40E			NMIEN   = $d40e
    18
    19 = E474			WARMST  = $e474
    20
    21 				; 
    22 				; IO EQUATES
    23 				; 
    24 = 0340			IOCB0        =  $0340     ; address of first IOCB
    25 = 0342			IOCB0.CMD    = IOCB0+2    ; where command goes in IOCB
    26 = 0343			IOCB0.STAT   = IOCB0+3    ; state returned
    27 = 0344			IOCB0.BUF    = IOCB0+4    ; buffer (or name) address
    28 = 0348			IOCB0.BUFLEN = IOCB0+8    ; max buffer length address
    29 = 034A			IOCB0.AUX1   = IOCB0+10   ; Auxilliary byte 1
    30 = 034B			IOCB0.AUX2   = IOCB0+11   ; Auxilliary byte 2
    31
    32 = 0350			IOCB1        =  $0350     ; address of first IOCB
    33 = 0352			IOCB1.CMD    = IOCB1+2    ; where command goes in IOCB
    34 = 0353			IOCB1.STAT   = IOCB1+3    ; state returned
    35 = 0354			IOCB1.BUF    = IOCB1+4    ; buffer (or name) address
    36 = 0358			IOCB1.BUFLEN = IOCB1+8    ; max buffer length address
    37 = 035A			IOCB1.AUX1   = IOCB1+10   ; Auxilliary byte 1
    38 = 035B			IOCB1.AUX2   = IOCB1+11   ; Auxilliary byte 2
    39
    40
    41 = 00FE			XIO.FMT = 254   ; Format command
    42 = 0005			XIO.INPUT = 5   ; Input Line
    43 = 0009			XIO.PRINT = 9   ; Print line
    44 = 0003			XIO.OPEN  = 3   ; Open
    45 = 000C			XIO.CLOSE = 12  ; Close
    46 = 0004			XIO.READ  = 4   ; Read
    47 = 0008			XIO.WRITE = 8   ; Write
    48 = 0007			XIO.GET   = 7   ; Get
    49 = 000B			XIO.PUT   = 11  ; Put
    50
    51 = E456			CIOV = $E456   ; the classic location
    52
    53 				;
    54 				; SpartaDOS 
    55 				;
    56 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    57 = 003F			SD_LBUF        = $3F ; offset to line buffer
    58 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    59 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    60 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    61
    62 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    63 				; 
    64 				; The!Cart programming information
    65 				; (c) 2013 Matthias Reichl
    66 				;
    67 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    68 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    69 				; 25AA020A). The memory is addressed using 16384 8k banks
    70 				; (64 8k banks when using RAM instead of flash).
    71 				; 
    72 				; The cartridge configuration registers are located at
    73 				; $D5A0-$D5A8. All registers are read/write unless noted
    74 				; otherwise. Unused bits shall be written as '0' and
    75 				; always read back as '0'.
    76 				; 
    77 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    78 				; flash bank 0, writes to flash are disabled.
    79 				; 
    80 				; Depending on the selected cartridge mode additional
    81 				; registers are enabled at $D5xx.
    82 				; 
    83 				; The primary bank register also serves as a base bank
    84 				; register for the various sub-modes.
    85 				; 
    86 				; The secondary bank register is only used in "flexi mode".
    87 				;
    88
    89 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    90 				; 
    91 				; The!Cart Register (from-to,default)
    92 				;
    93
    94 				; Mode Select
    95 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
    96 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
    97 				; other than the ones listed here are reserved (and result
    98 				; in "cartridge off"):
    99 				; $00: off, cartridge disabled
   100 				; $01: 8k banks at $A000
   101 				; $02: AtariMax 1MBit / 128k
   102 				; $03: Atarimax 8MBit / 1MB
   103 				; $04: OSS M091
   104 				; $08: SDX 64k cart, $D5Ex banking
   105 				; $09: Diamond GOS 64k cart, $D5Dx banking
   106 				; $0A: Express 64k cart, $D57x banking
   107 				; $0C: Atrax 128k cart
   108 				; $0D: Williams 64k cart
   109 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   110 				; $21: standard 16k cart at $8000-$BFFF
   111 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   112 				; $23: Blizzard 16k
   113 				; $24: Sic!Cart 512k
   114 				; $28: 16k Mega cart
   115 				; $29: 32k Mega cart
   116 				; $2A: 64k Mega cart
   117 				; $2B: 128k Mega cart
   118 				; $2C: 256k Mega cart
   119 				; $2D: 512k Mega cart
   120 				; $2E: 1024k Mega cart
   121 				; $2F: 2048k Mega cart
   122 				; $30: 32k XEGS cart
   123 				; $31: 64k XEGS cart
   124 				; $32: 128k XEGS cart
   125 				; $33: 256k XEGS cart
   126 				; $34: 512k XEGS cart
   127 				; $35: 1024k XEGS cart
   128 				; $38: 32k SWXEGS cart
   129 				; $39: 64k SWXEGS cart
   130 				; $3A: 128k SWXEGS cart
   131 				; $3B: 256k SWXEGS cart
   132 				; $3C: 512k SWXEGS cart
   133 				; $3D: 1024k SWXEGS cart
   134 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   135 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   136 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   137 				                         ; separate 8k banks at $A000 and $8000
   138 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   139
   140 				; how to figure out that The!Cart is not active?
   141 				; If the address is not used then the XL returns $ff but
   142 				; the XE (and old 800) return $d5 (high byte of address,
   143 				; the value of the last bus cycle)
   144 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   145 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   146
   147 				; Mode Flash/RAM Select
   148 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   149 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   150 				; bit 1: primary bank source (0=flash, 1=RAM)
   151 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   152 				; bit 3: secondary bank source (0=flash, 1=RAM)
   153 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   154 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   155
   156 				; Primary Bank
   157 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   158 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   159 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   160
   161 				; Secondary Bank 
   162 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   163 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   164 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   165
   166 				; SPI interface to EEPROM
   167 = D5A8			TCINEP = $d5a8
   168 				; bit 0: SPI CLK
   169 				; bit 1: SPI CS
   170 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   171
   172 				; configuration lock
   173 = D5AF			TCCOLO = $d5af
   174 				; Writing to this register disables "The!Cart" registers
   175 				; at $d5aX.
   176
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				;
   180 				; Main
   181 				;
   182
   183 				        org $2000
   184 				; check for parameter
   185 FFFF> 2000-2284> A0 0A	        ldy #SD_BUFOFF
   186 2002 B1 0A		        lda (DOSVEC),y
   187 2004 18			        clc
   188 2005 69 3F		        adc #SD_LBUF
   189 2007 A8			        tay
   190 2008 B1 0A		        lda (DOSVEC),y
   191 200A C9 9B		        cmp #$9B
   192 200C F0 31		        beq prserr
   193
   194 200E C8			        iny
   195 200F 8C 7C 21		        sty paridy      ;set index to parameter
   196
   197 				; read sys file        
   198 2012 A2 80		        ldx #<fname
   199 2014 A0 21		        ldy #>fname
   200 2016 20 46 22		        jsr open
   201 2019 30 24		        bmi prserr
   202 				                
   203 201B A2 94		rdnext  ldx #<pbuffer   ; read line
   204 201D A0 21		        ldy #>pbuffer
   205 201F A9 11		        lda #$11
   206 2021 20 61 22		        jsr read
   207 2024 30 29		        bmi filerr
   208 				                
   209 2026 A9 20		        lda #' '
   210 2028 CD 9C 21		        cmp pbuffer+8   ; check for spaces at 9 and 12
   211 202B D0 22		        bne filerr
   212 202D A9 20		        lda #' '
   213 202F CD 9F 21		        cmp pbuffer+11
   214 2032 D0 1B		        bne filerr
   215 				        
   216 2034 20 D6 21		        jsr check
   217 2037 B0 46		        bcs found
   218 				        
   219 2039 EE 7B 21		        inc lcnt
   220 203C 4C 1B 20		        jmp rdnext
   221
   222 				; exit with parse error                  
   223 203F 20 7A 22		prserr  jsr close
   224 2042 A2 02		        ldx #<errprs.begin
   225 2044 A0 21		        ldy #>errprs.begin
   226 2046 A9 15		        lda #errprs.end-errprs.begin
   227 2048 20 2D 22		        jsr print
   228 204B 20 A6 21		        jsr list
   229 204E 60			        rts
   230
   231 				; exit with file error                  
   232 204F A9 88		filerr  lda #$88        ; ignore end of file
   233 2051 CD 53 03		        cmp IOCB1.STAT
   234 2054 F0 19		        beq filend
   235 2056 AD 7B 21		        lda lcnt
   236 2059 20 16 22		        jsr convha
   237 205C 8E 3B 21		        stx errfil.line
   238 205F 8C 3C 21		        sty errfil.line+1
   239 2062 A2 17		        ldx #<errfil.begin
   240 2064 A0 21		        ldy #>errfil.begin
   241 2066 A9 27		        lda #errfil.end-errfil.begin
   242 2068 20 2D 22		        jsr print
   243 206B 20 7A 22		        jsr close
   244 206E 60			        rts
   245 				        
   246 206F A2 3E		filend  ldx #<errnfd.begin
   247 2071 A0 21		        ldy #>errnfd.begin
   248 2073 A9 12		        lda #errnfd.end-errnfd.begin
   249 2075 20 2D 22		        jsr print
   250 2078 20 7A 22		        jsr close
   251 207B 20 A6 21		        jsr list
   252 207E 60			        rts
   253
   254 				; read mode and bank
   255 207F 20 7A 22		found   jsr close
   256
   257 2082 AE 9D 21		        ldx pbuffer+9   ; read mode
   258 2085 AC 9E 21		        ldy pbuffer+10
   259 2088 20 F6 21		        jsr convah
   260 208B 8D 7D 21		        sta mode
   261
   262 208E AE A0 21		        ldx pbuffer+12  ; read bank low
   263 2091 AC A1 21		        ldy pbuffer+13
   264 2094 20 F6 21		        jsr convah
   265 2097 8D 7F 21		        sta bankh
   266
   267 209A AE A2 21		        ldx pbuffer+14  ; read bank high
   268 209D AC A3 21		        ldy pbuffer+15
   269 20A0 20 F6 21		        jsr convah
   270 20A3 8D 7E 21		        sta bankl
   271
   272 				; switch The!Cart
   273 20A6 A9 00		        lda #$00        ; switch off DMA
   274 20A8 8D 2F 02		        sta SDMCTL
   275 20AB 8D 00 D4		        sta DMACTL
   276
   277 20AE 78			        sei             ; mask all interrupts
   278 20AF A9 00		        lda #$00
   279 20B1 8D 0E D4		        sta NMIEN
   280
   281 20B4 AD 7E 21		        lda bankl
   282 20B7 8D A0 D5		        sta TCPBRL
   283 20BA AD 7F 21		        lda bankh       ; set P bank 
   284 20BD 8D A1 D5		        sta TCPBRH
   285 				        
   286 20C0 A9 00		        lda #$00
   287 20C2 8D A3 D5		        sta TCSBRL      ; set S bank 
   288 20C5 8D A4 D5		        sta TCSBRH
   289 20C8 8D A5 D5		        sta TCSBEN      ; disable S
   290
   291 20CB 8D A7 D5		        sta TCMOFR      ; cfg flash r/o
   292 20CE AD 7D 21		        lda mode        ; set mode
   293 20D1 8D A6 D5		        sta TCMOSL
   294
   295 20D4 C9 00		        cmp #TCMOSL.OFF
   296 20D6 F0 18		        beq _nocar
   297
   298 20D8 A9 01		        lda #$01        ; set cartridge flag
   299 20DA 8D 13 D0		        sta TRIG3
   300 20DD 8D FA 03		        sta GINTLK
   301 20E0 A9 00		        lda #$00        ; set cart check sum
   302 20E2 AA			        tax
   303 20E3 18			        clc
   304 20E4 7D F0 BF		_ccloop adc $bff0,x
   305 20E7 E8			        inx
   306 20E8 D0 FA		        bne _ccloop
   307 20EA 8D EB 03		        sta CARTCK
   308 20ED 4C FD 20		        jmp _end
   309
   310 20F0 A9 00		_nocar  lda #$00        ; set cartridge flag
   311 20F2 8D 13 D0		        sta TRIG3
   312 20F5 8D FA 03		        sta GINTLK
   313 20F8 A9 00		        lda #$00        ; set cart check sum
   314 20FA 8D EB 03		        sta CARTCK
   315
   316 20FD 68			_end    pla             ; clear return adr from stack 
   317 20FE 68			        pla
   318 				        
   319 20FF 4C 74 E4		        jmp WARMST      ; warm start
   320 				; THE END
   321
   322
   323 				; messages        
   324
   325 2102			errprs.begin
   326 2102 45 72 72 6F 72 20 +         .byte 'Error - no parameter',$9b
   327 2117			errprs.end
   328
   329 2117			errfil.begin
   330 2117 45 72 72 6F 72 20 +         .byte 'Error - THECART.SYS',$9b
   331 212B 20 20 50 61 72 73 +         .byte '  Parsing line $'
   332 213B			errfil.line
   333 213B 58 58 9B		        .byte 'XX',$9B
   334 213E			errfil.end
   335
   336 213E			errnfd.begin
   337 213E 45 72 72 6F 72 20 +         .byte 'Error - not found',$9b
   338 2150			errnfd.end
   339
   340 2150			erruse.begin
   341 2150 20 20 54 48 45 43 +         .byte '  THECART ver42 by HJX',$9B
   342 2167 20 20 55 73 65 20 +         .byte '  Use THECART name:',$9B
   343 217B			erruse.end
   344
   345 				; variables
   346
   347 217B 01			lcnt    .byte $01        
   348 217C 00			paridy  .byte $00
   349 217D 00			mode    .byte $00
   350 217E 00			bankl   .byte $00
   351 217F 00			bankh   .byte $00
   352 				        
   353 2180 44 31 3A 3E 54 48 + fname   .byte 'D1:>THECART.SYS',$9b
   354 2190 20 20 20 20		lbuffer .byte '    '
   355 2194 5F 5F 5F 5F 5F 5F + pbuffer .byte '________________',$9b,$FF
   356
   357
   358 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   359 				; 
   360 				; List 
   361 				;
   362 21A6 A2 50		list    ldx #<erruse.begin
   363 21A8 A0 21		        ldy #>erruse.begin
   364 21AA A9 2B		        lda #erruse.end-erruse.begin
   365 21AC 20 2D 22		        jsr print
   366 21AF A2 80		        ldx #<fname
   367 21B1 A0 21		        ldy #>fname
   368 21B3 20 46 22		        jsr open
   369 21B6 A2 94		_list   ldx #<pbuffer   ; read line
   370 21B8 A0 21		        ldy #>pbuffer
   371 21BA A9 11		        lda #$11
   372 21BC 20 61 22		        jsr read
   373 21BF 30 11		        bmi _endlst
   374 21C1 A9 9B		        lda #$9b
   375 21C3 8D 9C 21		        sta pbuffer+8
   376 21C6 A2 90		        ldx #<lbuffer
   377 21C8 A0 21		        ldy #>lbuffer
   378 21CA A9 0D		        lda #$0d
   379 21CC 20 2D 22		        jsr print
   380 21CF 4C B6 21		        jmp _list 
   381 21D2 20 7A 22		_endlst jsr close
   382 21D5 60			        rts
   383
   384 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   385 				; 
   386 				; Check Command Line with File Buffer
   387 				;
   388 				; IN    pbuffer   address to file buffer
   389 				;       paridy    index to parameter in DOSVEC
   390
   391 21D6			check ; check command line and file buffer  
   392 21D6 A2 00		        ldx #$00
   393 21D8 AC 7C 21		        ldy paridy 
   394 21DB B1 0A		checkn  lda (DOSVEC),y
   395 21DD DD 94 21		        cmp pbuffer,x
   396 21E0 D0 05		        bne checkc
   397 21E2 E8			        inx
   398 21E3 C8			        iny
   399 21E4 4C DB 21		        jmp checkn
   400 				        
   401 21E7 C9 9B		checkc  cmp #$9b
   402 21E9 D0 09		        bne notfnd
   403 21EB A9 20		        lda #' '
   404 21ED DD 94 21		        cmp pbuffer,x
   405 21F0 D0 02		        bne notfnd
   406 				        
   407 21F2 38			        sec
   408 21F3 60			        rts
   409
   410 21F4 18			notfnd  clc
   411 21F5 60			        rts
   412
   413 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   414 				; 
   415 				; Convert ATASCI to hex
   416 				;
   417 				; IN    X,Y   high, low ASCII digit 
   418 				;        A    hex value
   419
   420 21F6 8A			convah  txa
   421 21F7 38			        sec
   422 21F8 E9 30		        sbc #'0'
   423 21FA C9 0A		        cmp #10
   424 21FC 90 02		        bcc hnum0_9
   425 21FE E9 07		        sbc #'A'-'9'-1
   426 2200 0A			hnum0_9 asl
   427 2201 0A			        asl
   428 2202 0A			        asl
   429 2203 0A			        asl
   430 2204 8D 14 22		        sta hbits+1
   431 2207 98			        tya
   432 2208 38			        sec
   433 2209 E9 30		        sbc #'0'
   434 220B C9 0A		        cmp #10
   435 220D 90 02		        bcc lnum0_9
   436 220F E9 07		        sbc #'A'-'9'-1
   437 2211 29 0F		lnum0_9 and #$0F
   438 2213 09 00		hbits   ora #$00
   439 2215 60			        rts
   440
   441 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   442 				; 
   443 				; Convert Hex to ATASCII
   444 				;
   445 				; IN    A    byte
   446 				; OUT X,Y    two ATASCII codes of hex representation
   447 				;
   448
   449 2216			convha ; conv hex to atascii
   450 2216 48			        pha                    
   451 2217 4A			        lsr
   452 2218 4A			        lsr
   453 2219 4A			        lsr
   454 221A 4A			        lsr
   455 221B F8			        sed        
   456 221C 18			        clc
   457 221D 69 90		        adc #$90
   458 221F 69 40		        adc #$40
   459 2221 AA			        tax
   460 2222 68			        pla
   461 2223 29 0F		        and #$0f
   462 2225 18			        clc
   463 2226 69 90		        adc #$90
   464 2228 69 40		        adc #$40
   465 222A A8			        tay
   466 222B D8			        cld            
   467 222C 60			        rts
   468
   469 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   470 				; 
   471 				; Print Message
   472 				;
   473 				; IN    X,Y    low, high byte of address to message
   474 				;        A    length of message
   475
   476 222D			print ; print message
   477 222D 8D 48 03		        sta IOCB0.BUFLEN
   478 2230 A9 00		        lda #$00
   479 2232 8D 49 03		        sta IOCB0.BUFLEN+1
   480 2235 8E 44 03		        stx IOCB0.BUF
   481 2238 8C 45 03		        sty IOCB0.BUF+1
   482 223B A9 0B		        lda #XIO.PUT
   483 223D 8D 42 03		        sta IOCB0.CMD
   484 2240 A2 00		        ldx #$00
   485 2242 20 56 E4		        jsr CIOV
   486 2245 60			        rts
   487
   488 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   489 				; 
   490 				; Open File for Read
   491 				;
   492 				; IN    X,Y    low, high byte of address to file name
   493 				;
   494
   495 2246			open ; open file
   496 2246 8E 54 03		        stx IOCB1.BUF
   497 2249 8C 55 03		        sty IOCB1.BUF+1
   498 224C A9 04		        lda #XIO.READ
   499 224E 8D 5A 03		        sta IOCB1.AUX1
   500 2251 A9 00		        lda #$00
   501 2253 8D 5B 03		        sta IOCB1.AUX2
   502 2256 A9 03		        lda #XIO.OPEN
   503 2258 8D 52 03		        sta IOCB1.CMD
   504 225B A2 10		        ldx #$10
   505 225D 20 56 E4		        jsr CIOV
   506 2260 60			        rts
   507
   508 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   509 				; 
   510 				; Input from File
   511 				;
   512 				; IN    X,Y    low, high byte of address to buffer
   513 				;       A      length of buffer
   514
   515 2261			read ; open file
   516 2261 8E 54 03		        stx IOCB1.BUF
   517 2264 8C 55 03		        sty IOCB1.BUF+1
   518 2267 8D 58 03		        sta IOCB1.BUFLEN
   519 226A A9 00		        lda #$00
   520 226C 8D 59 03		        sta IOCB1.BUFLEN+1        
   521 226F A9 05		        lda #XIO.INPUT
   522 2271 8D 52 03		        sta IOCB1.CMD
   523 2274 A2 10		        ldx #$10
   524 2276 20 56 E4		        jsr CIOV
   525 2279 60			        rts
   526 				        
   527 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   528 				; 
   529 				; Close File
   530 				;
   531 227A A9 0C		close   lda #XIO.CLOSE
   532 227C 8D 52 03		        sta IOCB1.CMD
   533 227F A2 10		        ldx #$10
   534 2281 20 56 E4		        jsr CIOV
   535 2284 60			        rts
   536 				        
