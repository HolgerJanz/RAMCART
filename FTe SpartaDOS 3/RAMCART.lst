mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0304			DBUFLO      = $0304
    41 = 0305			DBUFHI      = $0305
    42 = 0308			DBYTLO      = $0308
    43 = 0309			DBYTHI      = $0309
    44 = 030A			DAUX1       = $030A
    45 = 030B			DAUX2       = $030B
    46 = 0340			IOCB0       = $0340
    47 				; 
    48 				; PIA
    49 				; 
    50 = D300			PORTA       = $D300
    51 = D301			PORTB       = $D301
    52 = D302			PACTL       = $D302
    53 = D303			PBCTL       = $D303
    54 				; 
    55 				; ANTIC
    56 				;
    57 = D400			DMACTL      = $D400 
    58 = D40A			WSYNC       = $D40A
    59 = D40E			NMIEN       = $D40E
    60 				; 
    61 				; ROM VECTORS
    62 				; 
    63 = E456			CIOV        = $E456
    64 				;
    65 				; SpartaDOS 
    66 				;
    67 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    68 = 003F			SD_LBUF        = $3F ; offset to line buffer
    69 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    70 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    71 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    72
    73 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74 				; 
    75 				; The!Cart programming information
    76 				; (c) 2013 Matthias Reichl
    77 				;
    78 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    79 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    80 				; 25AA020A). The memory is addressed using 16384 8k banks
    81 				; (64 8k banks when using RAM instead of flash).
    82 				; 
    83 				; The cartridge configuration registers are located at
    84 				; $D5A0-$D5A8. All registers are read/write unless noted
    85 				; otherwise. Unused bits shall be written as '0' and
    86 				; always read back as '0'.
    87 				; 
    88 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    89 				; flash bank 0, writes to flash are disabled.
    90 				; 
    91 				; Depending on the selected cartridge mode additional
    92 				; registers are enabled at $D5xx.
    93 				; 
    94 				; The primary bank register also serves as a base bank
    95 				; register for the various sub-modes.
    96 				; 
    97 				; The secondary bank register is only used in "flexi mode".
    98 				;
    99
   100 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101 				; 
   102 				; The!Cart Register (from-to,default)
   103 				;
   104
   105 				; Mode Select
   106 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   107 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   108 				; other than the ones listed here are reserved (and result
   109 				; in "cartridge off"):
   110 				; $00: off, cartridge disabled
   111 				; $01: 8k banks at $A000
   112 				; $02: AtariMax 1MBit / 128k
   113 				; $03: Atarimax 8MBit / 1MB
   114 				; $04: OSS M091
   115 				; $08: SDX 64k cart, $D5Ex banking
   116 				; $09: Diamond GOS 64k cart, $D5Dx banking
   117 				; $0A: Express 64k cart, $D57x banking
   118 				; $0C: Atrax 128k cart
   119 				; $0D: Williams 64k cart
   120 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   121 				; $21: standard 16k cart at $8000-$BFFF
   122 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   123 				; $23: Blizzard 16k
   124 				; $24: Sic!Cart 512k
   125 				; $28: 16k Mega cart
   126 				; $29: 32k Mega cart
   127 				; $2A: 64k Mega cart
   128 				; $2B: 128k Mega cart
   129 				; $2C: 256k Mega cart
   130 				; $2D: 512k Mega cart
   131 				; $2E: 1024k Mega cart
   132 				; $2F: 2048k Mega cart
   133 				; $30: 32k XEGS cart
   134 				; $31: 64k XEGS cart
   135 				; $32: 128k XEGS cart
   136 				; $33: 256k XEGS cart
   137 				; $34: 512k XEGS cart
   138 				; $35: 1024k XEGS cart
   139 				; $38: 32k SWXEGS cart
   140 				; $39: 64k SWXEGS cart
   141 				; $3A: 128k SWXEGS cart
   142 				; $3B: 256k SWXEGS cart
   143 				; $3C: 512k SWXEGS cart
   144 				; $3D: 1024k SWXEGS cart
   145 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   146 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   147 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   148 				                         ; separate 8k banks at $A000 and $8000
   149 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   150
   151 				; how to figure out that The!Cart is not active?
   152 				; If the address is not used then the XL returns $ff but
   153 				; the XE (and old 800) return $d5 (high byte of address,
   154 				; the value of the last bus cycle)
   155 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   156 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   157
   158 				; Mode Flash/RAM Select
   159 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   160 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   161 				; bit 1: primary bank source (0=flash, 1=RAM)
   162 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   163 				; bit 3: secondary bank source (0=flash, 1=RAM)
   164 = 0000			TCMOFR.FLASH = $00
   165 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   166 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   167
   168 				; Primary Bank
   169 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   170 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   171 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   172
   173 				; Secondary Bank 
   174 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   175 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   176 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   177
   178 				; SPI interface to EEPROM
   179 = D5A8			TCINEP = $d5a8
   180 				; bit 0: SPI CLK
   181 				; bit 1: SPI CS
   182 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   183
   184 				; configuration lock
   185 = D5AF			TCCOLO = $d5af
   186 				; Writing to this register disables "The!Cart" registers
   187 				; at $d5aX.
   188
   189
   190 				; macros
   191
   192 				; saves register: pushes bank register on stack
   193 				M_cart_push .macro
   194 				            lda TCMOSL
   195 				            pha
   196 				            lda TCMOFR
   197 				            pha
   198 				            lda TCPBRL
   199 				            pha
   200 				            lda TCPBRH
   201 				            pha
   202 				            lda TCPBEN
   203 				            pha
   204 				            .endm
   205
   206 				; restores register from stack: pops from stack
   207 				M_cart_pop  .macro
   208 				            pla                 
   209 				            sta TCPBEN          
   210 				            pla                 
   211 				            sta TCPBRH          
   212 				            pla                 
   213 				            sta TCPBRL          
   214 				            pla                 
   215 				            sta TCMOFR          
   216 				            pla                 
   217 				            sta TCMOSL          
   218 				            .endm
   219 				 
   220 				; set bank: number of bank in X, uses A
   221 				M_cart_set  .macro
   222 				; set new The!Cart mode
   223 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   224 				            sta TCMOSL          
   225 				            lda #TCMOFR.PBRAM       ; set to RAM
   226 				            sta TCMOFR
   227 				            txa
   228 				            asl   
   229 				            sta TCPBRL              ; get bank number from X
   230 				            lda #$00                     
   231 				            sta TCPBRH              ; set high to $00
   232 				            lda #$01
   233 				            sta TCPBEN              ; enable        
   234 				            .endm
   235 				;
   236 				; Start of code
   237 				;
   238 				            org $3000
   239 				            
   240 				; info message
   241 FFFF> 3000-3609> 20 13 +             jsr PRINT
   242 3003 54 68 65 21 52 61 +             .byte 'The!Ramdisk ver56 for The!Cart by hjx',$9B,$FF
   243
   244 				; check for The!Cart
   245 302A AD A6 D5		             lda TCMOSL
   246 302D C9 FF		             cmp #TCMOSL.XLLOCK
   247 302F F0 04		             beq NORAMDISK
   248 3031 C9 D5		             cmp #TCMOSL.XELOCK
   249 3033 D0 47		             bne RAMDISKINI
   250 3035			NORAMDISK
   251 				; no banks            
   252 3035 20 13 34		            jsr PRINT
   253 3038 20 20 45 72 72 6F +             .byte '  Error - The!Cart not found',$9B
   254 3055 20 20 55 73 65 20 +             .byte '  Use shift+return/esc in start menu',$9B,$FF
   255 307B 60			            rts
   256 				                        
   257 307C			RAMDISKINI
   258 				; check for parameter
   259 307C A0 0A		            ldy #SD_BUFOFF
   260 307E B1 0A		            lda (DOSVEC),Y
   261 3080 18			            clc
   262 3081 69 3F		            adc #SD_LBUF
   263 3083 A8			            tay
   264 3084 B1 0A		            lda (DOSVEC),Y
   265 3086 C9 9B		            cmp #$9B
   266 3088 D0 07		            bne PRSPARM
   267 				; no parameter -> error
   268 308A 4C E5 30		            jmp PARAMERR
   269
   270 				; jump for jsr to crunch name
   271 308D 4C FF FF		CRNAME      jmp $FFFF
   272
   273 3090 FF			CHKFRMT     .byte $FF
   274
   275 				; set crunch name address
   276 3091 A5 0A		PRSPARM     lda DOSVEC
   277 3093 18			            clc
   278 3094 69 03		            adc #SD_ZCRNAME
   279 3096 8D 8E 30		            sta CRNAME+1
   280 3099 A5 0B		            lda DOSVEC+1
   281 309B 69 00		            adc #$00
   282 309D 8D 8F 30		            sta CRNAME+2
   283 				            
   284 				; parameter parsing            
   285 				; get drive number SD_COMFNAM starts alway with Dx:
   286 30A0 20 8D 30		            jsr CRNAME
   287 30A3 D0 40		            bne PARAMERR
   288 30A5 A0 22		            ldy #SD_COMFNAM+1
   289 30A7 B1 0A		            lda (DOSVEC),Y
   290 30A9 29 0F		            and #$0F
   291 30AB 8D 09 36		            sta DRVNUM
   292 				; check options /N
   293 30AE 20 8D 30		            jsr CRNAME
   294 30B1 F0 2F		            beq PRSPAREND
   295 30B3 A0 24		            ldy #SD_COMFNAM+3
   296 30B5 B1 0A		            lda (DOSVEC),Y
   297 30B7 C9 2F		            cmp #'/'
   298 30B9 D0 2A		            bne PARAMERR
   299 30BB C8			PRSPARLOOP  iny
   300 30BC B1 0A		            lda (DOSVEC),Y
   301
   302 30BE C9 9B		            cmp #$9B         ; end of parameter
   303 30C0 F0 20		            beq PRSPAREND
   304 				            
   305 30C2 C9 41		            cmp #'A'         ; try to preserve
   306 30C4 D0 0B		            bne PRSPARNXT1
   307 30C6 20 7D 33		            jsr checkfrmt
   308 30C9 90 F0		            bcc PRSPARLOOP
   309 30CB EE 90 30		            inc CHKFRMT
   310 30CE 4C BB 30		            jmp PRSPARLOOP
   311
   312 30D1 C9 46		PRSPARNXT1  cmp #'F'         ; just format
   313 30D3 D0 03		            bne PRSPARNXT2
   314 30D5 4C 21 32		            jmp FRMTRD
   315
   316 30D8 C9 4E		PRSPARNXT2  cmp #'N'         ; format ?
   317 30DA D0 09		            bne PARAMERR
   318 				; check format at startup to preserve existing RAM disk            
   319 30DC EE 90 30		            inc CHKFRMT
   320
   321 30DF 4C BB 30		            jmp PRSPARLOOP
   322
   323 30E2 4C 97 31		PRSPAREND   jmp STARTINST
   324
   325 30E5 20 13 34		PARAMERR    jsr PRINT
   326 30E8 20 20 45 72 72 6F +             .byte '  Error - Wrong parameter',$9B
   327 3102 20 20 55 73 65 20 +             .byte '  Use RAMCART Dn: [/N|A|F]',$9B
   328 311D 20 20 20 20 4E 20 +             .byte '    N - driver no format',$9B
   329 3136 20 20 20 20 41 20 +             .byte '    A - driver auto format if needed',$9B
   330 315B 20 20 20 20 46 20 +             .byte '    F - format no driver',$9B
   331 3174 20 20 20 20 77 2F +             .byte '    w/o option driver and format',$9B,$FF
   332 3196 60			            rts
   333
   334 3197			STARTINST   
   335 3197 AD 09 36		            lda DRVNUM
   336 319A 18			            clc
   337 319B 69 30		            adc #'0'
   338 319D 8D C0 31		            sta ramDx
   339 31A0 38			            sec
   340 31A1 E9 01		            sbc #$01
   341 31A3 8D CB 31		            sta flashDy
   342 31A6 20 13 34		            jsr PRINT
   343 31A9 20 20 49 6E 73 74 +             .byte '  Install driver: RAM D'
   344 31C0 78 3A 2C 20 46 6C + ramDx       .byte 'x:, Flash D'
   345 31CB 79 3A 9B FF		flashDy     .byte 'y:',$9B,$FF
   346 				; set jsr to original DOSINI
   347 31CF A5 0C		            lda DOSINI
   348 31D1 8D 4A 34		            sta JSRDOSINI+1
   349 31D4 A5 0D		            lda DOSINI+1
   350 31D6 8D 4B 34		            sta JSRDOSINI+2
   351
   352 				; set MEMLO oldaddress, realloc
   353 31D9 AD E7 02		            lda MEMLO
   354 31DC 8D B3 37		            sta READSTADR
   355 31DF 8D B9 37		            sta CPYTOADR
   356 31E2 AD E8 02		            lda MEMLO+1
   357 31E5 8D B4 37		            sta READSTADR+1
   358 31E8 8D BA 37		            sta CPYTOADR+1
   359 				;
   360 				; start realloc
   361 				;
   362 31EB 20 EB 36		            jsr REASTART
   363
   364 				; set new DOSINI            
   365 31EE A9 49		REAL001     lda #<JSRDOSINI
   366 31F0 85 0C		            sta DOSINI
   367 31F2 A9 34		REAH001     lda #>JSRDOSINI
   368 31F4 85 0D		            sta DOSINI+1
   369 				; get SIO and patch for RAMDISK
   370 31F6 38			            sec
   371 31F7 A5 0A		            lda DOSVEC
   372 31F9 E9 0A		            sbc #SD_LSIO
   373 31FB 85 32		            sta BUFRLO
   374 31FD A5 0B		            lda DOSVEC+1
   375 31FF E9 00		            sbc #$00
   376 3201 85 33		            sta BUFRHI
   377 3203 A0 00		            ldy #$00
   378 3205 B1 32		            lda (BUFRLO),Y
   379 3207 8D 6F 34		REAA001     sta JMPSIO+1      ;realloc $33CA
   380 320A A9 57		REAL002     lda #<RAMDSIO
   381 320C 91 32		            sta (BUFRLO),Y
   382 320E C8			            iny
   383 320F B1 32		            lda (BUFRLO),Y
   384 3211 8D 70 34		REAA002     sta JMPSIO+2      ;realloc $33D4
   385 3214 A9 34		REAH002     lda #>RAMDSIO
   386 3216 91 32		            sta (BUFRLO),Y
   387 				; set MEMLO            
   388 3218 20 4C 34		REAA003     jsr SETMEMLO      ;realloc $33DB
   389 				; format if requested            
   390 321B 2C 90 30		            bit CHKFRMT
   391 321E 30 01		            bmi FRMTRD
   392 3220 60			            rts
   393
   394 				; format ramdisk
   395 3221 20 13 34		FRMTRD      jsr PRINT
   396 3224 20 20 46 6F 72 6D +             .byte '  Formatted 512k',$9B,$FF
   397
   398 3236 20 A3 33		            jsr cart_save
   399
   400 				; clear sector 0-3
   401 3239 A2 00		_loop03     ldx #$00
   402 323B 20 E9 33		            jsr cart_set
   403 323E A9 00		            lda #$00
   404 3240 A0 7F		            ldy #$7f
   405 3242 99 00 80		FRMTCLP03   sta $8000,Y
   406 3245 88			            dey
   407 3246 10 FA		            bpl FRMTCLP03
   408 3248 20 C2 33		            jsr cart_restore
   409 324B AD 43 32		            lda FRMTCLP03+1
   410 324E 18			            clc
   411 324F 69 80		            adc #$80
   412 3251 8D 43 32		            sta FRMTCLP03+1
   413 3254 AD 44 32		            lda FRMTCLP03+2
   414 3257 69 00		            adc #$00
   415 3259 8D 44 32		            sta FRMTCLP03+2
   416 325C A9 04		_loopcnt03  lda #$04
   417 325E CE 5D 32		            dec _loopcnt03+1
   418 3261 D0 D6		            bne _loop03
   419
   420 				; header loop            
   421 3263 A2 00		            ldx #$00
   422 3265 20 E9 33		            jsr cart_set
   423 3268 A0 2B		            ldy #$2b
   424 326A B9 3A 33		_loopheader lda RDHEAD,Y
   425 326D 99 80 80		            sta $8080,Y
   426 3270 88			            dey
   427 3271 10 F7		            bpl _loopheader
   428 3273 A9 60		            lda #$60    ; write RTS to second boot sector
   429 3275 8D 00 81		            sta $8100   ; see header jmp $3080
   430 3278 20 C2 33		            jsr cart_restore
   431
   432
   433 				; set sector 4-7 to $ff VTOV 512k = 4096 sectors
   434 				; = 4 VTOC sectors
   435 327B A2 00		_loop47     ldx #$00
   436 327D 20 E9 33		            jsr cart_set
   437 3280 A9 FF		            lda #$ff
   438 3282 A0 7F		            ldy #$7f
   439 3284 99 00 82		FRMTCLP47   sta $8200,Y
   440 3287 88			            dey
   441 3288 10 FA		            bpl FRMTCLP47
   442 328A 20 C2 33		            jsr cart_restore
   443 328D AD 85 32		            lda FRMTCLP47+1
   444 3290 18			            clc
   445 3291 69 80		            adc #$80
   446 3293 8D 85 32		            sta FRMTCLP47+1
   447 3296 AD 86 32		            lda FRMTCLP47+2
   448 3299 69 00		            adc #$00
   449 329B 8D 86 32		            sta FRMTCLP47+2
   450 329E A9 04		_loopcnt47  lda #$04
   451 32A0 CE 9F 32		            dec _loopcnt47+1
   452 32A3 D0 D6		            bne _loop47
   453
   454 				; clear sector 8-9 
   455 32A5 A2 00		_loop89     ldx #$00
   456 32A7 20 E9 33		            jsr cart_set
   457 32AA A9 00		            lda #$00
   458 32AC A0 7F		            ldy #$7f
   459 32AE 99 00 84		FRMTCLP89   sta $8400,Y
   460 32B1 88			            dey
   461 32B2 10 FA		            bpl FRMTCLP89
   462 32B4 20 C2 33		            jsr cart_restore
   463 32B7 AD AF 32		            lda FRMTCLP89+1
   464 32BA 18			            clc
   465 32BB 69 80		            adc #$80
   466 32BD 8D AF 32		            sta FRMTCLP89+1
   467 32C0 AD B0 32		            lda FRMTCLP89+2
   468 32C3 69 00		            adc #$00
   469 32C5 8D B0 32		            sta FRMTCLP89+2
   470 32C8 A9 02		_loopcnt89  lda #$02
   471 32CA CE C9 32		            dec _loopcnt89+1
   472 32CD D0 D6		            bne _loop89
   473
   474 32CF A2 00		            ldx #$00
   475 32D1 20 E9 33		            jsr cart_set
   476 				; write magic for Ebiguy
   477 32D4 AD 32 33		            lda MAGIC
   478 32D7 8D 00 80		            sta $8000
   479 				            
   480 32DA AD 33 33		            lda MAGIC+1
   481 32DD 8D 01 80		            sta $8000+1
   482 				            
   483 32E0 AD 34 33		            lda MAGIC+2
   484 32E3 8D 02 80		            sta $8000+2
   485 				            
   486 32E6 AD 35 33		            lda MAGIC+3
   487 32E9 8D 03 80		            sta $8000+3
   488 				            
   489 32EC AD 36 33		            lda MAGIC+4
   490 32EF 8D 04 80		            sta $8000+4
   491 				            
   492 32F2 AD 37 33		            lda MAGIC+5
   493 32F5 8D 05 80		            sta $8000+5
   494 				            
   495 32F8 AD 38 33		            lda MAGIC+6
   496 32FB 8D 06 80		            sta $8000+6
   497 				            
   498 32FE AD 39 33		            lda MAGIC+7
   499 3301 8D 07 80		            sta $8000+7
   500 				; mark used sectors
   501 3304 A9 00		            lda #$00
   502 3306 8D 00 82		            sta $8200   ; sector 0-7
   503 3309 A9 3F		            lda #$3f
   504 330B 8D 01 82		            sta $8201   ; sector 8-9
   505 				;            lda #$fe
   506 				;            sta $83ff   ; sector 4096 does not exit
   507 				; set sector map for MAIN
   508 330E A9 00		            lda #$00    ; two words $0000 (first and last)
   509 3310 8D 00 84		            sta $8400
   510 3313 8D 01 84		            sta $8401
   511 3316 8D 02 84		            sta $8402
   512 3319 8D 03 84		            sta $8403
   513 331C A9 09		            lda #$09    ;  and third $0009 start of main
   514 331E 8D 04 84		            sta $8404
   515 				; set MAIN directory            
   516 3321 A2 00		            ldx #$00
   517 3323 BD 66 33		_loopmain   lda RDMAIN,x
   518 3326 9D 80 84		            sta $8480,x
   519 3329 E8			            inx
   520 332A E0 17		            cpx #$17
   521 332C D0 F5		            bne _loopmain
   522 332E 20 C2 33		            jsr cart_restore
   523
   524 				; finished
   525 3331 60			            rts
   526 				            
   527 3332 34 23 32 21 2D 24 + MAGIC       .byte $34,$23,$32,$21,$2D,$24,$33,$2B
   528 				            
   529 				; load boot sector to $3000 start $3080 and RTS ($60)
   530 333A 00			RDHEAD      .byte $00 ; Usually 0. Some formatting tools put a $53 (='S) for SD here.
   531 333B 03			            .byte $03 ; Number of sectors to boot.
   532 333C 00 30		            .byte $00,$30 ; Address where the boot sectors are loaded to
   533 333E E0 07		            .byte $E0,$07 ; This address is copied to DOSINI
   534 3340 4C 80 30		            .byte $4c,$80,$30 ; After boot jump here: jmp $3080 (just RTS)
   535 3343 08 00		            .byte $08,$00 ; Sector number of the first sector map of the MAIN directory
   536 3345 00 10		            .word $1000 ; total sector count
   537 3347 F6 0F		            .word $0ff6 ; free sector count
   538 3349 04			            .byte $04 ; Number of bit map sectors on the disk
   539 334A 04 00		            .byte $04,$00 ; Sector number of the first bit map sector
   540 334C 28 00		            .byte $28,$00 ; Sector number to begin the file data sector allocation search
   541 334E 0A 00		            .byte $0A,$00 ; Sector number to begin the directory data sector allocation search
   542 3350 43 41 52 54 35 31 +             .byte 'CART512K' ; Volume name, 8 chars
   543 3358 01			            .byte $01 ; Tracks on disk (1 for ramdisks and HDs)
   544 3359 80			            .byte $80 ; Sector size ($80=128,$00=256,$01=512)
   545 335A 20			            .byte $20 ; File system version ($20=SD1.1-4.2 version 2.0, $21=Sd4.4> version 2.1) 
   546 335B 00 00 00 00 00	            .byte $00,$00,$00,$00,$00 ; reserved - no known use
   547 3360 00			            .byte $00 ; Volume sequence number
   548 3361 00			            .byte $00 ; Volume random number
   549 3362 00 00		            .byte $00,$00 ; Sector number of the first sector map of the file to be loaded when the disk is booted
   550 3364 00			            .byte $00 ; Lock flag ($ff=locked, $00=unlocked)
   551 3365 00			            .byte $00
   552
   553 3366 28			RDMAIN      .byte $28 ; Bits 7-0: OpenWrite,-,SubDir,Del,Used,Arc,Hid,Prot
   554 3367 00 00		            .word $0000 ; First sector map of parent directory (MAIN=0)
   555 3369 17 00 00		            .byte $17,$00,$00 ; length of directory in bytes (always times 23 bytes)
   556 336C 4D 41 49 4E 20 20 + RDMAINNAME  .byte 'MAIN       ' ; Name 11 chars
   557 3377 0B 07 47		            .byte $0b,$07,$47 ; Date DD/MM/YY
   558 337A 0B 0B 0B		            .byte $0b,$0b,$0b ; Time HH:MM:SS
   559
   560 				; check preformat
   561 337D			checkfrmt
   562 337D 20 A3 33		            jsr cart_save
   563 3380 A2 00		            ldx #$00
   564 3382 20 E9 33		            jsr cart_set
   565
   566 3385 BD 6C 33		_nxtcharv   lda RDMAINNAME,x    ; check volume name
   567 3388 DD 86 84		            cmp $8486,x
   568 338B D0 0A		            bne _nofrmt
   569 338D E8			            inx
   570 338E E0 0B		            cpx #$0b
   571 3390 D0 F3		            bne _nxtcharv
   572 				            
   573 3392 20 C2 33		            jsr cart_restore
   574 3395 38			            sec
   575 3396 60			            rts
   576 				            
   577 3397 20 C2 33		_nofrmt     jsr cart_restore
   578 339A 18			            clc
   579 339B 60			            rts
   580
   581 				; wait for sync            
   582 339C A5 14		WAITSYNC    lda RTCLOK+2
   583 339E C5 14		WAITLOOP    cmp RTCLOK+2
   584 33A0 F0 FC		            beq WAITLOOP
   585 33A2 60			            rts
   586
   587 33A3			cart_save
   588 33A3 AD A6 D5		            lda TCMOSL
   589 33A6 8D 0E 34		            sta _tcmosl
   590 33A9 AD A7 D5		            lda TCMOFR
   591 33AC 8D 0F 34		            sta _tcmofr
   592 33AF AD A0 D5		            lda TCPBRL
   593 33B2 8D 10 34		            sta _tcpbrl
   594 33B5 AD A1 D5		            lda TCPBRH
   595 33B8 8D 11 34		            sta _tcpbrh
   596 33BB AD A2 D5		            lda TCPBEN
   597 33BE 8D 12 34		            sta _tcpben
   598
   599 33C1 60			            rts
   600
   601 33C2			cart_restore
   602 33C2 AD 0E 34		            lda _tcmosl
   603 33C5 8D A6 D5		            sta TCMOSL
   604 33C8 AD 0F 34		            lda _tcmofr
   605 33CB 8D A7 D5		            sta TCMOFR
   606 33CE AD 10 34		            lda _tcpbrl
   607 33D1 8D A0 D5		            sta TCPBRL
   608 33D4 AD 11 34		            lda _tcpbrh
   609 33D7 8D A1 D5		            sta TCPBRH
   610 33DA AD 12 34		            lda _tcpben
   611 33DD 8D A2 D5		            sta TCPBEN
   612
   613 33E0 A9 E0		            lda #$e0          ; enable interrupts
   614 33E2 8D 0E D4		            sta NMIEN
   615 33E5 58			            cli
   616 33E6 C6 42		            dec CRITIC 
   617
   618 33E8 60			            rts
   619
   620 33E9			cart_set
   621 33E9 E6 42		            inc CRITIC 
   622 33EB 20 9C 33		            jsr WAITSYNC        ; wait for vblank
   623 33EE 78			            sei                 ; disable interrupt
   624 33EF A9 00		            lda #$00
   625 33F1 8D 0E D4		            sta NMIEN
   626
   627 33F4 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   628 33F6 8D A6 D5		            sta TCMOSL          
   629 33F9 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   630 33FB 8D A7 D5		            sta TCMOFR
   631 33FE 8A			            txa
   632 33FF 0A			            asl   
   633 3400 8D A0 D5		            sta TCPBRL              ; get bank number from X
   634 3403 A9 00		            lda #$00                     
   635 3405 8D A1 D5		            sta TCPBRH              ; set high to $00
   636 3408 A9 01		            lda #$01
   637 340A 8D A2 D5		            sta TCPBEN              ; enable        
   638
   639 340D 60			            rts            
   640
   641 340E 00			_tcmosl     .byte $00
   642 340F 00			_tcmofr     .byte $00
   643 3410 00			_tcpbrl     .byte $00
   644 3411 00			_tcpbrh     .byte $00
   645 3412 00			_tcpben     .byte $00
   646
   647 				; print subroutine            
   648 3413 68			PRINT       pla
   649 3414 8D 24 34		            sta PRINTITER+1
   650 3417 68			            pla
   651 3418 8D 25 34		            sta PRINTITER+2
   652 341B EE 24 34		PRINTLOOP   inc PRINTITER+1
   653 341E D0 03		            bne PRINTITER
   654 3420 EE 25 34		            inc PRINTITER+2
   655 3423 AD FF FF		PRINTITER   lda $FFFF
   656 3426 C9 FF		            cmp #$FF
   657 3428 F0 06		            beq PRINTEND
   658 342A 20 39 34		            jsr CIOPUTCHR
   659 342D 4C 1B 34		            jmp PRINTLOOP
   660 3430 AD 25 34		PRINTEND    lda PRINTITER+2
   661 3433 48			            pha
   662 3434 AD 24 34		            lda PRINTITER+1
   663 3437 48			            pha
   664 3438 60			            rts
   665 				; call cio put char subroutine
   666 3439 A2 00		CIOPUTCHR   ldx #$00
   667 343B 8E 48 03		            stx IOCB0+ICBLL
   668 343E 8E 49 03		            stx IOCB0+ICBLH
   669 3441 A0 0B		            ldy #$0B
   670 3443 8C 42 03		            sty IOCB0+ICCOM
   671 3446 4C 56 E4		            jmp CIOV
   672
   673
   674
   675 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   676 				;;; BEGIN OF REALLOC BLOCK
   677 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   678
   679 				; to realloc routines
   680 				; DOSINI set MEMLO at reset
   681 3449			REABEGIN
   682
   683 3449 20 00 00		JSRDOSINI   jsr $0000
   684 344C			SETMEMLO    
   685 344C A9 8A		REAL003     lda #<REAEND
   686 344E 8D E7 02		            sta MEMLO
   687 3451 A9 36		REAH003     lda #>REAEND
   688 3453 8D E8 02		            sta MEMLO+1
   689 3456 60			            rts
   690
   691 				; new DOSVEC for RAMDISK device
   692 3457 AD 00 03		RAMDSIO     lda DDEVIC
   693 345A C9 31		            cmp #$31
   694 345C D0 10		            bne JMPSIO
   695 345E AD 09 36		REAA004     lda DRVNUM  ; check drive number for RAM
   696 3461 CD 01 03		            cmp DUNIT
   697 3464 F0 0B		            beq NEWSIOGO
   698 3466 AA			            tax         ; check drive number for Flash
   699 3467 CA			            dex
   700 3468 8A			            txa
   701 3469 CD 01 03		            cmp DUNIT
   702 346C F0 03		            beq NEWSIOGO
   703 346E 4C 00 00		JMPSIO      jmp $0000
   704
   705 				; set buffer address
   706 3471 AD 04 03		NEWSIOGO    lda DBUFLO
   707 3474 85 34		            sta BFENLO
   708 3476 AD 05 03		            lda DBUFHI
   709 3479 85 35		            sta BFENHI
   710 				; load commad byte            
   711 347B AD 02 03		            lda DCOMND
   712 				; command STATUS REQUEST
   713 347E C9 53		            cmp #$53 
   714 3480 D0 1B		            bne NEXT1
   715 3482 AD 04 36		REAA009     lda CONFSECSIZ
   716 3485 4A			            lsr
   717 3486 4A			            lsr
   718 3487 49 30		            eor #$30
   719 3489 AC 00 36		REAA010     ldy L36BB
   720 348C C0 1A		            cpy #$1A
   721 348E D0 02		            bne L35B4
   722 3490 09 80		            ora #$80
   723 3492 A0 00		L35B4       ldy #$00
   724 3494 91 34		            sta (BFENLO),Y
   725 3496 C8			            iny
   726 3497 A9 FF		            lda #$FF
   727 3499 91 34		            sta (BFENLO),Y
   728 349B 30 24		            bmi JMPSIOEND
   729 				            
   730 				; command RETURN CONFIGURATION            
   731 349D C9 4E		NEXT1       cmp #$4E
   732 349F D0 0C		            bne NEXT2
   733 34A1 A0 0B		            ldy #$0B            ; 12 bytes
   734 34A3			RETCNFLOOP
   735 34A3 B9 FD 35		REAA011     lda CONFBUF,Y
   736 34A6 91 34		            sta (BFENLO),Y
   737 34A8 88			            dey
   738 34A9 10 F8		            bpl RETCNFLOOP
   739 34AB 30 14		            bmi JMPSIOEND
   740
   741 				; command SET CONFIGURATION
   742 34AD C9 4F		NEXT2       cmp #$4F
   743 34AF D0 13		            bne NEXT3
   744 34B1 A0 07		            ldy #$07
   745 34B3 B1 34		            lda (BFENLO),Y
   746 34B5 F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   747 34B7 8D 04 36		REAA012     sta CONFSECSIZ
   748 34BA A0 03		            ldy #$03
   749 34BC B1 34		            lda (BFENLO),Y
   750 34BE 8D 00 36		REAA013     sta L36BB
   751
   752 34C1			JMPSIOEND
   753 34C1 4C F6 35		REAA014     jmp RDSIOEND
   754
   755 				; command FORMAT DISK
   756 34C4 C9 21		NEXT3       cmp #$21
   757 34C6 D0 0B		            bne NEXT4
   758 34C8 A0 00		SIOFRMT     ldy #$00
   759 34CA A9 FF		            lda #$FF
   760 34CC 91 34		            sta (BFENLO),Y
   761 34CE C8			            iny
   762 34CF 91 34		            sta (BFENLO),Y
   763 34D1 D0 EE		            bne JMPSIOEND
   764
   765 				; command FORMAT DISK ENHANCED
   766 34D3 C9 22		NEXT4       cmp #$22
   767 34D5 D0 0C		            bne NEXT5
   768 34D7 A9 1A		            lda #$1A
   769 34D9 8D 00 36		REAA015     sta L36BB
   770 34DC A9 80		            lda #$80
   771 34DE 8D 04 36		REAA016     sta CONFSECSIZ
   772 34E1 D0 E5		            bne SIOFRMT
   773 				            
   774 				; command PUT/GET SECTOR 
   775 34E3 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   776 34E5 F0 0B		            beq PUTGETSEC
   777 34E7 C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   778 34E9 F0 07		            beq PUTGETSEC
   779 34EB C9 50		            cmp #$50            ; command PUT SECTOR
   780 34ED F0 03		            beq PUTGETSEC
   781 34EF 4C F9 35		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   782 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   783 				; buffer address and calc byte count
   784 34F2 A9 00		PUTGETSEC   lda #$00
   785 34F4 85 32		            sta BUFRLO
   786 34F6 AD 0A 03		            lda DAUX1
   787 34F9 85 33		            sta BUFRHI
   788 34FB AD 0B 03		            lda DAUX2
   789 34FE 06 33		            asl BUFRHI
   790 3500 2A			            rol
   791 3501 AA			            tax                 ; set X with memory bank number
   792 3502 A5 33		            lda BUFRHI
   793 3504 4A			            lsr
   794 3505 4A			            lsr
   795 3506 66 32		            ror BUFRLO
   796 3508 09 80		            ora #$80
   797 350A 85 33		            sta BUFRHI
   798 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   799 				; set buffer address in copy loops
   800 350C A5 32		            lda BUFRLO
   801 350E 8D A1 35		REAA021     sta GETADRLP+1
   802 3511 8D D5 35		REAA022     sta PUTADRLP+1
   803 3514 A5 33		            lda BUFRHI
   804 3516 8D A2 35		REAA023     sta GETADRLP+2
   805 3519 8D D6 35		REAA024     sta PUTADRLP+2            
   806 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   807 				; check for GET
   808 351C AD 02 03		            lda DCOMND
   809 351F C9 52		            cmp #$52
   810 3521 F0 0A		            beq L3656           ; is GET
   811 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   812 				; PUT: put user data to buffer            
   813 3523 A0 7F		            ldy #$7F
   814 3525 B1 34		L364B       lda (BFENLO),Y
   815 3527 99 0A 36		REAA005     sta BUFFERXX1,Y
   816 352A 88			            dey
   817 352B 10 F8		            bpl L364B
   818 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   819 				; check if bank number is in range            
   820 352D E0 20		L3656       cpx #$20            ; check bank number
   821 352F B0 BE		            bcs REAA020         ; intermediate jmp to NAK
   822 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   823 3531			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3531 AD A6 D5		            lda TCMOSL
     2 3534 48			            pha
     3 3535 AD A7 D5		            lda TCMOFR
     4 3538 48			            pha
     5 3539 AD A0 D5		            lda TCPBRL
     6 353C 48			            pha
     7 353D AD A1 D5		            lda TCPBRH
     8 3540 48			            pha
     9 3541 AD A2 D5		            lda TCPBEN
    10 3544 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   824 3545 E6 42		            inc CRITIC
   825 3547 A5 14		            lda RTCLOK+2
   826 3549 C5 14		WAITLOOP2   cmp RTCLOK+2
   827 354B F0 FC		            beq WAITLOOP2
   828 354D 78			            sei                 ; disable interrupts
   829 354E A9 00		            lda #$00
   830 3550 8D 0E D4		            sta NMIEN           ; 40 cycles
   831 				; set bank, number in X
   832 3553 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   833 3555 8D A6 D5		            sta TCMOSL          
   834
   835 3558 AD 09 36		REAA025     lda DRVNUM  ; check drive number for RAM
   836 355B CD 01 03		            cmp DUNIT
   837 355E F0 23		            beq setTCram
   838
   839 3560 A9 00		setTCflash  lda #TCMOFR.FLASH       ; set to FLASH (start $3fc0)
   840 3562 8D A7 D5		            sta TCMOFR
   841 3565 A9 C0		            lda #$c0
   842 3567 8D A0 D5		            sta TCPBRL
   843 356A A9 3F		            lda #$3f
   844 356C 8D A1 D5		            sta TCPBRH
   845 356F 8A			            txa
   846 3570 0A			            asl
   847 3571 18			            clc   
   848 3572 6D A0 D5		            adc TCPBRL              ; get bank number from X
   849 3575 8D A0 D5		            sta TCPBRL
   850 3578 AD A1 D5		            lda TCPBRH
   851 357B 69 00		            adc #$00                     
   852 357D 8D A1 D5		            sta TCPBRH              ; set high to $00
   853 3580 18			            clc
   854 3581 90 0F		            bcc setTcend
   855
   856 3583 A9 03		setTCram    lda #TCMOFR.PBRAM       ; set to RAM
   857 3585 8D A7 D5		            sta TCMOFR
   858 3588 8A			            txa
   859 3589 0A			            asl   
   860 358A 8D A0 D5		            sta TCPBRL              ; get bank number from X
   861 358D A9 00		            lda #$00                     
   862 358F 8D A1 D5		            sta TCPBRH              ; set high to $00
   863
   864 3592 A9 01		setTCend    lda #$01
   865 3594 8D A2 D5		            sta TCPBEN              ; enable        
   866 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   867 				; check for PUT
   868 3597 A0 7F		            ldy #$7F            ; 9 cycles
   869 3599 AD 02 03		            lda DCOMND
   870 359C C9 52		            cmp #$52
   871 359E D0 31		            bne L369B           ; is PUT
   872 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   873 				; GET: read data to buffer
   874 35A0			L367B
   875 35A0 B9 FF FF		GETADRLP    lda $FFFF,Y         ; 5 cycles +
   876 35A3 99 0A 36		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
   877 35A6 88			            dey                 ; 2 cycles +
   878 35A7 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2048
   879 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   880 				; restore bank for write to user buffer
   881 35A9			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 35A9 68			            pla                 
     2 35AA 8D A2 D5		            sta TCPBEN          
     3 35AD 68			            pla                 
     4 35AE 8D A1 D5		            sta TCPBRH          
     5 35B1 68			            pla                 
     6 35B2 8D A0 D5		            sta TCPBRL          
     7 35B5 68			            pla                 
     8 35B6 8D A7 D5		            sta TCMOFR          
     9 35B9 68			            pla                 
    10 35BA 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   882 35BD A9 E0		            lda #$e0            ; enable interrupts
   883 35BF 8D 0E D4		            sta NMIEN
   884 35C2 58			            cli
   885 35C3 C6 42		            dec CRITIC          ; 54 cycles
   886 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
   887 				; GET: write buffer to user data            
   888 35C5 A0 7F		            ldy #$7F
   889 35C7			L368E
   890 35C7 B9 0A 36		REAA008     lda BUFFERXX1,Y
   891 35CA 91 34		            sta (BFENLO),Y
   892 35CC 88			            dey
   893 35CD 10 F8		            bpl L368E
   894 35CF 30 25		            bmi RDSIOEND
   895 				            
   896 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   897 				; PUT: buffer data to sector
   898 35D1			L369B
   899 35D1 B9 0A 36		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
   900 35D4 99 FF FF		PUTADRLP    sta $FFFF,Y       ; 5 cycles
   901 35D7 88			            dey               ; 2 cycles +              
   902 35D8 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2048 
   903 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   904 				; restore register
   905 35DA			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 35DA 68			            pla                 
     2 35DB 8D A2 D5		            sta TCPBEN          
     3 35DE 68			            pla                 
     4 35DF 8D A1 D5		            sta TCPBRH          
     5 35E2 68			            pla                 
     6 35E3 8D A0 D5		            sta TCPBRL          
     7 35E6 68			            pla                 
     8 35E7 8D A7 D5		            sta TCMOFR          
     9 35EA 68			            pla                 
    10 35EB 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   906 35EE A9 E0		            lda #$e0            ; enable interrupts
   907 35F0 8D 0E D4		            sta NMIEN
   908 35F3 58			            cli
   909 35F4 C6 42		            dec CRITIC          ; 54 cycles
   910 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   911 				; set rc            
   912 35F6 A0 01		RDSIOEND    ldy #$01
   913 35F8 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   914
   915 35FB 98			            tya                 ; set RC
   916 35FC 60			            rts
   917 				            
   918 				; drive configuration buffer
   919 35FD 28 01 12		CONFBUF     .byte $28,$01,$12
   920 3600 00			L36BB       .byte $00
   921 3601 00 00 00		            .byte $00,$00,$00
   922 3604 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
   923 3605 FF 00 00 00		            .byte $FF,$00,$00,$00
   924
   925 3609 01			DRVNUM      .byte $01
   926 				; $80 for 128Bytes ($100 for 256Bytes)
   927 360A			BUFFERXX1
   928 				;            org $37E6
   929 = 368A			REAEND      = BUFFERXX1 + $80
   930 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   931 				;;; END OF REALLOC BLOCK
   932 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   933
   934
   935 				; $20 Bytes
   936 = 368A			BNKSAVBUF   = REAEND
   937
   938 				; $20 bytes
   939 				;            org $3806
   940 				;BNKSAVBUF2  = BNKSAVBUF + $20
   941
   942 				 
   943 				;           org $3826
   944 360A			            org BNKSAVBUF + $20
   945 				; realloc whole addresses
   946 36AA-37BC> 08 32		REATAB      .word REAA001+1 ;$33CA
   947 36AC 12 32		            .word REAA002+1 ;$33D4
   948 36AE 19 32		            .word REAA003+1 ;$33DB
   949 36B0 5F 34		            .word REAA004+1 ;$3583
   950 36B2 28 35		            .word REAA005+1 ;$364E
   951 36B4 A4 35		            .word REAA006+1 ;$367E
   952 36B6 D2 35		            .word REAA007+1 ;$369C
   953 36B8 C8 35		            .word REAA008+1 ;$368F
   954 36BA 83 34		            .word REAA009+1 ;$35A5
   955 36BC 8A 34		            .word REAA010+1 ;$35AC
   956 36BE A4 34		            .word REAA011+1 ;$35C6
   957 36C0 B8 34		            .word REAA012+1 ;$35D8
   958 36C2 BF 34		            .word REAA013+1 ;$35DF
   959 36C4 C2 34		            .word REAA014+1 ;$35E2
   960 36C6 DA 34		            .word REAA015+1 ;$35FA
   961 36C8 DF 34		            .word REAA016+1 ;$35FF
   962 36CA F0 34		            .word REAA020+1 ;$3610
   963 36CC 0F 35		            .word REAA021+1
   964 36CE 12 35		            .word REAA022+1
   965 36D0 17 35		            .word REAA023+1
   966 36D2 1A 35		            .word REAA024+1
   967 36D4 59 35		            .word REAA025+1
   968 36D6 00 00		            .word $0000
   969 				 
   970 				; realloc address low byte           
   971 36D8 EF 31		            .word REAL001+1 ;$33B1
   972 36DA 0B 32		            .word REAL002+1 ;$33CD
   973 36DC 4D 34		            .word REAL003+1 ;$356E
   974 36DE 00 00		            .word $0000
   975 				; realloc address high byte (address to high byte and value of low byte)
   976 36E0 F3 31		            .word REAH001+1  ;$33B5
   977 36E2 49			            .byte <JSRDOSINI ;$6A
   978 				                        
   979 36E3 15 32		            .word REAH002+1 ;$33D7
   980 36E5 57			            .byte <RAMDSIO  ;$78
   981 				            
   982 36E6 52 34		            .word REAH003+1  ;$3573
   983 36E8 8A			            .byte <REAEND    ;$E6
   984 				            
   985
   986 36E9 00 00		            .word $0000
   987 				            
   988 36EB A9 00		REASTART    lda #$00
   989 36ED 8D BD 37		            sta REALOOPCNT
   990 36F0 AE BD 37		REALOOP     ldx REALOOPCNT
   991 36F3 BD AF 37		            lda REATABADR,X
   992 36F6 8D 95 37		            sta L3910+1
   993 36F9 BD B0 37		            lda REATABADR+1,X
   994 36FC 8D 96 37		            sta L3910+2
   995 36FF 0D 95 37		            ora L3910+1
   996 3702 D0 01		            bne L3881
   997 3704 60			            rts
   998 				            
   999 3705 38			L3881       sec
  1000 3706 BD B3 37		            lda READSTADR,X
  1001 3709 FD B1 37		            sbc REASRCADR,X
  1002 370C 8D BE 37		            sta READIFLO
  1003 370F BD B4 37		            lda READSTADR+1,X
  1004 3712 FD B2 37		            sbc REASRCADR+1,X
  1005 3715 8D BF 37		            sta READIFHI
  1006 				            
  1007 3718 20 A0 37		L3894       jsr L391C
  1008 371B F0 13		            beq L38AC
  1009 371D B1 D7		            lda ($D7),Y
  1010 371F 18			            clc
  1011 3720 6D BE 37		            adc READIFLO
  1012 3723 91 D7		            sta ($D7),Y
  1013 3725 C8			            iny
  1014 3726 B1 D7		            lda ($D7),Y
  1015 3728 6D BF 37		            adc READIFHI
  1016 372B 91 D7		            sta ($D7),Y
  1017 372D 4C 18 37		            jmp L3894
  1018 3730 20 A0 37		L38AC       jsr L391C
  1019 3733 F0 0B		            beq L38BC
  1020 3735 B1 D7		            lda ($D7),Y
  1021 3737 18			            clc
  1022 3738 6D BE 37		            adc READIFLO
  1023 373B 91 D7		            sta ($D7),Y
  1024 373D 4C 30 37		            jmp L38AC
  1025 3740 20 A0 37		L38BC       jsr L391C
  1026 3743 F0 11		            beq L38D2
  1027 3745 20 94 37		            jsr L3910
  1028 3748 18			            clc
  1029 3749 6D BE 37		            adc READIFLO
  1030 374C B1 D7		            lda ($D7),Y
  1031 374E 6D BF 37		            adc READIFHI
  1032 3751 91 D7		            sta ($D7),Y
  1033 3753 4C 40 37		            jmp L38BC
  1034 3756 AE BD 37		L38D2       ldx REALOOPCNT
  1035
  1036 3759 BD B5 37		            lda CPYFROMADR,X
  1037 375C 8D 77 37		            sta L38F2+1
  1038 375F BD B6 37		            lda CPYFROMADR+1,X
  1039 3762 8D 78 37		            sta L38F2+2
  1040
  1041 3765 BD B9 37		            lda CPYTOADR,X
  1042 3768 8D 7A 37		            sta L38F2+4
  1043 376B BD BA 37		            lda CPYTOADR+1,X
  1044 376E 8D 7B 37		            sta L38F2+5
  1045
  1046 3771 BC B8 37		            ldy CPYLENGTH+1,X
  1047 3774 A2 00		            ldx #$00
  1048 3776 BD FF FF		L38F2       lda $FFFF,X
  1049 3779 9D FF FF		            sta $FFFF,X
  1050 377C E8			            inx
  1051 377D D0 F7		            bne L38F2
  1052 377F EE 78 37		            inc L38F2+2
  1053 3782 EE 7B 37		            inc L38F2+5
  1054 3785 88			            dey
  1055 3786 10 EE		            bpl L38F2
  1056 3788 AD BD 37		            lda REALOOPCNT
  1057 378B 18			            clc
  1058 378C 69 0C		            adc #$0C
  1059 378E 8D BD 37		            sta REALOOPCNT
  1060 3791 4C F0 36		            jmp REALOOP
  1061 				            
  1062 3794 AD FF FF		L3910       lda $FFFF
  1063 3797 EE 95 37		            inc L3910+1
  1064 379A D0 03		            bne L391B
  1065 379C EE 96 37		            inc L3910+2
  1066 379F 60			L391B       rts
  1067
  1068 37A0 20 94 37		L391C       jsr L3910
  1069 37A3 85 D7		            sta $D7
  1070 37A5 20 94 37		            jsr L3910
  1071 37A8 A0 00		            ldy #$00
  1072 37AA 85 D8		            sta $D8
  1073 37AC 05 D7		            ora $D7
  1074 37AE 60			            rts
  1075
  1076 				; realloc code pointer
  1077 37AF AA 36		REATABADR   .word REATAB
  1078 37B1 49 34		REASRCADR   .word REABEGIN
  1079 37B3 FF FF		READSTADR   .word $FFFF
  1080 				; copy code pointer
  1081 37B5 49 34		CPYFROMADR  .word REABEGIN
  1082 37B7 41 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1083 37B9 FF FF		CPYTOADR    .word $FFFF
  1084 37BB 00 00		            .word $0000
  1085 				            
  1086 				; $01 byte
  1087 37BD			REALOOPCNT  ;= $392B
  1088 = 37BE			READIFLO   = REALOOPCNT+1
  1089 = 37BF			READIFHI   = READIFLO+1
  1090
  1091
  1092 				         
