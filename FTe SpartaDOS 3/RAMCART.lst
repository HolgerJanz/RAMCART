mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0303			DSTATS		= $0303
    41 = 0304			DBUFLO      = $0304
    42 = 0305			DBUFHI      = $0305
    43 = 0308			DBYTLO      = $0308
    44 = 0309			DBYTHI      = $0309
    45 = 030A			DAUX1       = $030A
    46 = 030B			DAUX2       = $030B
    47 = 0340			IOCB0       = $0340
    48 				; 
    49 				; PIA
    50 				; 
    51 = D300			PORTA       = $D300
    52 = D301			PORTB       = $D301
    53 = D302			PACTL       = $D302
    54 = D303			PBCTL       = $D303
    55 				; 
    56 				; ANTIC
    57 				;
    58 = D400			DMACTL      = $D400 
    59 = D40A			WSYNC       = $D40A
    60 = D40E			NMIEN       = $D40E
    61 				; 
    62 				; ROM VECTORS
    63 				; 
    64 = E456			CIOV        = $E456
    65 				;
    66 				; SpartaDOS 
    67 				;
    68 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    69 = 003F			SD_LBUF        = $3F ; offset to line buffer
    70 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    71 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    72 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    73
    74 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    75 				; 
    76 				; The!Cart programming information
    77 				; (c) 2013 Matthias Reichl
    78 				;
    79 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    80 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    81 				; 25AA020A). The memory is addressed using 16384 8k banks
    82 				; (64 8k banks when using RAM instead of flash).
    83 				; 
    84 				; The cartridge configuration registers are located at
    85 				; $D5A0-$D5A8. All registers are read/write unless noted
    86 				; otherwise. Unused bits shall be written as '0' and
    87 				; always read back as '0'.
    88 				; 
    89 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    90 				; flash bank 0, writes to flash are disabled.
    91 				; 
    92 				; Depending on the selected cartridge mode additional
    93 				; registers are enabled at $D5xx.
    94 				; 
    95 				; The primary bank register also serves as a base bank
    96 				; register for the various sub-modes.
    97 				; 
    98 				; The secondary bank register is only used in "flexi mode".
    99 				;
   100
   101 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102 				; 
   103 				; The!Cart Register (from-to,default)
   104 				;
   105
   106 				; Mode Select
   107 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   108 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   109 				; other than the ones listed here are reserved (and result
   110 				; in "cartridge off"):
   111 				; $00: off, cartridge disabled
   112 				; $01: 8k banks at $A000
   113 				; $02: AtariMax 1MBit / 128k
   114 				; $03: Atarimax 8MBit / 1MB
   115 				; $04: OSS M091
   116 				; $08: SDX 64k cart, $D5Ex banking
   117 				; $09: Diamond GOS 64k cart, $D5Dx banking
   118 				; $0A: Express 64k cart, $D57x banking
   119 				; $0C: Atrax 128k cart
   120 				; $0D: Williams 64k cart
   121 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   122 				; $21: standard 16k cart at $8000-$BFFF
   123 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   124 				; $23: Blizzard 16k
   125 				; $24: Sic!Cart 512k
   126 				; $28: 16k Mega cart
   127 				; $29: 32k Mega cart
   128 				; $2A: 64k Mega cart
   129 				; $2B: 128k Mega cart
   130 				; $2C: 256k Mega cart
   131 				; $2D: 512k Mega cart
   132 				; $2E: 1024k Mega cart
   133 				; $2F: 2048k Mega cart
   134 				; $30: 32k XEGS cart
   135 				; $31: 64k XEGS cart
   136 				; $32: 128k XEGS cart
   137 				; $33: 256k XEGS cart
   138 				; $34: 512k XEGS cart
   139 				; $35: 1024k XEGS cart
   140 				; $38: 32k SWXEGS cart
   141 				; $39: 64k SWXEGS cart
   142 				; $3A: 128k SWXEGS cart
   143 				; $3B: 256k SWXEGS cart
   144 				; $3C: 512k SWXEGS cart
   145 				; $3D: 1024k SWXEGS cart
   146 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   147 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   148 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   149 				                         ; separate 8k banks at $A000 and $8000
   150 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   151
   152 				; how to figure out that The!Cart is not active?
   153 				; If the address is not used then the XL returns $ff but
   154 				; the XE (and old 800) return $d5 (high byte of address,
   155 				; the value of the last bus cycle)
   156 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   157 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   158
   159 				; Mode Flash/RAM Select
   160 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   161 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   162 				; bit 1: primary bank source (0=flash, 1=RAM)
   163 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   164 				; bit 3: secondary bank source (0=flash, 1=RAM)
   165 = 0000			TCMOFR.FLASH = $00
   166 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   167 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   168
   169 				; Primary Bank
   170 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   171 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   172 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   173
   174 				; Secondary Bank 
   175 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   176 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   177 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   178
   179 				; SPI interface to EEPROM
   180 = D5A8			TCINEP = $d5a8
   181 				; bit 0: SPI CLK
   182 				; bit 1: SPI CS
   183 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   184
   185 				; configuration lock
   186 = D5AF			TCCOLO = $d5af
   187 				; Writing to this register disables "The!Cart" registers
   188 				; at $d5aX.
   189
   190
   191 				; macros
   192
   193 				; saves register: pushes bank register on stack
   194 				M_cart_push .macro
   195 				            lda TCMOSL
   196 				            pha
   197 				            lda TCMOFR
   198 				            pha
   199 				            lda TCPBRL
   200 				            pha
   201 				            lda TCPBRH
   202 				            pha
   203 				            lda TCPBEN
   204 				            pha
   205 				            .endm
   206
   207 				; restores register from stack: pops from stack
   208 				M_cart_pop  .macro
   209 				            pla                 
   210 				            sta TCPBEN          
   211 				            pla                 
   212 				            sta TCPBRH          
   213 				            pla                 
   214 				            sta TCPBRL          
   215 				            pla                 
   216 				            sta TCMOFR          
   217 				            pla                 
   218 				            sta TCMOSL          
   219 				            .endm
   220 				 
   221 				; set bank: number of bank in X, uses A
   222 				M_cart_set  .macro
   223 				; set new The!Cart mode
   224 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   225 				            sta TCMOSL          
   226 				            lda #TCMOFR.PBRAM       ; set to RAM
   227 				            sta TCMOFR
   228 				            txa
   229 				            asl   
   230 				            sta TCPBRL              ; get bank number from X
   231 				            lda #$00                     
   232 				            sta TCPBRH              ; set high to $00
   233 				            lda #$01
   234 				            sta TCPBEN              ; enable        
   235 				            .endm
   236 				;
   237 				; Start of code
   238 				;
   239 				            org $3000
   240 				            
   241 				; info message
   242 FFFF> 3000-3685> 20 86 +             jsr PRINT
   243 3003 54 68 65 21 52 61 +             .byte 'The!Ramdisk for The!Cart ver64 by hjx',$9B,$FF
   244
   245 				; check for The!Cart
   246 302A AD A6 D5		             lda TCMOSL
   247 302D C9 FF		             cmp #TCMOSL.XLLOCK
   248 302F F0 04		             beq NORAMDISK
   249 3031 C9 D5		             cmp #TCMOSL.XELOCK
   250 3033 D0 23		             bne RAMDISKINI
   251 3035			NORAMDISK
   252 				; no banks            
   253 3035 20 86 34		            jsr PRINT
   254 3038 20 20 45 72 72 6F +             .byte '  Error: The!Cart not found',$9B,$FF
   255 3055 4C 25 31		            jmp PRNHLP
   256 				                        
   257 3058			RAMDISKINI
   258 				; check for parameter
   259 3058 20 92 33					jsr PARAMCHECK
   260 305B B0 23		            bcs PRSPARM
   261 				; no parameter -> error
   262 305D 20 86 34		            jsr PRINT
   263 3060 20 20 45 72 72 6F +             .byte '  Error: No parameter',$9B,$FF
   264 3077 4C 25 31		            jmp PRNHLP
   265
   266 				; jump for jsr to crunch name
   267 307A 4C FF FF		CRNAME      jmp $FFFF
   268
   269 307D 00			CHKFRMT     .byte $00
   270 307E 00			CHKDRVR     .byte $00
   271 307F 00			CHKOPTN     .byte $00
   272
   273 				; set crunch name address
   274 3080 A5 0A		PRSPARM     lda DOSVEC
   275 3082 18			            clc
   276 3083 69 03		            adc #SD_ZCRNAME
   277 3085 8D 7B 30		            sta CRNAME+1
   278 3088 A5 0B		            lda DOSVEC+1
   279 308A 69 00		            adc #$00
   280 308C 8D 7C 30		            sta CRNAME+2
   281 				            
   282 				; parameter parsing            
   283 				; get drive number SD_COMFNAM starts alway with Dx:
   284 308F 20 7A 30		            jsr CRNAME
   285 3092 D0 74		            bne PARAMERR
   286 3094 A0 22		            ldy #SD_COMFNAM+1
   287 3096 B1 0A		            lda (DOSVEC),Y
   288 3098 29 0F		            and #$0F
   289 309A 8D 84 36		            sta DRVNUM
   290
   291 309D 20 92 33					jsr PARAMCHECK
   292 30A0 90 40		            bcc PRSPAREND
   293
   294 30A2 20 7A 30		            jsr CRNAME
   295 30A5 D0 0E		            bne PARAMOPT
   296 30A7 A0 22		            ldy #SD_COMFNAM+1
   297 30A9 B1 0A		            lda (DOSVEC),Y
   298 30AB 29 0F		            and #$0F
   299 30AD 8D 85 36		            sta FDRVNUM
   300 				            
   301 				; check options /xxx
   302 30B0 20 7A 30		            jsr CRNAME
   303 30B3 F0 2D		            beq PRSPAREND
   304
   305 30B5 A0 24		PARAMOPT	ldy #SD_COMFNAM+3
   306 30B7 B1 0A		            lda (DOSVEC),Y
   307 30B9 C9 2F		            cmp #'/'
   308 30BB D0 4B		            bne PARAMERR
   309 30BD C8			PRSPARLOOP  iny
   310 30BE B1 0A		            lda (DOSVEC),Y
   311
   312 30C0 C9 9B		            cmp #$9B         ; end of parameter
   313 30C2 F0 1E		            beq PRSPAREND
   314 				            
   315 30C4 C9 46		PRSPARNXT1  cmp #'F'         ; format only ?
   316 30C6 D0 0B		            bne PRSPARNXT2
   317 30C8 A9 FF		            lda #$FF
   318 30CA 8D 7F 30		            sta CHKOPTN
   319 30CD 8D 7D 30		            sta CHKFRMT
   320 30D0 4C BD 30		            jmp PRSPARLOOP
   321
   322 30D3 C9 44		PRSPARNXT2  cmp #'D'         ; driver only ?
   323 30D5 D0 31		            bne PARAMERR
   324 30D7 A9 FF		            lda #$FF
   325 30D9 8D 7F 30		            sta CHKOPTN
   326 30DC 8D 7E 30		            sta CHKDRVR
   327 30DF 4C BD 30		            jmp PRSPARLOOP
   328
   329 30E2			PRSPAREND
   330 				; set format and ini by options
   331 30E2 2C 7F 30		            bit CHKOPTN
   332 30E5 30 08		            bmi STRTINIFMT ; no options set default /DF
   333 30E7 A9 FF		            lda #$FF
   334 30E9 8D 7E 30		            sta CHKDRVR
   335 30EC 8D 7D 30		            sta CHKFRMT
   336 30EF			STRTINIFMT
   337 				; install driver requested
   338 30EF 2C 7E 30		            bit CHKDRVR
   339 30F2 10 03		            bpl NOINIDRV
   340 30F4 20 11 32		            jsr STARTINST
   341 30F7			NOINIDRV
   342 				; format if requested
   343 30F7 2C 7F 30		            bit CHKOPTN
   344 30FA 30 03		            bmi NOPREFRMT
   345 30FC 20 E6 33		            jsr CHECKFRMT
   346 30FF			NOPREFRMT
   347 30FF 2C 7D 30		            bit CHKFRMT
   348 3102 10 03		            bpl NOFRMTRD
   349 3104 20 AE 32		            jsr FRMTRD
   350 3107			NOFRMTRD
   351 3107 60			            rts
   352
   353 3108 20 86 34		PARAMERR    jsr PRINT
   354 310B 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter',$9B,$FF
   355 3125			PRNHLP
   356 3125 20 86 34		            jsr PRINT
   357 3128 20 20 55 73 65 20 +             .byte '  Use RAMCART Dx: [Dy:] [/DF]',$9B
   358 3146 20 20 20 20 78 20 +             .byte '    x - drive number for ramdisk',$9B
   359 3167 20 20 20 20 79 20 +             .byte '    y - drive number for flashdisk',$9B
   360 318A 20 20 20 20 44 20 +             .byte '    D - install driver only',$9B
   361 31A6 20 20 20 20 46 20 +             .byte '    F - format ramdisk only',$9B
   362 31C2 20 20 55 73 65 20 +             .byte '  Use shift+return/esc in start menu.',$9B
   363 31E8 20 20 49 66 20 44 +             .byte '  If Dx: equals Dy: then Dy: precedes.',$9B,$FF
   364 3210 60			            rts
   365
   366 3211			STARTINST   
   367 3211 20 86 34		            jsr PRINT
   368 3214 20 20 44 72 69 76 +             .byte '  Driver installed ',$ff
   369
   370 3228 AD 84 36		            lda DRVNUM
   371 322B 30 17		            bmi PRTFLASHDRV
   372 322D CD 85 36					cmp FDRVNUM
   373 3230 F0 12					beq PRTFLASHDRV
   374 3232 18			            clc
   375 3233 69 30		            adc #'0'
   376 3235 8D 40 32		            sta ramDx
   377 3238 20 86 34					jsr PRINT
   378 323B 52 41 4D 3D 44	            .byte 'RAM=D'
   379 3240 78 3A 20 FF		ramDx       .byte 'x: ',$ff
   380
   381 3244			PRTFLASHDRV
   382 3244 AD 85 36		            lda FDRVNUM
   383 3247 30 13		            bmi PRTDRVEND
   384 3249 18			            clc
   385 324A 69 30		            adc #'0'
   386 324C 8D 59 32		            sta flashDy
   387 324F 20 86 34					jsr PRINT
   388 3252 46 6C 61 73 68 3D + 			.byte 'Flash=D'
   389 3259 79 3A FF		flashDy     .byte 'y:',$ff
   390
   391 325C			PRTDRVEND
   392 325C 20 86 34					jsr PRINT
   393 325F 9B FF					.byte $9B,$FF
   394
   395 				; set jsr to original DOSINI
   396 3261 A5 0C		            lda DOSINI
   397 3263 8D BD 34		            sta JSRDOSINI+1
   398 3266 A5 0D		            lda DOSINI+1
   399 3268 8D BE 34		            sta JSRDOSINI+2
   400
   401 				; set MEMLO oldaddress, realloc
   402 326B AD E7 02		            lda MEMLO
   403 326E 8D 31 38		            sta READSTADR
   404 3271 8D 37 38		            sta CPYTOADR
   405 3274 AD E8 02		            lda MEMLO+1
   406 3277 8D 32 38		            sta READSTADR+1
   407 327A 8D 38 38		            sta CPYTOADR+1
   408 				;
   409 				; start realloc
   410 				;
   411 327D 20 69 37		            jsr REASTART
   412
   413 				; set new DOSINI            
   414 3280 A9 BC		REAL001     lda #<JSRDOSINI
   415 3282 85 0C		            sta DOSINI
   416 3284 A9 34		REAH001     lda #>JSRDOSINI
   417 3286 85 0D		            sta DOSINI+1
   418 				; get SIO and patch for RAMDISK
   419 3288 38			            sec
   420 3289 A5 0A		            lda DOSVEC
   421 328B E9 0A		            sbc #SD_LSIO
   422 328D 85 32		            sta BUFRLO
   423 328F A5 0B		            lda DOSVEC+1
   424 3291 E9 00		            sbc #$00
   425 3293 85 33		            sta BUFRHI
   426 3295 A0 00		            ldy #$00
   427 3297 B1 32		            lda (BUFRLO),Y
   428 3299 8D E2 34		REAA001     sta JMPSIO+1      ;realloc $33CA
   429 329C A9 CA		REAL002     lda #<RAMDSIO
   430 329E 91 32		            sta (BUFRLO),Y
   431 32A0 C8			            iny
   432 32A1 B1 32		            lda (BUFRLO),Y
   433 32A3 8D E3 34		REAA002     sta JMPSIO+2      ;realloc $33D4
   434 32A6 A9 34		REAH002     lda #>RAMDSIO
   435 32A8 91 32		            sta (BUFRLO),Y
   436 				; set MEMLO            
   437 32AA 20 BF 34		REAA003     jsr SETMEMLO      ;realloc $33DB
   438 32AD 60			            rts
   439
   440 				; format ramdisk
   441 32AE 20 86 34		FRMTRD      jsr PRINT
   442 32B1 20 20 52 61 6D 64 +             .byte '  Ramdisk formatted',$9B,$FF
   443
   444 32C6 20 16 34		            jsr cart_save
   445
   446 				; clear sector 1-4
   447 32C9 A2 00		_loop03     ldx #$00
   448 32CB 20 5C 34		            jsr cart_set
   449 32CE A9 00		            lda #$00
   450 32D0 A0 7F		            ldy #$7f
   451 32D2 99 00 80		FRMTCLP03   sta $8000,Y
   452 32D5 88			            dey
   453 32D6 10 FA		            bpl FRMTCLP03
   454 32D8 20 35 34		            jsr cart_restore
   455 32DB AD D3 32		            lda FRMTCLP03+1
   456 32DE 18			            clc
   457 32DF 69 80		            adc #$80
   458 32E1 8D D3 32		            sta FRMTCLP03+1
   459 32E4 AD D4 32		            lda FRMTCLP03+2
   460 32E7 69 00		            adc #$00
   461 32E9 8D D4 32		            sta FRMTCLP03+2
   462 32EC A9 04		_loopcnt03  lda #$04
   463 32EE CE ED 32		            dec _loopcnt03+1
   464 32F1 D0 D6		            bne _loop03
   465
   466 				; header loop            
   467 32F3 A2 00		            ldx #$00
   468 32F5 20 5C 34		            jsr cart_set
   469 32F8 A0 2B		            ldy #$2b
   470 32FA B9 A3 33		_loopheader lda RDHEAD,Y
   471 32FD 99 00 80		            sta $8000,Y		; sector 1
   472 3300 88			            dey
   473 3301 10 F7		            bpl _loopheader
   474 3303 A9 60		            lda #$60    ; write RTS to second boot sector
   475 3305 8D 80 80		            sta $8080   ; see header jmp $3080, sector 2
   476 3308 20 35 34		            jsr cart_restore
   477
   478
   479 				; set sector 4-7 to $ff VTOV 512k = 4096 sectors
   480 				; = 4 VTOC sectors
   481 330B A2 00		_loop47     ldx #$00
   482 330D 20 5C 34		            jsr cart_set
   483 3310 A9 FF		            lda #$ff
   484 3312 A0 7F		            ldy #$7f
   485 3314 99 80 81		FRMTCLP47   sta $8180,Y
   486 3317 88			            dey
   487 3318 10 FA		            bpl FRMTCLP47
   488 331A 20 35 34		            jsr cart_restore
   489 331D AD 15 33		            lda FRMTCLP47+1
   490 3320 18			            clc
   491 3321 69 80		            adc #$80
   492 3323 8D 15 33		            sta FRMTCLP47+1
   493 3326 AD 16 33		            lda FRMTCLP47+2
   494 3329 69 00		            adc #$00
   495 332B 8D 16 33		            sta FRMTCLP47+2
   496 332E A9 04		_loopcnt47  lda #$04
   497 3330 CE 2F 33		            dec _loopcnt47+1
   498 3333 D0 D6		            bne _loop47
   499
   500 				; clear sector 8-9 
   501 3335 A2 00		_loop89     ldx #$00
   502 3337 20 5C 34		            jsr cart_set
   503 333A A9 00		            lda #$00
   504 333C A0 7F		            ldy #$7f
   505 333E 99 80 83		FRMTCLP89   sta $8380,Y
   506 3341 88			            dey
   507 3342 10 FA		            bpl FRMTCLP89
   508 3344 20 35 34		            jsr cart_restore
   509 3347 AD 3F 33		            lda FRMTCLP89+1
   510 334A 18			            clc
   511 334B 69 80		            adc #$80
   512 334D 8D 3F 33		            sta FRMTCLP89+1
   513 3350 AD 40 33		            lda FRMTCLP89+2
   514 3353 69 00		            adc #$00
   515 3355 8D 40 33		            sta FRMTCLP89+2
   516 3358 A9 02		_loopcnt89  lda #$02
   517 335A CE 59 33		            dec _loopcnt89+1
   518 335D D0 D6		            bne _loop89
   519
   520 335F A2 00		            ldx #$00
   521 3361 20 5C 34		            jsr cart_set
   522 				; mark used sectors
   523 3364 A9 00		            lda #$00
   524 3366 8D 80 81		            sta $8180   ; sector 1-8
   525 3369 A9 3F		            lda #$3f
   526 336B 8D 81 81		            sta $8181   ; sector 9
   527 				;            lda #$fe
   528 				;            sta $83ff   ; sector 4096 does not exit
   529 				; set sector map for MAIN
   530 336E A9 00		            lda #$00    ; two words $0000 (first and last)
   531 3370 8D 80 83		            sta $8380
   532 3373 8D 81 83		            sta $8381
   533 3376 8D 82 83		            sta $8382
   534 3379 8D 83 83		            sta $8383
   535 337C A9 09		            lda #$09    ;  and third $0009 start of main
   536 337E 8D 84 83		            sta $8384
   537 				; set MAIN directory            
   538 3381 A2 00		            ldx #$00
   539 3383 BD CF 33		_loopmain   lda RDMAIN,x
   540 3386 9D 00 84		            sta $8400,x
   541 3389 E8			            inx
   542 338A E0 17		            cpx #$17
   543 338C D0 F5		            bne _loopmain
   544 338E 20 35 34		            jsr cart_restore
   545 				; finished
   546 3391 60			            rts
   547 				            
   548 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   549 				;
   550 				; parameter subroutines            
   551 				;
   552
   553 				;
   554 				; check for next parameter
   555 				;   sets carry if next parameter is available
   556 				;
   557 3392 A0 0A		PARAMCHECK	ldy #SD_BUFOFF
   558 3394 B1 0A		            lda (DOSVEC),Y
   559 3396 18			            clc
   560 3397 69 3F		            adc #SD_LBUF
   561 3399 A8			            tay
   562 339A B1 0A		            lda (DOSVEC),Y
   563 339C C9 9B		            cmp #$9b
   564 339E 18			            clc
   565 339F F0 01		            beq PARAMCHECKE
   566 33A1 38						sec
   567 33A2 60			PARAMCHECKE	rts
   568 				            
   569 				; load boot sector to $3000 start $3080 and RTS ($60)
   570 33A3 00			RDHEAD      .byte $00 ; Usually 0. Some formatting tools put a $53 (='S) for SD here.
   571 33A4 03			            .byte $03 ; Number of sectors to boot.
   572 33A5 00 30		            .byte $00,$30 ; Address where the boot sectors are loaded to
   573 33A7 E0 07		            .byte $E0,$07 ; This address is copied to DOSINI
   574 33A9 4C 80 30		            .byte $4c,$80,$30 ; After boot jump here: jmp $3080 (just RTS)
   575 33AC 08 00		            .byte $08,$00 ; Sector number of the first sector map of the MAIN directory
   576 33AE 00 10		            .word $1000 ; total sector count
   577 33B0 F6 0F		            .word $0ff6 ; free sector count
   578 33B2 04			            .byte $04 ; Number of bit map sectors on the disk
   579 33B3 04 00		            .byte $04,$00 ; Sector number of the first bit map sector
   580 33B5 28 00		            .byte $28,$00 ; Sector number to begin the file data sector allocation search
   581 33B7 0A 00		            .byte $0A,$00 ; Sector number to begin the directory data sector allocation search
   582 33B9 43 41 52 54 35 31 +             .byte 'CART512K' ; Volume name, 8 chars
   583 33C1 01			            .byte $01 ; Tracks on disk (1 for ramdisks and HDs)
   584 33C2 80			            .byte $80 ; Sector size ($80=128,$00=256,$01=512)
   585 33C3 20			            .byte $20 ; File system version ($20=SD1.1-4.2 version 2.0, $21=Sd4.4> version 2.1) 
   586 33C4 00 00 00 00 00	            .byte $00,$00,$00,$00,$00 ; reserved - no known use
   587 33C9 00			            .byte $00 ; Volume sequence number
   588 33CA 00			            .byte $00 ; Volume random number
   589 33CB 00 00		            .byte $00,$00 ; Sector number of the first sector map of the file to be loaded when the disk is booted
   590 33CD 00			            .byte $00 ; Lock flag ($ff=locked, $00=unlocked)
   591 33CE 00			            .byte $00
   592
   593 33CF 28			RDMAIN      .byte $28 ; Bits 7-0: OpenWrite,-,SubDir,Del,Used,Arc,Hid,Prot
   594 33D0 00 00		            .word $0000 ; First sector map of parent directory (MAIN=0)
   595 33D2 17 00 00		            .byte $17,$00,$00 ; length of directory in bytes (always times 23 bytes)
   596 33D5 4D 41 49 4E 20 20 + RDMAINNAME  .byte 'MAIN       ' ; Name 11 chars
   597 33E0 0B 07 47		            .byte $0b,$07,$47 ; Date DD/MM/YY
   598 33E3 0B 0B 0B		            .byte $0b,$0b,$0b ; Time HH:MM:SS
   599
   600 				; check preformat
   601 33E6			checkfrmt
   602 33E6 20 16 34		            jsr cart_save
   603 33E9 A2 00		            ldx #$00
   604 33EB 20 5C 34		            jsr cart_set
   605
   606 33EE BD D5 33		_nxtcharv   lda RDMAINNAME,x    ; check volume name
   607 33F1 DD 06 84		            cmp $8406,x			; sector $09
   608 33F4 D0 0F		            bne _nofrmt
   609 33F6 E8			            inx
   610 33F7 E0 0B		            cpx #$0b
   611 33F9 D0 F3		            bne _nxtcharv
   612 				            
   613 33FB 20 35 34		            jsr cart_restore
   614 33FE A9 00		            lda #$00
   615 3400 8D 7D 30		            sta CHKFRMT
   616 3403 38			            sec
   617 3404 60			            rts
   618 				            
   619 3405 20 35 34		_nofrmt     jsr cart_restore
   620 3408 A9 FF		            lda #$FF
   621 340A 8D 7D 30		            sta CHKFRMT
   622 340D 18			            clc
   623 340E 60			            rts
   624
   625 				; wait for sync            
   626 340F A5 14		WAITSYNC    lda RTCLOK+2
   627 3411 C5 14		WAITLOOP    cmp RTCLOK+2
   628 3413 F0 FC		            beq WAITLOOP
   629 3415 60			            rts
   630
   631 3416			cart_save
   632 3416 AD A6 D5		            lda TCMOSL
   633 3419 8D 81 34		            sta _tcmosl
   634 341C AD A7 D5		            lda TCMOFR
   635 341F 8D 82 34		            sta _tcmofr
   636 3422 AD A0 D5		            lda TCPBRL
   637 3425 8D 83 34		            sta _tcpbrl
   638 3428 AD A1 D5		            lda TCPBRH
   639 342B 8D 84 34		            sta _tcpbrh
   640 342E AD A2 D5		            lda TCPBEN
   641 3431 8D 85 34		            sta _tcpben
   642
   643 3434 60			            rts
   644
   645 3435			cart_restore
   646 3435 AD 81 34		            lda _tcmosl
   647 3438 8D A6 D5		            sta TCMOSL
   648 343B AD 82 34		            lda _tcmofr
   649 343E 8D A7 D5		            sta TCMOFR
   650 3441 AD 83 34		            lda _tcpbrl
   651 3444 8D A0 D5		            sta TCPBRL
   652 3447 AD 84 34		            lda _tcpbrh
   653 344A 8D A1 D5		            sta TCPBRH
   654 344D AD 85 34		            lda _tcpben
   655 3450 8D A2 D5		            sta TCPBEN
   656
   657 3453 A9 E0		            lda #$e0          ; enable interrupts
   658 3455 8D 0E D4		            sta NMIEN
   659 3458 58			            cli
   660 3459 C6 42		            dec CRITIC 
   661
   662 345B 60			            rts
   663
   664 345C			cart_set
   665 345C E6 42		            inc CRITIC 
   666 345E 20 0F 34		            jsr WAITSYNC        ; wait for vblank
   667 3461 78			            sei                 ; disable interrupt
   668 3462 A9 00		            lda #$00
   669 3464 8D 0E D4		            sta NMIEN
   670
   671 3467 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   672 3469 8D A6 D5		            sta TCMOSL          
   673 346C A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   674 346E 8D A7 D5		            sta TCMOFR
   675 3471 8A			            txa
   676 3472 0A			            asl   
   677 3473 8D A0 D5		            sta TCPBRL              ; get bank number from X
   678 3476 A9 00		            lda #$00                     
   679 3478 8D A1 D5		            sta TCPBRH              ; set high to $00
   680 347B A9 01		            lda #$01
   681 347D 8D A2 D5		            sta TCPBEN              ; enable        
   682
   683 3480 60			            rts            
   684
   685 3481 00			_tcmosl     .byte $00
   686 3482 00			_tcmofr     .byte $00
   687 3483 00			_tcpbrl     .byte $00
   688 3484 00			_tcpbrh     .byte $00
   689 3485 00			_tcpben     .byte $00
   690
   691 				; print subroutine            
   692 3486 68			PRINT       pla
   693 3487 8D 97 34		            sta PRINTITER+1
   694 348A 68			            pla
   695 348B 8D 98 34		            sta PRINTITER+2
   696 348E EE 97 34		PRINTLOOP   inc PRINTITER+1
   697 3491 D0 03		            bne PRINTITER
   698 3493 EE 98 34		            inc PRINTITER+2
   699 3496 AD FF FF		PRINTITER   lda $FFFF
   700 3499 C9 FF		            cmp #$FF
   701 349B F0 06		            beq PRINTEND
   702 349D 20 AC 34		            jsr CIOPUTCHR
   703 34A0 4C 8E 34		            jmp PRINTLOOP
   704 34A3 AD 98 34		PRINTEND    lda PRINTITER+2
   705 34A6 48			            pha
   706 34A7 AD 97 34		            lda PRINTITER+1
   707 34AA 48			            pha
   708 34AB 60			            rts
   709 				; call cio put char subroutine
   710 34AC A2 00		CIOPUTCHR   ldx #$00
   711 34AE 8E 48 03		            stx IOCB0+ICBLL
   712 34B1 8E 49 03		            stx IOCB0+ICBLH
   713 34B4 A0 0B		            ldy #$0B
   714 34B6 8C 42 03		            sty IOCB0+ICCOM
   715 34B9 4C 56 E4		            jmp CIOV
   716
   717
   718
   719 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   720 				;;; BEGIN OF REALLOC BLOCK
   721 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   722
   723 				; to realloc routines
   724 				; DOSINI set MEMLO at reset
   725 34BC			REABEGIN
   726
   727 34BC 20 00 00		JSRDOSINI   jsr $0000
   728 34BF			SETMEMLO    
   729 34BF A9 06		REAL003     lda #<REAEND
   730 34C1 8D E7 02		            sta MEMLO
   731 34C4 A9 37		REAH003     lda #>REAEND
   732 34C6 8D E8 02		            sta MEMLO+1
   733 34C9 60			            rts
   734
   735 				; new DOSVEC for RAMDISK device
   736 34CA AD 00 03		RAMDSIO     lda DDEVIC
   737 34CD C9 31		            cmp #$31
   738 34CF D0 10		            bne JMPSIO
   739 34D1 AD 84 36		REAA004     lda DRVNUM  ; check drive number for RAM
   740 34D4 CD 01 03		            cmp DUNIT
   741 34D7 F0 0B		            beq NEWSIOGO
   742 34D9 AD 85 36		REAA026		lda FDRVNUM  ; check drive number for Flash
   743 34DC CD 01 03		            cmp DUNIT
   744 34DF F0 03		            beq NEWSIOGO
   745 34E1 4C 00 00		JMPSIO      jmp $0000
   746
   747 				; set buffer address
   748 34E4 AD 04 03		NEWSIOGO    lda DBUFLO
   749 34E7 85 34		            sta BFENLO
   750 34E9 AD 05 03		            lda DBUFHI
   751 34EC 85 35		            sta BFENHI
   752 				; load commad byte            
   753 34EE AD 02 03		            lda DCOMND
   754 				; command STATUS REQUEST
   755 34F1 C9 53		            cmp #$53 
   756 34F3 D0 1B		            bne NEXT1
   757 34F5 AD 7F 36		REAA009     lda CONFSECSIZ
   758 34F8 4A			            lsr
   759 34F9 4A			            lsr
   760 34FA 49 30		            eor #$30
   761 34FC AC 7B 36		REAA010     ldy L36BB
   762 34FF C0 1A		            cpy #$1A
   763 3501 D0 02		            bne L35B4
   764 3503 09 80		            ora #$80
   765 3505 A0 00		L35B4       ldy #$00
   766 3507 91 34		            sta (BFENLO),Y
   767 3509 C8			            iny
   768 350A A9 FF		            lda #$FF
   769 350C 91 34		            sta (BFENLO),Y
   770 350E 30 24		            bmi JMPSIOEND
   771 				            
   772 				; command RETURN CONFIGURATION            
   773 3510 C9 4E		NEXT1       cmp #$4E
   774 3512 D0 0C		            bne NEXT2
   775 3514 A0 0B		            ldy #$0B            ; 12 bytes
   776 3516			RETCNFLOOP
   777 3516 B9 78 36		REAA011     lda CONFBUF,Y
   778 3519 91 34		            sta (BFENLO),Y
   779 351B 88			            dey
   780 351C 10 F8		            bpl RETCNFLOOP
   781 351E 30 14		            bmi JMPSIOEND
   782
   783 				; command SET CONFIGURATION
   784 3520 C9 4F		NEXT2       cmp #$4F
   785 3522 D0 13		            bne NEXT3
   786 3524 A0 07		            ldy #$07
   787 3526 B1 34		            lda (BFENLO),Y
   788 3528 F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   789 352A 8D 7F 36		REAA012     sta CONFSECSIZ
   790 352D A0 03		            ldy #$03
   791 352F B1 34		            lda (BFENLO),Y
   792 3531 8D 7B 36		REAA013     sta L36BB
   793
   794 3534			JMPSIOEND
   795 3534 4C 6E 36		REAA014     jmp RDSIOEND
   796
   797 				; command FORMAT DISK
   798 3537 C9 21		NEXT3       cmp #$21
   799 3539 D0 0B		            bne NEXT4
   800 353B A0 00		SIOFRMT     ldy #$00
   801 353D A9 FF		            lda #$FF
   802 353F 91 34		            sta (BFENLO),Y
   803 3541 C8			            iny
   804 3542 91 34		            sta (BFENLO),Y
   805 3544 D0 EE		            bne JMPSIOEND
   806
   807 				; command FORMAT DISK ENHANCED
   808 3546 C9 22		NEXT4       cmp #$22
   809 3548 D0 0C		            bne NEXT5
   810 354A A9 1A		            lda #$1A
   811 354C 8D 7B 36		REAA015     sta L36BB
   812 354F A9 80		            lda #$80
   813 3551 8D 7F 36		REAA016     sta CONFSECSIZ
   814 3554 D0 E5		            bne SIOFRMT
   815 				            
   816 				; command PUT/GET SECTOR 
   817 3556 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   818 3558 F0 0B		            beq PUTGETSEC
   819 355A C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   820 355C F0 07		            beq PUTGETSEC
   821 355E C9 50		            cmp #$50            ; command PUT SECTOR
   822 3560 F0 03		            beq PUTGETSEC
   823 3562 4C 71 36		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   824 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   825 				; buffer address and calc byte count
   826 3565 A9 00		PUTGETSEC   lda #$00
   827 3567 85 32		            sta BUFRLO
   828 3569 AD 0A 03		            lda DAUX1
   829 356C 38			            sec
   830 356D E9 01		            sbc #$01
   831 356F 85 33		            sta BUFRHI
   832 3571 AD 0B 03		            lda DAUX2
   833 3574 E9 00		            sbc #$00
   834 3576 06 33		            asl BUFRHI
   835 3578 2A			            rol
   836 3579 AA			            tax                 ; set X with memory bank number
   837 357A A5 33		            lda BUFRHI
   838 357C 4A			            lsr
   839 357D 4A			            lsr
   840 357E 66 32		            ror BUFRLO
   841 3580 09 80		            ora #$80
   842 3582 85 33		            sta BUFRHI
   843 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   844 				; set buffer address in copy loops
   845 3584 A5 32		            lda BUFRLO
   846 3586 8D 19 36		REAA021     sta GETADRLP+1
   847 3589 8D 4D 36		REAA022     sta PUTADRLP+1
   848 358C A5 33		            lda BUFRHI
   849 358E 8D 1A 36		REAA023     sta GETADRLP+2
   850 3591 8D 4E 36		REAA024     sta PUTADRLP+2            
   851 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   852 				; check for GET
   853 3594 AD 02 03		            lda DCOMND
   854 3597 C9 52		            cmp #$52
   855 3599 F0 0A		            beq L3656           ; is GET
   856 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   857 				; PUT: put user data to buffer            
   858 359B A0 7F		            ldy #$7F
   859 359D B1 34		L364B       lda (BFENLO),Y
   860 359F 99 86 36		REAA005     sta BUFFERXX1,Y
   861 35A2 88			            dey
   862 35A3 10 F8		            bpl L364B
   863 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   864 				; check if bank number is in range            
   865 35A5 E0 20		L3656       cpx #$20            ; check bank number
   866 35A7 B0 B9		            bcs REAA020         ; intermediate jmp to NAK
   867 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   868 35A9			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 35A9 AD A6 D5		            lda TCMOSL
     2 35AC 48			            pha
     3 35AD AD A7 D5		            lda TCMOFR
     4 35B0 48			            pha
     5 35B1 AD A0 D5		            lda TCPBRL
     6 35B4 48			            pha
     7 35B5 AD A1 D5		            lda TCPBRH
     8 35B8 48			            pha
     9 35B9 AD A2 D5		            lda TCPBEN
    10 35BC 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   869 35BD E6 42		            inc CRITIC
   870 35BF A5 14		            lda RTCLOK+2
   871 35C1 C5 14		WAITLOOP2   cmp RTCLOK+2
   872 35C3 F0 FC		            beq WAITLOOP2
   873 35C5 78			            sei                 ; disable interrupts
   874 35C6 A9 00		            lda #$00
   875 35C8 8D 0E D4		            sta NMIEN           ; 40 cycles
   876 				; set bank, number in X
   877 35CB A9 21		            lda #TCMOSL.16K     ; set 2x8k mode at $8000-$BFFF
   878 35CD 8D A6 D5		            sta TCMOSL          
   879
   880 35D0 AD 85 36		REAA025     lda FDRVNUM  ; check drive number for flash
   881 35D3 CD 01 03		            cmp DUNIT
   882 35D6 D0 23		            bne setTCram
   883
   884 				; 512k user space start bank $3fc0
   885 				; 640k user space start bank $3fb0
   886 35D8 A9 00		setTCflash  lda #TCMOFR.FLASH       ; set to FLASH
   887 35DA 8D A7 D5		            sta TCMOFR
   888 35DD A9 B0		            lda #$b0
   889 35DF 8D A0 D5		            sta TCPBRL
   890 35E2 A9 3F		            lda #$3f
   891 35E4 8D A1 D5		            sta TCPBRH
   892 35E7 8A			            txa
   893 35E8 0A			            asl
   894 35E9 18			            clc   
   895 35EA 6D A0 D5		            adc TCPBRL              ; get bank number from X
   896 35ED 8D A0 D5		            sta TCPBRL
   897 35F0 AD A1 D5		            lda TCPBRH
   898 35F3 69 00		            adc #$00                     
   899 35F5 8D A1 D5		            sta TCPBRH              ; set high to $00
   900 35F8 18			            clc
   901 35F9 90 0F		            bcc setTcend
   902
   903 35FB A9 03		setTCram    lda #TCMOFR.PBRAM       ; set to RAM
   904 35FD 8D A7 D5		            sta TCMOFR
   905 3600 8A			            txa
   906 3601 0A			            asl   
   907 3602 8D A0 D5		            sta TCPBRL              ; get bank number from X
   908 3605 A9 00		            lda #$00                     
   909 3607 8D A1 D5		            sta TCPBRH              ; set high to $00
   910
   911 360A A9 01		setTCend    lda #$01
   912 360C 8D A2 D5		            sta TCPBEN              ; enable        
   913 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   914 				; check for PUT
   915 360F A0 7F		            ldy #$7F            ; 9 cycles
   916 3611 AD 02 03		            lda DCOMND
   917 3614 C9 52		            cmp #$52
   918 3616 D0 31		            bne L369B           ; is PUT
   919 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   920 				; GET: read data to buffer
   921 3618			L367B
   922 3618 B9 FF FF		GETADRLP    lda $FFFF,Y         ; 5 cycles +
   923 361B 99 86 36		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
   924 361E 88			            dey                 ; 2 cycles +
   925 361F 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2048
   926 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   927 				; restore bank for write to user buffer
   928 3621			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3621 68			            pla                 
     2 3622 8D A2 D5		            sta TCPBEN          
     3 3625 68			            pla                 
     4 3626 8D A1 D5		            sta TCPBRH          
     5 3629 68			            pla                 
     6 362A 8D A0 D5		            sta TCPBRL          
     7 362D 68			            pla                 
     8 362E 8D A7 D5		            sta TCMOFR          
     9 3631 68			            pla                 
    10 3632 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   929 3635 A9 E0		            lda #$e0            ; enable interrupts
   930 3637 8D 0E D4		            sta NMIEN
   931 363A 58			            cli
   932 363B C6 42		            dec CRITIC          ; 54 cycles
   933 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
   934 				; GET: write buffer to user data            
   935 363D A0 7F		            ldy #$7F
   936 363F			L368E
   937 363F B9 86 36		REAA008     lda BUFFERXX1,Y
   938 3642 91 34		            sta (BFENLO),Y
   939 3644 88			            dey
   940 3645 10 F8		            bpl L368E
   941 3647 30 25		            bmi RDSIOEND
   942 				            
   943 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   944 				; PUT: buffer data to sector
   945 3649			L369B
   946 3649 B9 86 36		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
   947 364C 99 FF FF		PUTADRLP    sta $FFFF,Y       ; 5 cycles
   948 364F 88			            dey               ; 2 cycles +              
   949 3650 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2048 
   950 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   951 				; restore register
   952 3652			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3652 68			            pla                 
     2 3653 8D A2 D5		            sta TCPBEN          
     3 3656 68			            pla                 
     4 3657 8D A1 D5		            sta TCPBRH          
     5 365A 68			            pla                 
     6 365B 8D A0 D5		            sta TCPBRL          
     7 365E 68			            pla                 
     8 365F 8D A7 D5		            sta TCMOFR          
     9 3662 68			            pla                 
    10 3663 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   953 3666 A9 E0		            lda #$e0            ; enable interrupts
   954 3668 8D 0E D4		            sta NMIEN
   955 366B 58			            cli
   956 366C C6 42		            dec CRITIC          ; 54 cycles
   957 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   958 				; set rc            
   959 366E A0 01		RDSIOEND    ldy #$01
   960 3670 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   961
   962 3673 8C 03 03					sty DSTATS
   963 3676 98			            tya                 ; set RC
   964 3677 60			            rts
   965 				            
   966 				; drive configuration buffer
   967 3678 28 01 12		CONFBUF     .byte $28,$01,$12
   968 367B 00			L36BB       .byte $00
   969 367C 00 00 00		            .byte $00,$00,$00
   970 367F 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
   971 3680 FF 00 00 00		            .byte $FF,$00,$00,$00
   972
   973 3684 FF			DRVNUM      .byte $ff
   974 3685 FF			FDRVNUM     .byte $ff
   975 				; $80 for 128Bytes ($100 for 256Bytes)
   976 3686			BUFFERXX1
   977 				;            org $37E6
   978 = 3706			REAEND      = BUFFERXX1 + $80
   979 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   980 				;;; END OF REALLOC BLOCK
   981 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   982
   983
   984 				; $20 Bytes
   985 = 3706			BNKSAVBUF   = REAEND
   986
   987 				; $20 bytes
   988 				;            org $3806
   989 				;BNKSAVBUF2  = BNKSAVBUF + $20
   990
   991 				 
   992 				;           org $3826
   993 3686			            org BNKSAVBUF + $20
   994 				; realloc whole addresses
   995 3726-383A> 9A 32		REATAB      .word REAA001+1 ;$33CA
   996 3728 A4 32		            .word REAA002+1 ;$33D4
   997 372A AB 32		            .word REAA003+1 ;$33DB
   998 372C D2 34		            .word REAA004+1 ;$3583
   999 372E A0 35		            .word REAA005+1 ;$364E
  1000 3730 1C 36		            .word REAA006+1 ;$367E
  1001 3732 4A 36		            .word REAA007+1 ;$369C
  1002 3734 40 36		            .word REAA008+1 ;$368F
  1003 3736 F6 34		            .word REAA009+1 ;$35A5
  1004 3738 FD 34		            .word REAA010+1 ;$35AC
  1005 373A 17 35		            .word REAA011+1 ;$35C6
  1006 373C 2B 35		            .word REAA012+1 ;$35D8
  1007 373E 32 35		            .word REAA013+1 ;$35DF
  1008 3740 35 35		            .word REAA014+1 ;$35E2
  1009 3742 4D 35		            .word REAA015+1 ;$35FA
  1010 3744 52 35		            .word REAA016+1 ;$35FF
  1011 3746 63 35		            .word REAA020+1 ;$3610
  1012 3748 87 35		            .word REAA021+1
  1013 374A 8A 35		            .word REAA022+1
  1014 374C 8F 35		            .word REAA023+1
  1015 374E 92 35		            .word REAA024+1
  1016 3750 D1 35		            .word REAA025+1
  1017 3752 DA 34		            .word REAA026+1
  1018 3754 00 00		            .word $0000
  1019 				 
  1020 				; realloc address low byte           
  1021 3756 81 32		            .word REAL001+1 ;$33B1
  1022 3758 9D 32		            .word REAL002+1 ;$33CD
  1023 375A C0 34		            .word REAL003+1 ;$356E
  1024 375C 00 00		            .word $0000
  1025 				; realloc address high byte (address to high byte and value of low byte)
  1026 375E 85 32		            .word REAH001+1  ;$33B5
  1027 3760 BC			            .byte <JSRDOSINI ;$6A
  1028 				                        
  1029 3761 A7 32		            .word REAH002+1 ;$33D7
  1030 3763 CA			            .byte <RAMDSIO  ;$78
  1031 				            
  1032 3764 C5 34		            .word REAH003+1  ;$3573
  1033 3766 06			            .byte <REAEND    ;$E6
  1034 				            
  1035
  1036 3767 00 00		            .word $0000
  1037 				            
  1038 3769 A9 00		REASTART    lda #$00
  1039 376B 8D 3B 38		            sta REALOOPCNT
  1040 376E AE 3B 38		REALOOP     ldx REALOOPCNT
  1041 3771 BD 2D 38		            lda REATABADR,X
  1042 3774 8D 13 38		            sta L3910+1
  1043 3777 BD 2E 38		            lda REATABADR+1,X
  1044 377A 8D 14 38		            sta L3910+2
  1045 377D 0D 13 38		            ora L3910+1
  1046 3780 D0 01		            bne L3881
  1047 3782 60			            rts
  1048 				            
  1049 3783 38			L3881       sec
  1050 3784 BD 31 38		            lda READSTADR,X
  1051 3787 FD 2F 38		            sbc REASRCADR,X
  1052 378A 8D 3C 38		            sta READIFLO
  1053 378D BD 32 38		            lda READSTADR+1,X
  1054 3790 FD 30 38		            sbc REASRCADR+1,X
  1055 3793 8D 3D 38		            sta READIFHI
  1056 				            
  1057 3796 20 1E 38		L3894       jsr L391C
  1058 3799 F0 13		            beq L38AC
  1059 379B B1 D7		            lda ($D7),Y
  1060 379D 18			            clc
  1061 379E 6D 3C 38		            adc READIFLO
  1062 37A1 91 D7		            sta ($D7),Y
  1063 37A3 C8			            iny
  1064 37A4 B1 D7		            lda ($D7),Y
  1065 37A6 6D 3D 38		            adc READIFHI
  1066 37A9 91 D7		            sta ($D7),Y
  1067 37AB 4C 96 37		            jmp L3894
  1068 37AE 20 1E 38		L38AC       jsr L391C
  1069 37B1 F0 0B		            beq L38BC
  1070 37B3 B1 D7		            lda ($D7),Y
  1071 37B5 18			            clc
  1072 37B6 6D 3C 38		            adc READIFLO
  1073 37B9 91 D7		            sta ($D7),Y
  1074 37BB 4C AE 37		            jmp L38AC
  1075 37BE 20 1E 38		L38BC       jsr L391C
  1076 37C1 F0 11		            beq L38D2
  1077 37C3 20 12 38		            jsr L3910
  1078 37C6 18			            clc
  1079 37C7 6D 3C 38		            adc READIFLO
  1080 37CA B1 D7		            lda ($D7),Y
  1081 37CC 6D 3D 38		            adc READIFHI
  1082 37CF 91 D7		            sta ($D7),Y
  1083 37D1 4C BE 37		            jmp L38BC
  1084 37D4 AE 3B 38		L38D2       ldx REALOOPCNT
  1085
  1086 37D7 BD 33 38		            lda CPYFROMADR,X
  1087 37DA 8D F5 37		            sta L38F2+1
  1088 37DD BD 34 38		            lda CPYFROMADR+1,X
  1089 37E0 8D F6 37		            sta L38F2+2
  1090
  1091 37E3 BD 37 38		            lda CPYTOADR,X
  1092 37E6 8D F8 37		            sta L38F2+4
  1093 37E9 BD 38 38		            lda CPYTOADR+1,X
  1094 37EC 8D F9 37		            sta L38F2+5
  1095
  1096 37EF BC 36 38		            ldy CPYLENGTH+1,X
  1097 37F2 A2 00		            ldx #$00
  1098 37F4 BD FF FF		L38F2       lda $FFFF,X
  1099 37F7 9D FF FF		            sta $FFFF,X
  1100 37FA E8			            inx
  1101 37FB D0 F7		            bne L38F2
  1102 37FD EE F6 37		            inc L38F2+2
  1103 3800 EE F9 37		            inc L38F2+5
  1104 3803 88			            dey
  1105 3804 10 EE		            bpl L38F2
  1106 3806 AD 3B 38		            lda REALOOPCNT
  1107 3809 18			            clc
  1108 380A 69 0C		            adc #$0C
  1109 380C 8D 3B 38		            sta REALOOPCNT
  1110 380F 4C 6E 37		            jmp REALOOP
  1111 				            
  1112 3812 AD FF FF		L3910       lda $FFFF
  1113 3815 EE 13 38		            inc L3910+1
  1114 3818 D0 03		            bne L391B
  1115 381A EE 14 38		            inc L3910+2
  1116 381D 60			L391B       rts
  1117
  1118 381E 20 12 38		L391C       jsr L3910
  1119 3821 85 D7		            sta $D7
  1120 3823 20 12 38		            jsr L3910
  1121 3826 A0 00		            ldy #$00
  1122 3828 85 D8		            sta $D8
  1123 382A 05 D7		            ora $D7
  1124 382C 60			            rts
  1125
  1126 				; realloc code pointer
  1127 382D 26 37		REATABADR   .word REATAB
  1128 382F BC 34		REASRCADR   .word REABEGIN
  1129 3831 FF FF		READSTADR   .word $FFFF
  1130 				; copy code pointer
  1131 3833 BC 34		CPYFROMADR  .word REABEGIN
  1132 3835 4A 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1133 3837 FF FF		CPYTOADR    .word $FFFF
  1134 3839 00 00		            .word $0000
  1135 				            
  1136 				; $01 byte
  1137 383B			REALOOPCNT  ;= $392B
  1138 = 383C			READIFLO   = REALOOPCNT+1
  1139 = 383D			READIFHI   = READIFLO+1
  1140
  1141
  1142 				         
