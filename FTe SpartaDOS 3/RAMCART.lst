mads 2.0.9
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0303			DSTATS		= $0303
    41 = 0304			DBUFLO      = $0304
    42 = 0305			DBUFHI      = $0305
    43 = 0308			DBYTLO      = $0308
    44 = 0309			DBYTHI      = $0309
    45 = 030A			DAUX1       = $030A
    46 = 030B			DAUX2       = $030B
    47 = 0340			IOCB0       = $0340
    48 				; 
    49 				; PIA
    50 				; 
    51 = D300			PORTA       = $D300
    52 = D301			PORTB       = $D301
    53 = D302			PACTL       = $D302
    54 = D303			PBCTL       = $D303
    55 				; 
    56 				; ANTIC
    57 				;
    58 = D400			DMACTL      = $D400 
    59 = D40A			WSYNC       = $D40A
    60 = D40E			NMIEN       = $D40E
    61 				; 
    62 				; ROM VECTORS
    63 				; 
    64 = E456			CIOV        = $E456
    65 				;
    66 				; SpartaDOS 
    67 				;
    68 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    69 = 003F			SD_LBUF        = $3F ; offset to line buffer
    70 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    71 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    72 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    73
    74 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    75 				; 
    76 				; The!Cart programming information
    77 				; (c) 2013 Matthias Reichl
    78 				;
    79 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    80 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    81 				; 25AA020A). The memory is addressed using 16384 8k banks
    82 				; (64 8k banks when using RAM instead of flash).
    83 				; 
    84 				; The cartridge configuration registers are located at
    85 				; $D5A0-$D5A8. All registers are read/write unless noted
    86 				; otherwise. Unused bits shall be written as '0' and
    87 				; always read back as '0'.
    88 				; 
    89 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    90 				; flash bank 0, writes to flash are disabled.
    91 				; 
    92 				; Depending on the selected cartridge mode additional
    93 				; registers are enabled at $D5xx.
    94 				; 
    95 				; The primary bank register also serves as a base bank
    96 				; register for the various sub-modes.
    97 				; 
    98 				; The secondary bank register is only used in "flexi mode".
    99 				;
   100
   101 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102 				; 
   103 				; The!Cart Register (from-to,default)
   104 				;
   105
   106 				; Mode Select
   107 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   108 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   109 				; other than the ones listed here are reserved (and result
   110 				; in "cartridge off"):
   111 				; $00: off, cartridge disabled
   112 				; $01: 8k banks at $A000
   113 				; $02: AtariMax 1MBit / 128k
   114 				; $03: Atarimax 8MBit / 1MB
   115 				; $04: OSS M091
   116 				; $08: SDX 64k cart, $D5Ex banking
   117 				; $09: Diamond GOS 64k cart, $D5Dx banking
   118 				; $0A: Express 64k cart, $D57x banking
   119 				; $0C: Atrax 128k cart
   120 				; $0D: Williams 64k cart
   121 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   122 				; $21: standard 16k cart at $8000-$BFFF
   123 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   124 				; $23: Blizzard 16k
   125 				; $24: Sic!Cart 512k
   126 				; $28: 16k Mega cart
   127 				; $29: 32k Mega cart
   128 				; $2A: 64k Mega cart
   129 				; $2B: 128k Mega cart
   130 				; $2C: 256k Mega cart
   131 				; $2D: 512k Mega cart
   132 				; $2E: 1024k Mega cart
   133 				; $2F: 2048k Mega cart
   134 				; $30: 32k XEGS cart
   135 				; $31: 64k XEGS cart
   136 				; $32: 128k XEGS cart
   137 				; $33: 256k XEGS cart
   138 				; $34: 512k XEGS cart
   139 				; $35: 1024k XEGS cart
   140 				; $38: 32k SWXEGS cart
   141 				; $39: 64k SWXEGS cart
   142 				; $3A: 128k SWXEGS cart
   143 				; $3B: 256k SWXEGS cart
   144 				; $3C: 512k SWXEGS cart
   145 				; $3D: 1024k SWXEGS cart
   146 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   147 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   148 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   149 				                         ; separate 8k banks at $A000 and $8000
   150 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   151
   152 				; how to figure out that The!Cart is not active?
   153 				; If the address is not used then the XL returns $ff but
   154 				; the XE (and old 800) return $d5 (high byte of address,
   155 				; the value of the last bus cycle)
   156 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   157 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   158
   159 				; Mode Flash/RAM Select
   160 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   161 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   162 				; bit 1: primary bank source (0=flash, 1=RAM)
   163 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   164 				; bit 3: secondary bank source (0=flash, 1=RAM)
   165 = 0000			TCMOFR.FLASH = $00
   166 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   167 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   168
   169 				; Primary Bank
   170 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   171 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   172 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   173
   174 				; Secondary Bank 
   175 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   176 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   177 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   178
   179 				; SPI interface to EEPROM
   180 = D5A8			TCINEP = $d5a8
   181 				; bit 0: SPI CLK
   182 				; bit 1: SPI CS
   183 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   184
   185 				; configuration lock
   186 = D5AF			TCCOLO = $d5af
   187 				; Writing to this register disables "The!Cart" registers
   188 				; at $d5aX.
   189
   190
   191 				; macros
   192
   193 				; saves register: pushes bank register on stack
   194 				M_cart_push .macro
   195 				            lda TCPBEN
   196 				            pha
   197 				            lda TCMOSL
   198 				            pha
   199 				            lda TCMOFR
   200 				            pha
   201 				            lda TCPBRL
   202 				            pha
   203 				            lda TCPBRH
   204 				            pha
   205 				            .endm
   206
   207 				; restores register from stack: pops from stack
   208 				M_cart_pop  .macro
   209 				            pla                 
   210 				            sta TCPBRH          
   211 				            pla                 
   212 				            sta TCPBRL          
   213 				            pla                 
   214 				            sta TCMOFR          
   215 				            pla                 
   216 				            sta TCMOSL          
   217 				            pla                 
   218 				            sta TCPBEN          
   219 				            .endm
   220 				 
   221 				; set bank: number of bank in X, uses A
   222 				M_cart_set  .macro
   223 				; set new The!Cart mode
   224 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   225 				            sta TCMOSL          
   226 				            lda #TCMOFR.PBRAM       ; set to RAM
   227 				            sta TCMOFR
   228 				            txa
   229 				            asl   
   230 				            sta TCPBRL              ; get bank number from X
   231 				            lda #$00                     
   232 				            sta TCPBRH              ; set high to $00
   233 				            lda #$01
   234 				            sta TCPBEN              ; enable        
   235 				            .endm
   236 				;
   237 				; Start of code
   238 				;
   239 				            org $3000
   240 				            
   241 				; info message
   242 FFFF> 3000-3823> 20 06 +             jsr PRINT
   243 3003 54 68 65 21 52 61 +             .byte 'The!Ramdisk for The!Cart ver66 by hjx',$9B,$FF
   244
   245 				; check for The!Cart
   246 302A AD A6 D5		             lda TCMOSL
   247 302D C9 FF		             cmp #TCMOSL.XLLOCK
   248 302F F0 04		             beq NORAMDISK
   249 3031 C9 D5		             cmp #TCMOSL.XELOCK
   250 3033 D0 23		             bne RAMDISKINI
   251 3035			NORAMDISK
   252 				; no banks            
   253 3035 20 06 36		            jsr PRINT
   254 3038 20 20 45 72 72 6F +             .byte '  Error: The!Cart not found',$9B,$FF
   255 3055 4C 4E 31		            jmp PRNHLP
   256 				                        
   257 3058			RAMDISKINI
   258 				; check for parameter
   259 3058 20 7E 35					jsr PARAMCHECK
   260 305B B0 23		            bcs PRSPARM
   261 				; no parameter -> error
   262 305D 20 06 36		            jsr PRINT
   263 3060 20 20 45 72 72 6F +             .byte '  Error: No parameter',$9B,$FF
   264 3077 4C 4E 31		            jmp PRNHLP
   265
   266 				; jump for jsr to crunch name
   267 307A 4C FF FF		CRNAME      jmp $FFFF
   268
   269 307D 00			CHKFRMT     .byte $00
   270 307E 00			CHKDRVR     .byte $00
   271 307F 00			CHKOPTN     .byte $00
   272
   273 				; set crunch name address
   274 3080 A5 0A		PRSPARM     lda DOSVEC
   275 3082 18			            clc
   276 3083 69 03		            adc #SD_ZCRNAME
   277 3085 8D 7B 30		            sta CRNAME+1
   278 3088 A5 0B		            lda DOSVEC+1
   279 308A 69 00		            adc #$00
   280 308C 8D 7C 30		            sta CRNAME+2
   281 				            
   282 				; parameter parsing            
   283 				; get drive number SD_COMFNAM starts alway with Dx:
   284 308F 20 7A 30		            jsr CRNAME
   285 3092 D0 4B		            bne PARAMERR1
   286 3094 A0 21		            ldy #SD_COMFNAM
   287 3096 B1 0A		            lda (DOSVEC),Y
   288 3098 C9 44					cmp #'D'
   289 309A D0 43					bne PARAMERR1         
   290 309C C8			            iny
   291 309D B1 0A		            lda (DOSVEC),Y
   292 309F 29 0F		            and #$0F
   293 30A1 8D 1F 38		            sta DRVNUM
   294
   295 				; check for list auf drives for flash drives
   296 30A4 A2 00					ldx #$00
   297 30A6 8E CA 30					stx FPARSLOOPX+1
   298 30A9 20 7E 35		FPARSLOOP	jsr PARAMCHECK
   299 30AC 90 58		            bcc PRSPAREND
   300 30AE 20 7A 30					jsr CRNAME
   301 30B1 D0 26		            bne PARAMOPT
   302 30B3 A0 21		            ldy #SD_COMFNAM
   303 30B5 B1 0A		            lda (DOSVEC),Y
   304 30B7 C9 44					cmp #'D'
   305 30B9 D0 76					bne PARAMERR            
   306 30BB C8			            iny
   307 30BC B1 0A		            lda (DOSVEC),Y
   308 30BE 29 0F		            and #$0F
   309 30C0 AE CA 30					ldx FPARSLOOPX+1
   310 30C3 9D 20 38		            sta FDRVNUM,X
   311 30C6 EE CA 30		            inc FPARSLOOPX+1
   312 30C9 A2 04		FPARSLOOPX	ldx #$04
   313 30CB E0 04		            cpx #$04
   314 30CD D0 DA		            bne FPARSLOOP
   315 				            
   316 				; check options /xxx
   317 30CF 20 7E 35					jsr PARAMCHECK
   318 30D2 90 32		            bcc PRSPAREND
   319 30D4 20 7A 30		            jsr CRNAME
   320 30D7 F0 58		            beq PARAMERR
   321
   322 30D9 A0 24		PARAMOPT	ldy #SD_COMFNAM+3
   323 30DB B1 0A		            lda (DOSVEC),Y
   324 30DD C9 2F		            cmp #'/'
   325 30DF D0 50		PARAMERR1   bne PARAMERR
   326 30E1 C8			PRSPARLOOP  iny
   327 30E2 B1 0A		            lda (DOSVEC),Y
   328
   329 30E4 C9 9B		            cmp #$9B         ; end of parameter
   330 30E6 F0 1E		            beq PRSPAREND
   331 				            
   332 30E8 C9 46		PRSPARNXT1  cmp #'F'         ; format only ?
   333 30EA D0 0B		            bne PRSPARNXT2
   334 30EC A9 FF		            lda #$FF
   335 30EE 8D 7F 30		            sta CHKOPTN
   336 30F1 8D 7D 30		            sta CHKFRMT
   337 30F4 4C E1 30		            jmp PRSPARLOOP
   338
   339 30F7 C9 44		PRSPARNXT2  cmp #'D'         ; driver only ?
   340 30F9 D0 36		            bne PARAMERR
   341 30FB A9 FF		            lda #$FF
   342 30FD 8D 7F 30		            sta CHKOPTN
   343 3100 8D 7E 30		            sta CHKDRVR
   344 3103 4C E1 30		            jmp PRSPARLOOP
   345
   346 3106			PRSPAREND
   347 3106 20 7E 35					jsr PARAMCHECK	; too many parameter
   348 3109 B0 26		            bcs PARAMERR
   349
   350 				; set format and ini by options
   351 310B 2C 7F 30		            bit CHKOPTN
   352 310E 30 08		            bmi STRTINIFMT ; no options set default /DF
   353 3110 A9 FF		            lda #$FF
   354 3112 8D 7E 30		            sta CHKDRVR
   355 3115 8D 7D 30		            sta CHKFRMT
   356 3118			STRTINIFMT
   357 				; install driver requested
   358 3118 2C 7E 30		            bit CHKDRVR
   359 311B 10 03		            bpl NOINIDRV
   360 311D 20 39 32		            jsr STARTINST
   361 3120			NOINIDRV
   362 				; format if requested
   363 3120 2C 7F 30		            bit CHKOPTN
   364 3123 30 03		            bmi NOPREFRMT
   365 3125 20 BE 33		            jsr CHECKFRMT
   366 3128			NOPREFRMT
   367 3128 2C 7D 30		            bit CHKFRMT
   368 312B 10 03		            bpl NOFRMTRD
   369 312D 20 E5 32		            jsr FRMTRD
   370 3130			NOFRMTRD
   371 3130 60			            rts
   372
   373 3131 20 06 36		PARAMERR    jsr PRINT
   374 3134 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter',$9B,$FF
   375 314E			PRNHLP
   376 314E 20 06 36		            jsr PRINT
   377 3151 20 20 50 61 72 61 +             .byte '  Parameter: Dx: [Da:]..[Dd:] [/DF]',$9B
   378 3175 20 20 20 20 78 20 +             .byte '    x - number for ramdisk',$9B
   379 3190 20 20 20 20 61 2D +             .byte '    a-d - number for flash disk 1-4',$9B
   380 31B4 20 20 20 20 44 20 +             .byte '    D - install driver only',$9B
   381 31D0 20 20 20 20 46 20 +             .byte '    F - format ramdisk only',$9B
   382 31EC 20 20 55 73 65 20 +             .byte '  Use shift+return/esc in start menu.',$9B
   383 3212 20 20 49 66 20 44 +             .byte '  If Dx: equals Da-d:, Dx: precedes.',$9B,$FF
   384 3238 60			            rts
   385
   386
   387 3239			STARTINST   
   388 3239 20 06 36		            jsr PRINT
   389 323C 44 72 69 76 65 72 +             .byte 'Driver installed',$9b,$ff
   390
   391 324E AD 1F 38		            lda DRVNUM
   392 3251 F0 14		            beq PRTFLASHDRV
   393 3253 18			            clc
   394 3254 69 30		            adc #'0'
   395 3256 8D 63 32		            sta ramDx
   396 3259 20 06 36					jsr PRINT
   397 325C 20 20 52 41 4D 3D +             .byte '  RAM=D'
   398 3263 78 3A 9B FF		ramDx       .byte 'x:',$9b,$ff
   399
   400 3267			PRTFLASHDRV
   401 3267 A2 00					ldx #$00
   402 3269 8E 93 32					stx PRNDRVLPX+1
   403 326C AE 93 32		PRNDRVLP	ldx PRNDRVLPX+1
   404 326F BD 20 38		            lda FDRVNUM,X
   405 3272 F0 1B		            beq PRTDRVNXT
   406 3274 18			            clc
   407 3275 69 30		            adc #'0'
   408 3277 8D 8B 32		            sta flashDy
   409 327A 8A			            txa
   410 327B 18			            clc
   411 327C 69 31		            adc #'1'
   412 327E 8D 87 32		            sta flashDx
   413 3281 20 06 36					jsr PRINT
   414 3284 20 20 46					.byte '  F'
   415 3287 78 3A 3D 44		flashDx		.byte 'x:=D'
   416 328B 79 3A 9B FF		flashDy     .byte 'y:',$9b,$ff
   417 328F EE 93 32		PRTDRVNXT	inc PRNDRVLPX+1
   418 3292 A2 04		PRNDRVLPX	ldx #$04
   419 3294 E0 04					cpx #$04
   420 3296 D0 D4					bne PRNDRVLP
   421
   422 3298			PRTDRVEND
   423 				; set jsr to original DOSINI
   424 3298 A5 0C		            lda DOSINI
   425 329A 8D 3D 36		            sta JSRDOSINI+1
   426 329D A5 0D		            lda DOSINI+1
   427 329F 8D 3E 36		            sta JSRDOSINI+2
   428
   429 				; set MEMLO oldaddress, realloc
   430 32A2 AD E7 02		            lda MEMLO
   431 32A5 8D D7 39		            sta READSTADR
   432 32A8 8D DD 39		            sta CPYTOADR
   433 32AB AD E8 02		            lda MEMLO+1
   434 32AE 8D D8 39		            sta READSTADR+1
   435 32B1 8D DE 39		            sta CPYTOADR+1
   436 				;
   437 				; start realloc
   438 				;
   439 32B4 20 0F 39		            jsr REASTART
   440
   441 				; set new DOSINI            
   442 32B7 A9 3C		REAL001     lda #<JSRDOSINI
   443 32B9 85 0C		            sta DOSINI
   444 32BB A9 36		REAH001     lda #>JSRDOSINI
   445 32BD 85 0D		            sta DOSINI+1
   446 				; get SIO and patch for RAMDISK
   447 32BF 38			            sec
   448 32C0 A5 0A		            lda DOSVEC
   449 32C2 E9 0A		            sbc #SD_LSIO
   450 32C4 85 32		            sta BUFRLO
   451 32C6 A5 0B		            lda DOSVEC+1
   452 32C8 E9 00		            sbc #$00
   453 32CA 85 33		            sta BUFRHI
   454 32CC A0 00		            ldy #$00
   455 32CE B1 32		            lda (BUFRLO),Y
   456 32D0 8D 69 36		REAA001     sta JMPSIO+1      ;realloc $33CA
   457 32D3 A9 4A		REAL002     lda #<RAMDSIO
   458 32D5 91 32		            sta (BUFRLO),Y
   459 32D7 C8			            iny
   460 32D8 B1 32		            lda (BUFRLO),Y
   461 32DA 8D 6A 36		REAA002     sta JMPSIO+2      ;realloc $33D4
   462 32DD A9 36		REAH002     lda #>RAMDSIO
   463 32DF 91 32		            sta (BUFRLO),Y
   464 				; set MEMLO            
   465 32E1 20 3F 36		REAA003     jsr SETMEMLO      ;realloc $33DB
   466 32E4 60			            rts
   467
   468 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   469 				;
   470 				; format ramdisk
   471 				;
   472 32E5 20 06 36		FRMTRD      jsr PRINT
   473 32E8 52 61 6D 64 69 73 +             .byte 'Ramdisk formatted',$9B,$FF
   474
   475 32FB 20 96 35		            jsr cart_save
   476
   477 				; header loop            
   478 32FE A2 00		            ldx #$00
   479 3300 20 DC 35		            jsr cart_set
   480 3303 A0 7F		            ldy #$7f
   481 3305 B9 E7 33		_loophead1  lda RDSEC1,Y
   482 3308 99 00 80		            sta $8000,Y		; sector 1
   483 330B 88			            dey
   484 330C 10 F7		            bpl _loophead1
   485 330E 20 B5 35		            jsr cart_restore
   486
   487 3311 A2 00		            ldx #$00
   488 3313 20 DC 35		            jsr cart_set
   489 3316 A0 7F		            ldy #$7f
   490 3318 B9 67 34		_loophead2  lda RDSEC2,Y
   491 331B 99 80 80		            sta $8080,Y		; sector 2
   492 331E 88			            dey
   493 331F 10 F7		            bpl _loophead2
   494 3321 20 B5 35		            jsr cart_restore
   495
   496 3324 A2 00		            ldx #$00
   497 3326 20 DC 35		            jsr cart_set
   498 3329 A0 7F		            ldy #$7f
   499 332B B9 E7 34		_loophead3  lda RDSEC3,Y
   500 332E 99 00 81		            sta $8100,Y		; sector 3
   501 3331 88			            dey
   502 3332 10 F7		            bpl _loophead3
   503 3334 20 B5 35		            jsr cart_restore
   504
   505 				; set sector 4-7 to $ff VTOV 512k = 4096 sectors
   506 				; = 4 VTOC sectors
   507 3337 A2 00		_loop47     ldx #$00
   508 3339 20 DC 35		            jsr cart_set
   509 333C A9 FF		            lda #$ff
   510 333E A0 7F		            ldy #$7f
   511 3340 99 80 81		FRMTCLP47   sta $8180,Y
   512 3343 88			            dey
   513 3344 10 FA		            bpl FRMTCLP47
   514 3346 20 B5 35		            jsr cart_restore
   515 3349 AD 41 33		            lda FRMTCLP47+1
   516 334C 18			            clc
   517 334D 69 80		            adc #$80
   518 334F 8D 41 33		            sta FRMTCLP47+1
   519 3352 AD 42 33		            lda FRMTCLP47+2
   520 3355 69 00		            adc #$00
   521 3357 8D 42 33		            sta FRMTCLP47+2
   522 335A A9 04		_loopcnt47  lda #$04
   523 335C CE 5B 33		            dec _loopcnt47+1
   524 335F D0 D6		            bne _loop47
   525
   526 				; clear sector 8-11 
   527 3361 A2 00		_loop89     ldx #$00
   528 3363 20 DC 35		            jsr cart_set
   529 3366 A9 00		            lda #$00
   530 3368 A0 7F		            ldy #$7f
   531 336A 99 80 83		FRMTCLP89   sta $8380,Y
   532 336D 88			            dey
   533 336E 10 FA		            bpl FRMTCLP89
   534 3370 20 B5 35		            jsr cart_restore
   535 3373 AD 6B 33		            lda FRMTCLP89+1
   536 3376 18			            clc
   537 3377 69 80		            adc #$80
   538 3379 8D 6B 33		            sta FRMTCLP89+1
   539 337C AD 6C 33		            lda FRMTCLP89+2
   540 337F 69 00		            adc #$00
   541 3381 8D 6C 33		            sta FRMTCLP89+2
   542 3384 A9 04		_loopcnt89  lda #$04
   543 3386 CE 85 33		            dec _loopcnt89+1
   544 3389 D0 D6		            bne _loop89
   545
   546 338B A2 00		            ldx #$00
   547 338D 20 DC 35		            jsr cart_set
   548 				; mark used sectors
   549 3390 A9 00		            lda #$00
   550 3392 8D 80 81		            sta $8180   ; sector 1-8
   551 3395 A9 1F		            lda #$1f
   552 3397 8D 81 81		            sta $8181   ; sector 9-11
   553 				; set sector map for MAIN
   554 339A A9 00		            lda #$00    ; two words $0000 (first and last)
   555 339C 8D 00 84		            sta $8400
   556 339F 8D 01 84		            sta $8401
   557 33A2 8D 02 84		            sta $8402
   558 33A5 8D 03 84		            sta $8403
   559 33A8 A9 0A		            lda #$0a    ;  and third $0009 start of main
   560 33AA 8D 04 84		            sta $8404
   561 				; set MAIN directory            
   562 33AD A2 00		            ldx #$00
   563 33AF BD 67 35		_loopmain   lda RDMAIN,x
   564 33B2 9D 80 84		            sta $8480,x
   565 33B5 E8			            inx
   566 33B6 E0 17		            cpx #$17
   567 33B8 D0 F5		            bne _loopmain
   568 33BA 20 B5 35		            jsr cart_restore
   569 				; finished
   570 33BD 60			            rts
   571
   572 				; check preformat
   573 33BE			checkfrmt
   574 33BE 20 96 35		            jsr cart_save
   575 33C1 A2 00		            ldx #$00
   576 33C3 20 DC 35		            jsr cart_set
   577
   578 33C6 BD 6D 35		_nxtcharv   lda RDMAINNAME,x    ; check volume name
   579 33C9 DD 86 84		            cmp $8486,x			; sector $09
   580 33CC D0 0F		            bne _nofrmt
   581 33CE E8			            inx
   582 33CF E0 0B		            cpx #$0b
   583 33D1 D0 F3		            bne _nxtcharv
   584 				            
   585 33D3 20 B5 35		            jsr cart_restore
   586 33D6 A9 00		            lda #$00
   587 33D8 8D 7D 30		            sta CHKFRMT
   588 33DB 38			            sec
   589 33DC 60			            rts
   590 				            
   591 33DD 20 B5 35		_nofrmt     jsr cart_restore
   592 33E0 A9 FF		            lda #$FF
   593 33E2 8D 7D 30		            sta CHKFRMT
   594 33E5 18			            clc
   595 33E6 60			            rts
   596
   597 				; load boot sector to $3000 start $3080 and RTS ($60)
   598 33E7			RDSEC1
   599 33E7 00						.byte $00 ; Usually 0. Some formatting tools put a $53 (='S) for SD here.
   600 33E8 03			            .byte $03 ; Number of sectors to boot.
   601 33E9 00 30		            .byte $00,$30 ; Address where the boot sectors are loaded to
   602 33EB E0 07		            .byte $E0,$07 ; This address is copied to DOSINI
   603 33ED 4C 80 30		            .byte $4c,$80,$30 ; After boot jump here: jmp $3080 (just RTS)
   604 33F0 09 00		            .byte $09,$00 ; Sector number of the first sector map of the MAIN directory
   605 33F2 00 10		            .word $1000 ; total sector count
   606 33F4 F5 0F		            .word $0ff5 ; free sector count
   607 33F6 05			            .byte $05 ; Number of bit map sectors on the disk
   608 33F7 04 00		            .byte $04,$00 ; Sector number of the first bit map sector
   609 33F9 51 00		            .byte $51,$00 ; Sector number to begin the file data sector allocation search
   610 33FB 0B 00		            .byte $0B,$00 ; Sector number to begin the directory data sector allocation search
   611 33FD 43 41 52 54 35 31 +             .byte 'CART512K' ; Volume name, 8 chars
   612 3405 01			            .byte $01 ; Tracks on disk (1 for ramdisks and HDs)
   613 3406 80			            .byte $80 ; Sector size ($80=128,$00=256,$01=512)
   614 				;            .byte $20 ; File system version ($20=SD1.1-4.2 version 2.0, $21=Sd4.4> version 2.1) 
   615 				;            .byte $00,$00,$00,$00,$00 ; reserved - no known use
   616 				;            .byte $00 ; Volume sequence number
   617 				;            .byte $00 ; Volume random number
   618 				;            .byte $00,$00 ; Sector number of the first sector map of the file to be loaded when the disk is booted
   619 				;            .byte $00 ; Lock flag ($ff=locked, $00=unlocked)
   620 				;            .byte $00
   621 3407 20 06 01 FF FF 00 + 			.byte $20,$06,$01,$FF,$FF,$00,$00,$E4
   622 340F 00 00 00 00 00 00 + 			.byte $00,$00,$00,$00,$00,$00,$00,$00
   623 3417 45 72 72 6F 72 3A + 			.byte $45,$72,$72,$6F,$72,$3A,$20,$4E
   624 341F 6F 20 44 4F 53 9B + 			.byte $6F,$20,$44,$4F,$53,$9B,$AD,$28
   625 3427 30 8D 0A 03 AD 29 + 			.byte $30,$8D,$0A,$03,$AD,$29,$30,$8D
   626 342F 0B 03 A9 00 A2 2F + 			.byte $0B,$03,$A9,$00,$A2,$2F,$20,$F1
   627 3437 30 AD 00 2F 8D 28 + 			.byte $30,$AD,$00,$2F,$8D,$28,$30,$AD
   628 343F 01 2F 8D 29 30 A0 + 			.byte $01,$2F,$8D,$29,$30,$A0,$04,$84
   629 3447 91 A4 91 CC 1F 30 + 			.byte $91,$A4,$91,$CC,$1F,$30,$F0,$D6
   630 344F B9 00 2F 8D 0A 03 + 			.byte $B9,$00,$2F,$8D,$0A,$03,$B9,$01
   631 3457 2F 8D 0B 03 C8 C8 + 			.byte $2F,$8D,$0B,$03,$C8,$C8,$84,$91
   632 345F 60 6C E2 02 00 00 + 			.byte $60,$6C,$E2,$02,$00,$00,$00,$00
   633
   634 3467			RDSEC2
   635 3467 A2 00 AD 1F 30 85 + 			.byte $A2,$00,$AD,$1F,$30,$85,$91,$85
   636 346F 90 8D 08 03 D0 01 + 			.byte $90,$8D,$08,$03,$D0,$01,$E8,$8E
   637 3477 09 03 20 0A 31 85 + 			.byte $09,$03,$20,$0A,$31,$85,$96,$20
   638 347F 0A 31 25 96 C9 FF + 			.byte $0A,$31,$25,$96,$C9,$FF,$D0,$37
   639 3487 A9 78 8D E2 02 A9 + 			.byte $A9,$78,$8D,$E2,$02,$A9,$30,$8D
   640 348F E3 02 20 0A 31 85 + 			.byte $E3,$02,$20,$0A,$31,$85,$92,$20
   641 3497 0A 31 85 93 05 92 + 			.byte $0A,$31,$85,$93,$05,$92,$F0,$1C
   642 349F 20 0A 31 38 E5 92 + 			.byte $20,$0A,$31,$38,$E5,$92,$48,$08
   643 34A7 20 0A 31 28 E5 93 + 			.byte $20,$0A,$31,$28,$E5,$93,$85,$95
   644 34AF 68 85 94 20 6B 31 + 			.byte $68,$85,$94,$20,$6B,$31,$20,$79
   645 34B7 30 4C A0 30 6C E0 + 			.byte $30,$4C,$A0,$30,$6C,$E0,$02,$A9
   646 34BF 30 A2 30 8D 44 03 + 			.byte $30,$A2,$30,$8D,$44,$03,$8E,$45
   647 34C7 03 8E 48 03 A9 09 + 			.byte $03,$8E,$48,$03,$A9,$09,$8D,$42
   648 34CF 03 A2 00 20 56 E4 + 			.byte $03,$A2,$00,$20,$56,$E4,$4C,$EE
   649 34D7 30 A0 40 8C 03 03 + 			.byte $30,$A0,$40,$8C,$03,$03,$8D,$04
   650 34DF 03 8E 05 03 AD 0A + 			.byte $03,$8E,$05,$03,$AD,$0A,$03,$0D
   651
   652 34E7			RDSEC3
   653 34E7 0B 03 F0 D3 20 59 + 			.byte $0B,$03,$F0,$D3,$20,$59,$E4,$30
   654 34EF CE 60 A9 00 85 95 + 			.byte $CE,$60,$A9,$00,$85,$95,$85,$94
   655 34F7 A6 90 EC 1F 30 F0 + 			.byte $A6,$90,$EC,$1F,$30,$F0,$06,$BD
   656 34FF 00 2E E6 90 60 20 + 			.byte $00,$2E,$E6,$90,$60,$20,$61,$30
   657 3507 A5 95 D0 17 AD 1F + 			.byte $A5,$95,$D0,$17,$AD,$1F,$30,$F0
   658 350F 04 A5 94 30 0E A9 + 			.byte $04,$A5,$94,$30,$0E,$A9,$00,$A2
   659 3517 2E 20 F1 30 38 26 + 			.byte $2E,$20,$F1,$30,$38,$26,$90,$AD
   660 351F 00 2E 60 A5 92 A6 + 			.byte $00,$2E,$60,$A5,$92,$A6,$93,$20
   661 3527 F1 30 A5 92 18 6D + 			.byte $F1,$30,$A5,$92,$18,$6D,$08,$03
   662 352F 85 92 A5 93 6D 09 + 			.byte $85,$92,$A5,$93,$6D,$09,$03,$85
   663 3537 93 38 A5 94 ED 08 + 			.byte $93,$38,$A5,$94,$ED,$08,$03,$85
   664 353F 94 A5 95 ED 09 03 + 			.byte $94,$A5,$95,$ED,$09,$03,$85,$95
   665 3547 4C 1D 31 A5 94 D0 + 			.byte $4C,$1D,$31,$A5,$94,$D0,$02,$C6
   666 354F 95 C6 94 20 10 31 + 			.byte $95,$C6,$94,$20,$10,$31,$A0,$00
   667 3557 91 92 E6 92 D0 02 + 			.byte $91,$92,$E6,$92,$D0,$02,$E6,$93
   668 355F A5 94 05 95 D0 E5 + 			.byte $A5,$94,$05,$95,$D0,$E5,$60,$00
   669
   670
   671
   672 3567 28			RDMAIN      .byte $28 ; Bits 7-0: OpenWrite,-,SubDir,Del,Used,Arc,Hid,Prot
   673 3568 00 00		            .word $0000 ; First sector map of parent directory (MAIN=0)
   674 356A 17 00 00		            .byte $17,$00,$00 ; length of directory in bytes (always times 23 bytes)
   675 356D 4D 41 49 4E 20 20 + RDMAINNAME  .byte 'MAIN       ' ; Name 11 chars
   676 3578 0B 07 47		            .byte $0b,$07,$47 ; Date DD/MM/YY
   677 357B 0B 0B 0B		            .byte $0b,$0b,$0b ; Time HH:MM:SS
   678 				            
   679 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   680 				;
   681 				; parameter subroutines            
   682 				;
   683
   684 				;
   685 				; check for next parameter
   686 				;   sets carry if next parameter is available
   687 				;
   688 357E A0 0A		PARAMCHECK	ldy #SD_BUFOFF
   689 3580 B1 0A		            lda (DOSVEC),Y
   690 3582 18			            clc
   691 3583 69 3F		            adc #SD_LBUF
   692 3585 A8			            tay
   693 3586 B1 0A		            lda (DOSVEC),Y
   694 3588 C9 9B		            cmp #$9b
   695 358A 18			            clc
   696 358B F0 01		            beq PARAMCHECKE
   697 358D 38						sec
   698 358E 60			PARAMCHECKE	rts
   699 				            
   700 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   701 				;
   702 				; subroutines for The Cart
   703 				;
   704
   705 				; wait for sync            
   706 358F A5 14		WAITSYNC    lda RTCLOK+2
   707 3591 C5 14		WAITLOOP    cmp RTCLOK+2
   708 3593 F0 FC		            beq WAITLOOP
   709 3595 60			            rts
   710
   711 3596			cart_save
   712 3596 AD A6 D5		            lda TCMOSL
   713 3599 8D 01 36		            sta _tcmosl
   714 359C AD A7 D5		            lda TCMOFR
   715 359F 8D 02 36		            sta _tcmofr
   716 35A2 AD A0 D5		            lda TCPBRL
   717 35A5 8D 03 36		            sta _tcpbrl
   718 35A8 AD A1 D5		            lda TCPBRH
   719 35AB 8D 04 36		            sta _tcpbrh
   720 35AE AD A2 D5		            lda TCPBEN
   721 35B1 8D 05 36		            sta _tcpben
   722
   723 35B4 60			            rts
   724
   725 35B5			cart_restore
   726 35B5 AD 01 36		            lda _tcmosl
   727 35B8 8D A6 D5		            sta TCMOSL
   728 35BB AD 02 36		            lda _tcmofr
   729 35BE 8D A7 D5		            sta TCMOFR
   730 35C1 AD 03 36		            lda _tcpbrl
   731 35C4 8D A0 D5		            sta TCPBRL
   732 35C7 AD 04 36		            lda _tcpbrh
   733 35CA 8D A1 D5		            sta TCPBRH
   734 35CD AD 05 36		            lda _tcpben
   735 35D0 8D A2 D5		            sta TCPBEN
   736
   737 35D3 A9 E0		            lda #$e0          ; enable interrupts
   738 35D5 8D 0E D4		            sta NMIEN
   739 35D8 58			            cli
   740 35D9 C6 42		            dec CRITIC 
   741
   742 35DB 60			            rts
   743
   744 35DC			cart_set
   745 35DC E6 42		            inc CRITIC 
   746 35DE 20 8F 35		            jsr WAITSYNC        ; wait for vblank
   747 35E1 78			            sei                 ; disable interrupt
   748 35E2 A9 00		            lda #$00
   749 35E4 8D 0E D4		            sta NMIEN
   750
   751 35E7 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   752 35E9 8D A6 D5		            sta TCMOSL          
   753 35EC A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   754 35EE 8D A7 D5		            sta TCMOFR
   755 35F1 8A			            txa
   756 35F2 0A			            asl   
   757 35F3 8D A0 D5		            sta TCPBRL              ; get bank number from X
   758 35F6 A9 00		            lda #$00                     
   759 35F8 8D A1 D5		            sta TCPBRH              ; set high to $00
   760 35FB A9 01		            lda #$01
   761 35FD 8D A2 D5		            sta TCPBEN              ; enable        
   762
   763 3600 60			            rts            
   764
   765 3601 00			_tcmosl     .byte $00
   766 3602 00			_tcmofr     .byte $00
   767 3603 00			_tcpbrl     .byte $00
   768 3604 00			_tcpbrh     .byte $00
   769 3605 00			_tcpben     .byte $00
   770
   771 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   772 				;
   773 				; print subroutine            
   774 				;
   775
   776 3606 68			PRINT       pla
   777 3607 8D 17 36		            sta PRINTITER+1
   778 360A 68			            pla
   779 360B 8D 18 36		            sta PRINTITER+2
   780 360E EE 17 36		PRINTLOOP   inc PRINTITER+1
   781 3611 D0 03		            bne PRINTITER
   782 3613 EE 18 36		            inc PRINTITER+2
   783 3616 AD FF FF		PRINTITER   lda $FFFF
   784 3619 C9 FF		            cmp #$FF
   785 361B F0 06		            beq PRINTEND
   786 361D 20 2C 36		            jsr CIOPUTCHR
   787 3620 4C 0E 36		            jmp PRINTLOOP
   788 3623 AD 18 36		PRINTEND    lda PRINTITER+2
   789 3626 48			            pha
   790 3627 AD 17 36		            lda PRINTITER+1
   791 362A 48			            pha
   792 362B 60			            rts
   793 				; call cio put char subroutine
   794 362C A2 00		CIOPUTCHR   ldx #$00
   795 362E 8E 48 03		            stx IOCB0+ICBLL
   796 3631 8E 49 03		            stx IOCB0+ICBLH
   797 3634 A0 0B		            ldy #$0B
   798 3636 8C 42 03		            sty IOCB0+ICCOM
   799 3639 4C 56 E4		            jmp CIOV
   800
   801
   802
   803 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   804 				;;; BEGIN OF REALLOC BLOCK
   805 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   806
   807 				; to realloc routines
   808 				; DOSINI set MEMLO at reset
   809 363C			REABEGIN
   810
   811 363C 20 00 00		JSRDOSINI   jsr $0000
   812 363F			SETMEMLO    
   813 363F A9 A4		REAL003     lda #<REAEND
   814 3641 8D E7 02		            sta MEMLO
   815 3644 A9 38		REAH003     lda #>REAEND
   816 3646 8D E8 02		            sta MEMLO+1
   817 3649 60			            rts
   818
   819 				; new DOSVEC for RAMDISK device
   820 364A AD 00 03		RAMDSIO     lda DDEVIC
   821 364D C9 31		            cmp #$31
   822 364F D0 17		            bne JMPSIO
   823 3651 AD 1F 38		REAA004     lda DRVNUM  ; check drive number for RAM
   824 3654 CD 01 03		            cmp DUNIT
   825 3657 F0 1E		            beq NEWSIOGO
   826
   827 3659 A2 00					ldx #$00
   828 365B BD 20 38		REAA026		lda FDRVNUM,X  ; check drive number for Flash
   829 365E CD 01 03		            cmp DUNIT
   830 3661 F0 08		            beq NEWSIOGOF
   831 3663 E8						inx
   832 3664 E0 04					cpx #$04
   833 3666 D0 F3					bne REAA026
   834
   835 3668 4C 00 00		JMPSIO      jmp $0000
   836
   837 				; set flash bank
   838 366B			NEWSIOGOF
   839 366B BD 17 38		REAA027		lda FBANKL,X
   840 366E 8D 71 37		REAA028		sta SFBANKL+1	
   841 3671 BD 1B 38		REAA029		lda FBANKH,X
   842 3674 8D 76 37		REAA030		sta SFBANKH+1
   843 				; set buffer address
   844 3677 AD 04 03		NEWSIOGO    lda DBUFLO
   845 367A 85 34		            sta BFENLO
   846 367C AD 05 03		            lda DBUFHI
   847 367F 85 35		            sta BFENHI
   848 				; load commad byte            
   849 3681 AD 02 03		            lda DCOMND
   850 				; command STATUS REQUEST
   851 3684 C9 53		            cmp #$53 
   852 3686 D0 1B		            bne NEXT1
   853 3688 AD 12 38		REAA009     lda CONFSECSIZ
   854 368B 4A			            lsr
   855 368C 4A			            lsr
   856 368D 49 30		            eor #$30
   857 368F AC 0E 38		REAA010     ldy L36BB
   858 3692 C0 1A		            cpy #$1A
   859 3694 D0 02		            bne L35B4
   860 3696 09 80		            ora #$80
   861 3698 A0 00		L35B4       ldy #$00
   862 369A 91 34		            sta (BFENLO),Y
   863 369C C8			            iny
   864 369D A9 FF		            lda #$FF
   865 369F 91 34		            sta (BFENLO),Y
   866 36A1 30 24		            bmi JMPSIOEND
   867 				            
   868 				; command RETURN CONFIGURATION            
   869 36A3 C9 4E		NEXT1       cmp #$4E
   870 36A5 D0 0C		            bne NEXT2
   871 36A7 A0 0B		            ldy #$0B            ; 12 bytes
   872 36A9			RETCNFLOOP
   873 36A9 B9 0B 38		REAA011     lda CONFBUF,Y
   874 36AC 91 34		            sta (BFENLO),Y
   875 36AE 88			            dey
   876 36AF 10 F8		            bpl RETCNFLOOP
   877 36B1 30 14		            bmi JMPSIOEND
   878
   879 				; command SET CONFIGURATION
   880 36B3 C9 4F		NEXT2       cmp #$4F
   881 36B5 D0 13		            bne NEXT3
   882 36B7 A0 07		            ldy #$07
   883 36B9 B1 34		            lda (BFENLO),Y
   884 36BB F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   885 36BD 8D 12 38		REAA012     sta CONFSECSIZ
   886 36C0 A0 03		            ldy #$03
   887 36C2 B1 34		            lda (BFENLO),Y
   888 36C4 8D 0E 38		REAA013     sta L36BB
   889
   890 36C7			JMPSIOEND
   891 36C7 4C 01 38		REAA014     jmp RDSIOEND
   892
   893 				; command FORMAT DISK
   894 36CA C9 21		NEXT3       cmp #$21
   895 36CC D0 0B		            bne NEXT4
   896 36CE A0 00		SIOFRMT     ldy #$00
   897 36D0 A9 FF		            lda #$FF
   898 36D2 91 34		            sta (BFENLO),Y
   899 36D4 C8			            iny
   900 36D5 91 34		            sta (BFENLO),Y
   901 36D7 D0 EE		            bne JMPSIOEND
   902
   903 				; command FORMAT DISK ENHANCED
   904 36D9 C9 22		NEXT4       cmp #$22
   905 36DB D0 0C		            bne NEXT5
   906 36DD A9 1A		            lda #$1A
   907 36DF 8D 0E 38		REAA015     sta L36BB
   908 36E2 A9 80		            lda #$80
   909 36E4 8D 12 38		REAA016     sta CONFSECSIZ
   910 36E7 D0 E5		            bne SIOFRMT
   911 				            
   912 				; command PUT/GET SECTOR 
   913 36E9 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   914 36EB F0 0B		            beq PUTGETSEC
   915 36ED C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   916 36EF F0 07		            beq PUTGETSEC
   917 36F1 C9 50		            cmp #$50            ; command PUT SECTOR
   918 36F3 F0 03		            beq PUTGETSEC
   919 36F5 4C 04 38		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   920 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   921 				; buffer address and calc byte count
   922 36F8 A9 00		PUTGETSEC   lda #$00
   923 36FA 85 32		            sta BUFRLO
   924 36FC AD 0A 03		            lda DAUX1
   925 36FF 38			            sec
   926 3700 E9 01		            sbc #$01
   927 3702 85 33		            sta BUFRHI
   928 3704 AD 0B 03		            lda DAUX2
   929 3707 E9 00		            sbc #$00
   930 3709 06 33		            asl BUFRHI
   931 370B 2A			            rol
   932 370C AA			            tax                 ; set X with memory bank number
   933 370D A5 33		            lda BUFRHI
   934 370F 4A			            lsr
   935 3710 4A			            lsr
   936 3711 66 32		            ror BUFRLO
   937 3713 09 80		            ora #$80
   938 3715 85 33		            sta BUFRHI
   939 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   940 				; set buffer address in copy loops
   941 3717 A5 32		            lda BUFRLO
   942 3719 8D AC 37		REAA021     sta GETADRLP+1
   943 371C 8D E0 37		REAA022     sta PUTADRLP+1
   944 371F A5 33		            lda BUFRHI
   945 3721 8D AD 37		REAA023     sta GETADRLP+2
   946 3724 8D E1 37		REAA024     sta PUTADRLP+2            
   947 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   948 				; check for GET
   949 3727 AD 02 03		            lda DCOMND
   950 372A C9 52		            cmp #$52
   951 372C F0 0A		            beq L3656           ; is GET
   952 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   953 				; PUT: put user data to buffer            
   954 372E A0 7F		            ldy #$7F
   955 3730 B1 34		L364B       lda (BFENLO),Y
   956 3732 99 24 38		REAA005     sta BUFFERXX1,Y
   957 3735 88			            dey
   958 3736 10 F8		            bpl L364B
   959 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   960 				; check if bank number is in range            
   961 3738 E0 20		L3656       cpx #$20            ; check bank number
   962 373A B0 B9		            bcs REAA020         ; intermediate jmp to NAK
   963 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   964 373C			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 373C AD A2 D5		            lda TCPBEN
     2 373F 48			            pha
     3 3740 AD A6 D5		            lda TCMOSL
     4 3743 48			            pha
     5 3744 AD A7 D5		            lda TCMOFR
     6 3747 48			            pha
     7 3748 AD A0 D5		            lda TCPBRL
     8 374B 48			            pha
     9 374C AD A1 D5		            lda TCPBRH
    10 374F 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   965 3750 E6 42		            inc CRITIC
   966 3752 A5 14		            lda RTCLOK+2
   967 3754 C5 14		WAITLOOP2   cmp RTCLOK+2
   968 3756 F0 FC		            beq WAITLOOP2
   969 3758 78			            sei                 ; disable interrupts
   970 3759 A9 00		            lda #$00
   971 375B 8D 0E D4		            sta NMIEN           ; 40 cycles
   972 				; set bank, number in X
   973 375E A9 21		            lda #TCMOSL.16K     ; set 2x8k mode at $8000-$BFFF
   974 3760 8D A6 D5		            sta TCMOSL          
   975
   976 3763 AD 1F 38		REAA025     lda DRVNUM  		; check drive number for ram
   977 3766 CD 01 03		            cmp DUNIT
   978 3769 F0 23		            beq setTCram
   979
   980 				; 512k user space start bank $3fc0
   981 				; 640k user space start bank $3fb0
   982 376B A9 00		setTCflash  lda #TCMOFR.FLASH       ; set to FLASH
   983 376D 8D A7 D5		            sta TCMOFR
   984 3770 A9 B0		SFBANKL		lda #$b0
   985 3772 8D A0 D5		            sta TCPBRL
   986 3775 A9 3F		SFBANKH		lda #$3f
   987 3777 8D A1 D5		            sta TCPBRH
   988 377A 8A			            txa
   989 377B 0A			            asl
   990 377C 18			            clc   
   991 377D 6D A0 D5		            adc TCPBRL              ; get bank number from X
   992 3780 8D A0 D5		            sta TCPBRL
   993 3783 AD A1 D5		            lda TCPBRH
   994 3786 69 00		            adc #$00                     
   995 3788 8D A1 D5		            sta TCPBRH              ; set high to $00
   996 378B 18			            clc
   997 378C 90 0F		            bcc setTcend
   998
   999 378E A9 03		setTCram    lda #TCMOFR.PBRAM       ; set to RAM
  1000 3790 8D A7 D5		            sta TCMOFR
  1001 3793 8A			            txa
  1002 3794 0A			            asl   
  1003 3795 8D A0 D5		            sta TCPBRL              ; get bank number from X
  1004 3798 A9 00		            lda #$00                     
  1005 379A 8D A1 D5		            sta TCPBRH              ; set high to $00
  1006
  1007 379D A9 01		setTCend    lda #$01
  1008 379F 8D A2 D5		            sta TCPBEN              ; enable        
  1009 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1010 				; check for PUT
  1011 37A2 A0 7F		            ldy #$7F            ; 9 cycles
  1012 37A4 AD 02 03		            lda DCOMND
  1013 37A7 C9 52		            cmp #$52
  1014 37A9 D0 31		            bne L369B           ; is PUT
  1015 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1016 				; GET: read data to buffer
  1017 37AB			L367B
  1018 37AB B9 FF FF		GETADRLP    lda $FFFF,Y         ; 5 cycles +
  1019 37AE 99 24 38		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
  1020 37B1 88			            dey                 ; 2 cycles +
  1021 37B2 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2048
  1022 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1023 				; restore bank for write to user buffer
  1024 37B4			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 37B4 68			            pla                 
     2 37B5 8D A1 D5		            sta TCPBRH          
     3 37B8 68			            pla                 
     4 37B9 8D A0 D5		            sta TCPBRL          
     5 37BC 68			            pla                 
     6 37BD 8D A7 D5		            sta TCMOFR          
     7 37C0 68			            pla                 
     8 37C1 8D A6 D5		            sta TCMOSL          
     9 37C4 68			            pla                 
    10 37C5 8D A2 D5		            sta TCPBEN          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
  1025 37C8 A9 E0		            lda #$e0            ; enable interrupts
  1026 37CA 8D 0E D4		            sta NMIEN
  1027 37CD 58			            cli
  1028 37CE C6 42		            dec CRITIC          ; 54 cycles
  1029 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
  1030 				; GET: write buffer to user data            
  1031 37D0 A0 7F		            ldy #$7F
  1032 37D2			L368E
  1033 37D2 B9 24 38		REAA008     lda BUFFERXX1,Y
  1034 37D5 91 34		            sta (BFENLO),Y
  1035 37D7 88			            dey
  1036 37D8 10 F8		            bpl L368E
  1037 37DA 30 25		            bmi RDSIOEND
  1038 				            
  1039 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1040 				; PUT: buffer data to sector
  1041 37DC			L369B
  1042 37DC B9 24 38		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
  1043 37DF 99 FF FF		PUTADRLP    sta $FFFF,Y       ; 5 cycles
  1044 37E2 88			            dey               ; 2 cycles +              
  1045 37E3 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2048 
  1046 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1047 				; restore register
  1048 37E5			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 37E5 68			            pla                 
     2 37E6 8D A1 D5		            sta TCPBRH          
     3 37E9 68			            pla                 
     4 37EA 8D A0 D5		            sta TCPBRL          
     5 37ED 68			            pla                 
     6 37EE 8D A7 D5		            sta TCMOFR          
     7 37F1 68			            pla                 
     8 37F2 8D A6 D5		            sta TCMOSL          
     9 37F5 68			            pla                 
    10 37F6 8D A2 D5		            sta TCPBEN          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
  1049 37F9 A9 E0		            lda #$e0            ; enable interrupts
  1050 37FB 8D 0E D4		            sta NMIEN
  1051 37FE 58			            cli
  1052 37FF C6 42		            dec CRITIC          ; 54 cycles
  1053 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1054 				; set rc            
  1055 3801 A0 01		RDSIOEND    ldy #$01
  1056 3803 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
  1057
  1058 3806 8C 03 03					sty DSTATS
  1059 3809 98			            tya                 ; set RC
  1060 380A 60			            rts
  1061 				            
  1062 				; drive configuration buffer
  1063 380B 28 01 12		CONFBUF     .byte $28,$01,$12
  1064 380E 00			L36BB       .byte $00
  1065 380F 00 00 00		            .byte $00,$00,$00
  1066 3812 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
  1067 3813 FF 00 00 00		            .byte $FF,$00,$00,$00
  1068
  1069 3817 B0			FBANKL		.byte $b0	; F1: 16.304 bank
  1070 3818 70						.byte $70	; F2: 16.240 bank
  1071 3819 30						.byte $30	; F3: 16.176 bank
  1072 381A F0						.byte $f0
  1073
  1074 381B 3F			FBANKH		.byte $3f	; F1: 16.304 bank
  1075 381C 3F						.byte $3f	; F2: 16.240 bank
  1076 381D 3F						.byte $3f	; F3: 16.176 bank
  1077 381E 3E						.byte $3e	; F4: 16.112 bank
  1078
  1079 381F 00			DRVNUM      .byte $00	; RAM
  1080
  1081 3820 00			FDRVNUM     .byte $00	; F1:
  1082 3821 00						.byte $00	; F2:
  1083 3822 00						.byte $00	; F3:
  1084 3823 00						.byte $00	; F4:
  1085
  1086
  1087 				; $80 for 128Bytes ($100 for 256Bytes)
  1088 3824			BUFFERXX1
  1089 				;            org $37E6
  1090 = 38A4			REAEND      = BUFFERXX1 + $80
  1091 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1092 				;;; END OF REALLOC BLOCK
  1093 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1094
  1095
  1096 				; $20 Bytes
  1097 = 38A4			BNKSAVBUF   = REAEND
  1098
  1099 				; $20 bytes
  1100 				;            org $3806
  1101 				;BNKSAVBUF2  = BNKSAVBUF + $20
  1102
  1103 				 
  1104 				;           org $3826
  1105 3824			            org BNKSAVBUF + $20
  1106 				; realloc whole addresses
  1107 38C4-39E0> D1 32		REATAB      .word REAA001+1 ;$33CA
  1108 38C6 DB 32		            .word REAA002+1 ;$33D4
  1109 38C8 E2 32		            .word REAA003+1 ;$33DB
  1110 38CA 52 36		            .word REAA004+1 ;$3583
  1111 38CC 33 37		            .word REAA005+1 ;$364E
  1112 38CE AF 37		            .word REAA006+1 ;$367E
  1113 38D0 DD 37		            .word REAA007+1 ;$369C
  1114 38D2 D3 37		            .word REAA008+1 ;$368F
  1115 38D4 89 36		            .word REAA009+1 ;$35A5
  1116 38D6 90 36		            .word REAA010+1 ;$35AC
  1117 38D8 AA 36		            .word REAA011+1 ;$35C6
  1118 38DA BE 36		            .word REAA012+1 ;$35D8
  1119 38DC C5 36		            .word REAA013+1 ;$35DF
  1120 38DE C8 36		            .word REAA014+1 ;$35E2
  1121 38E0 E0 36		            .word REAA015+1 ;$35FA
  1122 38E2 E5 36		            .word REAA016+1 ;$35FF
  1123 38E4 F6 36		            .word REAA020+1 ;$3610
  1124 38E6 1A 37		            .word REAA021+1
  1125 38E8 1D 37		            .word REAA022+1
  1126 38EA 22 37		            .word REAA023+1
  1127 38EC 25 37		            .word REAA024+1
  1128 38EE 64 37		            .word REAA025+1
  1129 38F0 5C 36		            .word REAA026+1
  1130 38F2 6C 36		            .word REAA027+1
  1131 38F4 6F 36		            .word REAA028+1
  1132 38F6 72 36		            .word REAA029+1
  1133 38F8 75 36		            .word REAA030+1
  1134 38FA 00 00		            .word $0000
  1135 				 
  1136 				; realloc address low byte           
  1137 38FC B8 32		            .word REAL001+1 ;$33B1
  1138 38FE D4 32		            .word REAL002+1 ;$33CD
  1139 3900 40 36		            .word REAL003+1 ;$356E
  1140 3902 00 00		            .word $0000
  1141 				; realloc address high byte (address to high byte and value of low byte)
  1142 3904 BC 32		            .word REAH001+1  ;$33B5
  1143 3906 3C			            .byte <JSRDOSINI ;$6A
  1144 				                        
  1145 3907 DE 32		            .word REAH002+1 ;$33D7
  1146 3909 4A			            .byte <RAMDSIO  ;$78
  1147 				            
  1148 390A 45 36		            .word REAH003+1  ;$3573
  1149 390C A4			            .byte <REAEND    ;$E6
  1150 				            
  1151
  1152 390D 00 00		            .word $0000
  1153 				            
  1154 390F A9 00		REASTART    lda #$00
  1155 3911 8D E1 39		            sta REALOOPCNT
  1156 3914 AE E1 39		REALOOP     ldx REALOOPCNT
  1157 3917 BD D3 39		            lda REATABADR,X
  1158 391A 8D B9 39		            sta L3910+1
  1159 391D BD D4 39		            lda REATABADR+1,X
  1160 3920 8D BA 39		            sta L3910+2
  1161 3923 0D B9 39		            ora L3910+1
  1162 3926 D0 01		            bne L3881
  1163 3928 60			            rts
  1164 				            
  1165 3929 38			L3881       sec
  1166 392A BD D7 39		            lda READSTADR,X
  1167 392D FD D5 39		            sbc REASRCADR,X
  1168 3930 8D E2 39		            sta READIFLO
  1169 3933 BD D8 39		            lda READSTADR+1,X
  1170 3936 FD D6 39		            sbc REASRCADR+1,X
  1171 3939 8D E3 39		            sta READIFHI
  1172 				            
  1173 393C 20 C4 39		L3894       jsr L391C
  1174 393F F0 13		            beq L38AC
  1175 3941 B1 D7		            lda ($D7),Y
  1176 3943 18			            clc
  1177 3944 6D E2 39		            adc READIFLO
  1178 3947 91 D7		            sta ($D7),Y
  1179 3949 C8			            iny
  1180 394A B1 D7		            lda ($D7),Y
  1181 394C 6D E3 39		            adc READIFHI
  1182 394F 91 D7		            sta ($D7),Y
  1183 3951 4C 3C 39		            jmp L3894
  1184 3954 20 C4 39		L38AC       jsr L391C
  1185 3957 F0 0B		            beq L38BC
  1186 3959 B1 D7		            lda ($D7),Y
  1187 395B 18			            clc
  1188 395C 6D E2 39		            adc READIFLO
  1189 395F 91 D7		            sta ($D7),Y
  1190 3961 4C 54 39		            jmp L38AC
  1191 3964 20 C4 39		L38BC       jsr L391C
  1192 3967 F0 11		            beq L38D2
  1193 3969 20 B8 39		            jsr L3910
  1194 396C 18			            clc
  1195 396D 6D E2 39		            adc READIFLO
  1196 3970 B1 D7		            lda ($D7),Y
  1197 3972 6D E3 39		            adc READIFHI
  1198 3975 91 D7		            sta ($D7),Y
  1199 3977 4C 64 39		            jmp L38BC
  1200 397A AE E1 39		L38D2       ldx REALOOPCNT
  1201
  1202 397D BD D9 39		            lda CPYFROMADR,X
  1203 3980 8D 9B 39		            sta L38F2+1
  1204 3983 BD DA 39		            lda CPYFROMADR+1,X
  1205 3986 8D 9C 39		            sta L38F2+2
  1206
  1207 3989 BD DD 39		            lda CPYTOADR,X
  1208 398C 8D 9E 39		            sta L38F2+4
  1209 398F BD DE 39		            lda CPYTOADR+1,X
  1210 3992 8D 9F 39		            sta L38F2+5
  1211
  1212 3995 BC DC 39		            ldy CPYLENGTH+1,X
  1213 3998 A2 00		            ldx #$00
  1214 399A BD FF FF		L38F2       lda $FFFF,X
  1215 399D 9D FF FF		            sta $FFFF,X
  1216 39A0 E8			            inx
  1217 39A1 D0 F7		            bne L38F2
  1218 39A3 EE 9C 39		            inc L38F2+2
  1219 39A6 EE 9F 39		            inc L38F2+5
  1220 39A9 88			            dey
  1221 39AA 10 EE		            bpl L38F2
  1222 39AC AD E1 39		            lda REALOOPCNT
  1223 39AF 18			            clc
  1224 39B0 69 0C		            adc #$0C
  1225 39B2 8D E1 39		            sta REALOOPCNT
  1226 39B5 4C 14 39		            jmp REALOOP
  1227 				            
  1228 39B8 AD FF FF		L3910       lda $FFFF
  1229 39BB EE B9 39		            inc L3910+1
  1230 39BE D0 03		            bne L391B
  1231 39C0 EE BA 39		            inc L3910+2
  1232 39C3 60			L391B       rts
  1233
  1234 39C4 20 B8 39		L391C       jsr L3910
  1235 39C7 85 D7		            sta $D7
  1236 39C9 20 B8 39		            jsr L3910
  1237 39CC A0 00		            ldy #$00
  1238 39CE 85 D8		            sta $D8
  1239 39D0 05 D7		            ora $D7
  1240 39D2 60			            rts
  1241
  1242 				; realloc code pointer
  1243 39D3 C4 38		REATABADR   .word REATAB
  1244 39D5 3C 36		REASRCADR   .word REABEGIN
  1245 39D7 FF FF		READSTADR   .word $FFFF
  1246 				; copy code pointer
  1247 39D9 3C 36		CPYFROMADR  .word REABEGIN
  1248 39DB 68 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1249 39DD FF FF		CPYTOADR    .word $FFFF
  1250 39DF 00 00		            .word $0000
  1251 				            
  1252 				; $01 byte
  1253 39E1			REALOOPCNT  ;= $392B
  1254 = 39E2			READIFLO   = REALOOPCNT+1
  1255 = 39E3			READIFHI   = READIFLO+1
  1256
  1257
  1258 				         
