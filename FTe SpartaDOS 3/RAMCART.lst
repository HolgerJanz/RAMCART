mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0304			DBUFLO      = $0304
    41 = 0305			DBUFHI      = $0305
    42 = 0308			DBYTLO      = $0308
    43 = 0309			DBYTHI      = $0309
    44 = 030A			DAUX1       = $030A
    45 = 030B			DAUX2       = $030B
    46 = 0340			IOCB0       = $0340
    47 				; 
    48 				; PIA
    49 				; 
    50 = D300			PORTA       = $D300
    51 = D301			PORTB       = $D301
    52 = D302			PACTL       = $D302
    53 = D303			PBCTL       = $D303
    54 				; 
    55 				; ANTIC
    56 				;
    57 = D400			DMACTL      = $D400 
    58 = D40A			WSYNC       = $D40A
    59 = D40E			NMIEN       = $D40E
    60 				; 
    61 				; ROM VECTORS
    62 				; 
    63 = E456			CIOV        = $E456
    64 				;
    65 				; SpartaDOS 
    66 				;
    67 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    68 = 003F			SD_LBUF        = $3F ; offset to line buffer
    69 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    70 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    71 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    72
    73 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74 				; 
    75 				; The!Cart programming information
    76 				; (c) 2013 Matthias Reichl
    77 				;
    78 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    79 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    80 				; 25AA020A). The memory is addressed using 16384 8k banks
    81 				; (64 8k banks when using RAM instead of flash).
    82 				; 
    83 				; The cartridge configuration registers are located at
    84 				; $D5A0-$D5A8. All registers are read/write unless noted
    85 				; otherwise. Unused bits shall be written as '0' and
    86 				; always read back as '0'.
    87 				; 
    88 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    89 				; flash bank 0, writes to flash are disabled.
    90 				; 
    91 				; Depending on the selected cartridge mode additional
    92 				; registers are enabled at $D5xx.
    93 				; 
    94 				; The primary bank register also serves as a base bank
    95 				; register for the various sub-modes.
    96 				; 
    97 				; The secondary bank register is only used in "flexi mode".
    98 				;
    99
   100 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101 				; 
   102 				; The!Cart Register (from-to,default)
   103 				;
   104
   105 				; Mode Select
   106 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   107 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   108 				; other than the ones listed here are reserved (and result
   109 				; in "cartridge off"):
   110 				; $00: off, cartridge disabled
   111 				; $01: 8k banks at $A000
   112 				; $02: AtariMax 1MBit / 128k
   113 				; $03: Atarimax 8MBit / 1MB
   114 				; $04: OSS M091
   115 				; $08: SDX 64k cart, $D5Ex banking
   116 				; $09: Diamond GOS 64k cart, $D5Dx banking
   117 				; $0A: Express 64k cart, $D57x banking
   118 				; $0C: Atrax 128k cart
   119 				; $0D: Williams 64k cart
   120 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   121 				; $21: standard 16k cart at $8000-$BFFF
   122 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   123 				; $23: Blizzard 16k
   124 				; $24: Sic!Cart 512k
   125 				; $28: 16k Mega cart
   126 				; $29: 32k Mega cart
   127 				; $2A: 64k Mega cart
   128 				; $2B: 128k Mega cart
   129 				; $2C: 256k Mega cart
   130 				; $2D: 512k Mega cart
   131 				; $2E: 1024k Mega cart
   132 				; $2F: 2048k Mega cart
   133 				; $30: 32k XEGS cart
   134 				; $31: 64k XEGS cart
   135 				; $32: 128k XEGS cart
   136 				; $33: 256k XEGS cart
   137 				; $34: 512k XEGS cart
   138 				; $35: 1024k XEGS cart
   139 				; $38: 32k SWXEGS cart
   140 				; $39: 64k SWXEGS cart
   141 				; $3A: 128k SWXEGS cart
   142 				; $3B: 256k SWXEGS cart
   143 				; $3C: 512k SWXEGS cart
   144 				; $3D: 1024k SWXEGS cart
   145 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   146 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   147 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   148 				                         ; separate 8k banks at $A000 and $8000
   149 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   150
   151 				; how to figure out that The!Cart is not active?
   152 				; If the address is not used then the XL returns $ff but
   153 				; the XE (and old 800) return $d5 (high byte of address,
   154 				; the value of the last bus cycle)
   155 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   156 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   157
   158 				; Mode Flash/RAM Select
   159 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   160 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   161 				; bit 1: primary bank source (0=flash, 1=RAM)
   162 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   163 				; bit 3: secondary bank source (0=flash, 1=RAM)
   164 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   165 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   166
   167 				; Primary Bank
   168 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   169 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   170 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   171
   172 				; Secondary Bank 
   173 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   174 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   175 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   176
   177 				; SPI interface to EEPROM
   178 = D5A8			TCINEP = $d5a8
   179 				; bit 0: SPI CLK
   180 				; bit 1: SPI CS
   181 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   182
   183 				; configuration lock
   184 = D5AF			TCCOLO = $d5af
   185 				; Writing to this register disables "The!Cart" registers
   186 				; at $d5aX.
   187
   188
   189 				; macros
   190
   191 				; saves register: pushes bank register on stack
   192 				M_cart_push .macro
   193 				            lda TCMOSL
   194 				            pha
   195 				            lda TCMOFR
   196 				            pha
   197 				            lda TCPBRL
   198 				            pha
   199 				            lda TCPBRH
   200 				            pha
   201 				            lda TCPBEN
   202 				            pha
   203 				            .endm
   204
   205 				; restores register from stack: pops from stack
   206 				M_cart_pop  .macro
   207 				            pla                 
   208 				            sta TCPBEN          
   209 				            pla                 
   210 				            sta TCPBRH          
   211 				            pla                 
   212 				            sta TCPBRL          
   213 				            pla                 
   214 				            sta TCMOFR          
   215 				            pla                 
   216 				            sta TCMOSL          
   217 				            .endm
   218 				 
   219 				; saves register and sync: pushes bank register on stack
   220 				M_cart_sync_push .macro
   221 				            M_cart_push
   222 				            inc CRITIC 
   223 				            jsr WAITSYNC        ; wait for vblank
   224 				            sei
   225 				            lda #$00
   226 				            sta NMIEN
   227 				            .endm
   228
   229 				; restores register from stack anf sync: pops from stack
   230 				M_cart_sync_pop  .macro
   231 				            M_cart_pop
   232 				            lda #$E0            ; enable interrupts
   233 				            sta NMIEN
   234 				            cli
   235 				            dec CRITIC 
   236 				            .endm
   237
   238 				; set bank: number of bank in X, uses A
   239 				M_cart_set  .macro
   240 				; set new The!Cart mode
   241 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   242 				            sta TCMOSL          
   243 				            lda #TCMOFR.PBRAM       ; set to RAM
   244 				            sta TCMOFR
   245 				            txa
   246 				            asl   
   247 				            sta TCPBRL              ; get bank number from X
   248 				            lda #$00                     
   249 				            sta TCPBRH              ; set high to $00
   250 				            lda #$01
   251 				            sta TCPBEN              ; enable        
   252 				            .endm
   253 				;
   254 				; Start of code
   255 				;
   256 				            org $3000
   257 				            
   258 				; info message
   259 FFFF> 3000-34BD> 20 EA +             jsr PRINT
   260 3003 54 48 45 21 52 41 +             .byte 'THE!RAMDISK for THE!CART vers49 HJX',$9B,$FF
   261
   262 				; check for The!Cart
   263 3028 AD A6 D5		             lda TCMOSL
   264 302B C9 FF		             cmp #TCMOSL.XLLOCK
   265 302D F0 04		             beq NORAMDISK
   266 302F C9 D5		             cmp #TCMOSL.XELOCK
   267 3031 D0 50		             bne RAMDISKINI
   268 3033			NORAMDISK
   269 				; no banks            
   270 3033 20 EA 32		            jsr PRINT
   271 3036 20 20 45 72 72 6F +             .byte '  Error - 512k RAM THE!CART not found',$9B
   272 305C 20 20 55 73 65 20 +             .byte '  Use SHIFT+RETURN/ESC in start menu',$9B,$FF
   273 3082 60			            rts
   274 				                        
   275 3083			RAMDISKINI
   276 				; check for parameter
   277 3083 A0 0A		            ldy #SD_BUFOFF
   278 3085 B1 0A		            lda (DOSVEC),Y
   279 3087 18			            clc
   280 3088 69 3F		            adc #SD_LBUF
   281 308A A8			            tay
   282 308B B1 0A		            lda (DOSVEC),Y
   283 308D C9 9B		            cmp #$9B
   284 308F D0 07		            bne PRSPARM
   285 				; no parameter -> error
   286 3091 4C D3 30		            jmp PARAMERR
   287
   288 				; jump for jsr to crunch name
   289 3094 4C FF FF		CRNAME      jmp $FFFF
   290
   291 3097 FF			CHKFRMT     .byte $FF
   292
   293 				; set crunch name address
   294 3098 A5 0A		PRSPARM     lda DOSVEC
   295 309A 18			            clc
   296 309B 69 03		            adc #SD_ZCRNAME
   297 309D 8D 95 30		            sta CRNAME+1
   298 30A0 A5 0B		            lda DOSVEC+1
   299 30A2 69 00		            adc #$00
   300 30A4 8D 96 30		            sta CRNAME+2
   301 				            
   302 				; parameter parsing            
   303 				; get drive number SD_COMFNAM starts alway with Dx:
   304 30A7 20 94 30		            jsr CRNAME
   305 30AA D0 27		            bne PARAMERR
   306 30AC A0 22		            ldy #SD_COMFNAM+1
   307 30AE B1 0A		            lda (DOSVEC),Y
   308 30B0 29 0F		            and #$0F
   309 30B2 8D BD 34		            sta DRVNUM
   310 				; check options /N
   311 30B5 20 94 30		            jsr CRNAME
   312 30B8 F0 4F		            beq PRSPAREND
   313 30BA A0 24		            ldy #SD_COMFNAM+3
   314 30BC B1 0A		            lda (DOSVEC),Y
   315 30BE C9 2F		            cmp #'/'
   316 30C0 D0 11		            bne PARAMERR
   317 30C2 C8			PRSPARLOOP  iny
   318 30C3 B1 0A		            lda (DOSVEC),Y
   319 30C5 C9 9B		            cmp #$9B         ; end of parameter
   320 30C7 F0 40		            beq PRSPAREND
   321 30C9 C9 4E		PRSPARNXT   cmp #'N'         ; format ?
   322 30CB D0 06		            bne PARAMERR
   323 				; check format at startup to preserve existing RAM disk            
   324 30CD EE 97 30		            inc CHKFRMT
   325 30D0 4C C2 30		            jmp PRSPARLOOP
   326 30D3 20 EA 32		PARAMERR    jsr PRINT
   327 30D6 20 20 45 72 72 6F +             .byte '  Error - Wrong parameter',$9B
   328 30F0 20 20 55 73 65 20 +             .byte '  Use RAMCART Dn: [/N]',$9B,$FF
   329 3108 60			            rts
   330
   331 				; set jsr to original DOSINI
   332 3109 A5 0C		PRSPAREND   lda DOSINI
   333 310B 8D 21 33		            sta JSRDOSINI+1
   334 310E A5 0D		            lda DOSINI+1
   335 3110 8D 22 33		            sta JSRDOSINI+2
   336
   337 				; set MEMLO oldaddress, realloc
   338 3113 AD E7 02		            lda MEMLO
   339 3116 8D 67 36		            sta READSTADR
   340 3119 8D 6D 36		            sta CPYTOADR
   341 311C AD E8 02		            lda MEMLO+1
   342 311F 8D 68 36		            sta READSTADR+1
   343 3122 8D 6E 36		            sta CPYTOADR+1
   344 				;
   345 				; start realloc
   346 				;
   347 3125 20 9F 35		            jsr REASTART
   348
   349 				; set new DOSINI            
   350 3128 A9 20		REAL001     lda #<JSRDOSINI
   351 312A 85 0C		            sta DOSINI
   352 312C A9 33		REAH001     lda #>JSRDOSINI
   353 312E 85 0D		            sta DOSINI+1
   354 				; get SIO and patch for RAMDISK
   355 3130 38			            sec
   356 3131 A5 0A		            lda DOSVEC
   357 3133 E9 0A		            sbc #SD_LSIO
   358 3135 85 32		            sta BUFRLO
   359 3137 A5 0B		            lda DOSVEC+1
   360 3139 E9 00		            sbc #$00
   361 313B 85 33		            sta BUFRHI
   362 313D A0 00		            ldy #$00
   363 313F B1 32		            lda (BUFRLO),Y
   364 3141 8D 3E 33		REAA001     sta JMPSIO+1      ;realloc $33CA
   365 3144 A9 2E		REAL002     lda #<RAMDSIO
   366 3146 91 32		            sta (BUFRLO),Y
   367 3148 C8			            iny
   368 3149 B1 32		            lda (BUFRLO),Y
   369 314B 8D 3F 33		REAA002     sta JMPSIO+2      ;realloc $33D4
   370 314E A9 33		REAH002     lda #>RAMDSIO
   371 3150 91 32		            sta (BUFRLO),Y
   372 				; set MEMLO            
   373 3152 20 23 33		REAA003     jsr SETMEMLO      ;realloc $33DB
   374 				; format if requested            
   375 3155 2C 97 30		            bit CHKFRMT
   376 3158 30 01		            bmi FRMTRD
   377 315A 60			            rts
   378
   379 				; format ramdisk
   380 315B 20 EA 32		FRMTRD      jsr PRINT
   381 315E 20 20 52 41 4D 20 +             .byte '  RAM Cart 512K formatted',$9B,$FF
   382
   383 3179 20 72 32		            jsr cart_save
   384
   385 				; clear sector 1
   386 317C A2 00		            ldx #$00
   387 317E 20 B9 32		            jsr cart_set
   388 3181 A9 00		            lda #$00
   389 3183 A0 7F		            ldy #$7f
   390 3185 99 00 80		FRMTCLP1    sta $8000,Y
   391 3188 88			            dey
   392 3189 10 FA		            bpl FRMTCLP1
   393 318B 20 91 32		            jsr cart_restore
   394
   395 				; set sector 2-5 to $ff VTOV 512k = 4096 sectors
   396 				; = 4 VTOC sectors
   397 318E A2 00		_loop25     ldx #$00
   398 3190 20 B9 32		            jsr cart_set
   399 3193 A9 FF		            lda #$ff
   400 3195 A0 7F		            ldy #$7f
   401 3197 99 80 80		FRMTCLP25   sta $8080,Y
   402 319A 88			            dey
   403 319B 10 FA		            bpl FRMTCLP25
   404 319D 20 91 32		            jsr cart_restore
   405 31A0 AD 98 31		            lda FRMTCLP25+1
   406 31A3 18			            clc
   407 31A4 69 80		            adc #$80
   408 31A6 8D 98 31		            sta FRMTCLP25+1
   409 31A9 AD 99 31		            lda FRMTCLP25+2
   410 31AC 69 00		            adc #$00
   411 31AE 8D 99 31		            sta FRMTCLP25+2
   412 31B1 A9 04		_loopcnt25  lda #$04
   413 31B3 CE B2 31		            dec _loopcnt25+1
   414 31B6 D0 D6		            bne _loop25
   415
   416 				; clear sector 6-8 
   417 31B8 A2 00		_loop68     ldx #$00
   418 31BA 20 B9 32		            jsr cart_set
   419 31BD A9 00		            lda #$00
   420 31BF A0 7F		            ldy #$7f
   421 31C1 99 80 82		FRMTCLP68   sta $8280,Y
   422 31C4 88			            dey
   423 31C5 10 FA		            bpl FRMTCLP68
   424 31C7 20 91 32		            jsr cart_restore
   425 31CA AD C2 31		            lda FRMTCLP68+1
   426 31CD 18			            clc
   427 31CE 69 80		            adc #$80
   428 31D0 8D C2 31		            sta FRMTCLP68+1
   429 31D3 AD C3 31		            lda FRMTCLP68+2
   430 31D6 69 00		            adc #$00
   431 31D8 8D C3 31		            sta FRMTCLP68+2
   432 31DB A9 03		_loopcnt68  lda #$03
   433 31DD CE DC 31		            dec _loopcnt68+1
   434 31E0 D0 D6		            bne _loop68
   435
   436 				; header loop            
   437 31E2 A2 00		            ldx #$00
   438 31E4 20 B9 32		            jsr cart_set
   439 31E7 A0 2A		            ldy #$2A
   440 31E9 B9 2F 32		FRMTHLP     lda RDHEAD,Y
   441 31EC 99 00 80		            sta $8000,Y
   442 31EF 88			            dey
   443 31F0 10 F7		            bpl FRMTHLP
   444 31F2 20 91 32		            jsr cart_restore
   445
   446 				 ; set map sector
   447 31F5 A2 00		            ldx #$00
   448 31F7 20 B9 32		            jsr cart_set
   449 31FA A9 04		            lda #$04 
   450 31FC 8D 0F 80		            sta $800F     ; number of bit map sectors used on the disk
   451 31FF 18			            clc
   452 3200 69 02		            adc #$02
   453 3202 8D 09 80		            sta $8009     ; first sector map of the MAIN directory
   454 3205 A9 00		            lda #$00 
   455 3207 8D 80 80		            sta $8080
   456 320A A9 80		            lda #$80      ; low address of MAIN sector map
   457 320C 85 32		            sta BUFRLO
   458 320E A9 82		            lda #$82      ; high address of MAIN sector map
   459 3210 85 33		            sta BUFRHI   
   460 3212 18			            clc
   461 3213 A0 04		            ldy #$04
   462 3215 AD 09 80		            lda $8009
   463 3218 69 01		            adc #$01
   464 321A 91 32		            sta (BUFRLO),Y
   465 				; set MAIN sector map            
   466 321C A2 00		            ldx #$00
   467 321E A0 80		            ldy #$80
   468 3220 BD 5A 32		L349B       lda RDMAIN,X
   469 3223 91 32		            sta (BUFRLO),Y
   470 3225 E8			            inx
   471 3226 C8			            iny
   472 3227 E0 11		            cpx #$11
   473 3229 D0 F5		            bne L349B
   474 322B 20 91 32		            jsr cart_restore
   475
   476 				; finished
   477 322E 60			            rts
   478 				            
   479 322F 00 03 00 07 E0 07 + RDHEAD      .byte $00,$03,$00,$07,$E0,$07,$4C,$80
   480 3237 30 03 00		            .byte $30,$03,$00 ;original $00,$04,$FB,$03
   481 323A 00 10 F8 0F		            .word $1000,$0ff8 ; 512k
   482 323E 01 02 00 20 00 00 +             .byte $01, $02,$00,$20,$00,$00,$00
   483 3245 43 41 52 54 35 31 +             .byte 'CART512K'
   484 324D 00 80 22 00 00 00 +             .byte $00,$80,$22,$00,$00,$00,$00,$00
   485 3255 00 16 00 00 00	            .byte $00,$16,$00,$00,$00
   486
   487 325A 08 00 00 11 00 00	RDMAIN      .byte $08,$00,$00,$11,$00,$00
   488 3260 4D 41 49 4E 20 20 +             .byte 'MAIN       '
   489
   490 				; wait for sync            
   491 326B A5 14		WAITSYNC    lda RTCLOK+2
   492 326D C5 14		WAITLOOP    cmp RTCLOK+2
   493 326F F0 FC		            beq WAITLOOP
   494 3271 60			            rts
   495
   496 3272			cart_save
   497 3272 AD A6 D5		            lda TCMOSL
   498 3275 8D E4 32		            sta _tcmosl
   499 3278 AD A7 D5		            lda TCMOFR
   500 327B 8D E5 32		            sta _tcmofr
   501 327E AD A0 D5		            lda TCPBRL
   502 3281 8D E6 32		            sta _tcpbrl
   503 3284 AD A1 D5		            lda TCPBRH
   504 3287 8D E7 32		            sta _tcpbrh
   505 328A AD A2 D5		            lda TCPBEN
   506 328D 8D E8 32		            sta _tcpben
   507
   508 3290 60			            rts
   509
   510 3291			cart_restore
   511 3291 AD E4 32		            lda _tcmosl
   512 3294 8D A6 D5		            sta TCMOSL
   513 3297 AD E5 32		            lda _tcmofr
   514 329A 8D A7 D5		            sta TCMOFR
   515 329D AD E6 32		            lda _tcpbrl
   516 32A0 8D A0 D5		            sta TCPBRL
   517 32A3 AD E7 32		            lda _tcpbrh
   518 32A6 8D A1 D5		            sta TCPBRH
   519 32A9 AD E8 32		            lda _tcpben
   520 32AC 8D A2 D5		            sta TCPBEN
   521
   522 32AF AD E9 32		            lda _nmien          ; enable interrupts
   523 32B2 8D 0E D4		            sta NMIEN
   524 32B5 58			            cli
   525 32B6 C6 42		            dec CRITIC 
   526
   527 32B8 60			            rts
   528
   529 32B9			cart_set
   530 32B9 E6 42		            inc CRITIC 
   531 32BB 20 6B 32		            jsr WAITSYNC        ; wait for vblank
   532 32BE 78			            sei
   533 32BF AD 0E D4		            lda NMIEN
   534 32C2 8D E9 32		            sta _nmien
   535 32C5 A9 00		            lda #$00
   536 32C7 8D 0E D4		            sta NMIEN
   537
   538 32CA A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   539 32CC 8D A6 D5		            sta TCMOSL          
   540 32CF A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   541 32D1 8D A7 D5		            sta TCMOFR
   542 32D4 8A			            txa
   543 32D5 0A			            asl   
   544 32D6 8D A0 D5		            sta TCPBRL              ; get bank number from X
   545 32D9 A9 00		            lda #$00                     
   546 32DB 8D A1 D5		            sta TCPBRH              ; set high to $00
   547 32DE A9 01		            lda #$01
   548 32E0 8D A2 D5		            sta TCPBEN              ; enable        
   549
   550 32E3 60			            rts            
   551
   552 32E4 00			_tcmosl     .byte $00
   553 32E5 00			_tcmofr     .byte $00
   554 32E6 00			_tcpbrl     .byte $00
   555 32E7 00			_tcpbrh     .byte $00
   556 32E8 00			_tcpben     .byte $00
   557
   558 32E9 00			_nmien      .byte $00
   559 				            
   560 				; print subroutine            
   561 32EA 68			PRINT       pla
   562 32EB 8D FB 32		            sta PRINTITER+1
   563 32EE 68			            pla
   564 32EF 8D FC 32		            sta PRINTITER+2
   565 32F2 EE FB 32		PRINTLOOP   inc PRINTITER+1
   566 32F5 D0 03		            bne PRINTITER
   567 32F7 EE FC 32		            inc PRINTITER+2
   568 32FA AD FF FF		PRINTITER   lda $FFFF
   569 32FD C9 FF		            cmp #$FF
   570 32FF F0 06		            beq PRINTEND
   571 3301 20 10 33		            jsr CIOPUTCHR
   572 3304 4C F2 32		            jmp PRINTLOOP
   573 3307 AD FC 32		PRINTEND    lda PRINTITER+2
   574 330A 48			            pha
   575 330B AD FB 32		            lda PRINTITER+1
   576 330E 48			            pha
   577 330F 60			            rts
   578 				; call cio put char subroutine
   579 3310 A2 00		CIOPUTCHR   ldx #$00
   580 3312 8E 48 03		            stx IOCB0+ICBLL
   581 3315 8E 49 03		            stx IOCB0+ICBLH
   582 3318 A0 0B		            ldy #$0B
   583 331A 8C 42 03		            sty IOCB0+ICCOM
   584 331D 4C 56 E4		            jmp CIOV
   585
   586
   587
   588 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   589 				;;; BEGIN OF REALLOC BLOCK
   590 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   591
   592 				; to realloc routines
   593 				; DOSINI set MEMLO at reset
   594 3320			REABEGIN
   595
   596 3320 20 00 00		JSRDOSINI   jsr $0000
   597 3323			SETMEMLO    
   598 3323 A9 3E		REAL003     lda #<REAEND
   599 3325 8D E7 02		            sta MEMLO
   600 3328 A9 35		REAH003     lda #>REAEND
   601 332A 8D E8 02		            sta MEMLO+1
   602 332D 60			            rts
   603
   604 				; new DOSVEC for RAMDISK device
   605 332E AD 00 03		RAMDSIO     lda DDEVIC
   606 3331 C9 31		            cmp #$31
   607 3333 D0 08		            bne JMPSIO
   608 3335 AD 01 03		            lda DUNIT
   609 3338 CD BD 34		REAA004     cmp DRVNUM
   610 333B F0 03		            beq NEWSIOGO
   611 333D 4C 00 00		JMPSIO      jmp $0000
   612
   613 				; set buffer address
   614 3340 AD 04 03		NEWSIOGO    lda DBUFLO
   615 3343 85 34		            sta BFENLO
   616 3345 AD 05 03		            lda DBUFHI
   617 3348 85 35		            sta BFENHI
   618 				; load commad byte            
   619 334A AD 02 03		            lda DCOMND
   620 				; command STATUS REQUEST
   621 334D C9 53		            cmp #$53 
   622 334F D0 1B		            bne NEXT1
   623 3351 AD B8 34		REAA009     lda CONFSECSIZ
   624 3354 4A			            lsr
   625 3355 4A			            lsr
   626 3356 49 30		            eor #$30
   627 3358 AC B4 34		REAA010     ldy L36BB
   628 335B C0 1A		            cpy #$1A
   629 335D D0 02		            bne L35B4
   630 335F 09 80		            ora #$80
   631 3361 A0 00		L35B4       ldy #$00
   632 3363 91 34		            sta (BFENLO),Y
   633 3365 C8			            iny
   634 3366 A9 FF		            lda #$FF
   635 3368 91 34		            sta (BFENLO),Y
   636 336A 30 24		            bmi JMPSIOEND
   637 				            
   638 				; command RETURN CONFIGURATION            
   639 336C C9 4E		NEXT1       cmp #$4E
   640 336E D0 0C		            bne NEXT2
   641 3370 A0 0B		            ldy #$0B            ; 12 bytes
   642 3372			RETCNFLOOP
   643 3372 B9 B1 34		REAA011     lda CONFBUF,Y
   644 3375 91 34		            sta (BFENLO),Y
   645 3377 88			            dey
   646 3378 10 F8		            bpl RETCNFLOOP
   647 337A 30 14		            bmi JMPSIOEND
   648
   649 				; command SET CONFIGURATION
   650 337C C9 4F		NEXT2       cmp #$4F
   651 337E D0 13		            bne NEXT3
   652 3380 A0 07		            ldy #$07
   653 3382 B1 34		            lda (BFENLO),Y
   654 3384 F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   655 3386 8D B8 34		REAA012     sta CONFSECSIZ
   656 3389 A0 03		            ldy #$03
   657 338B B1 34		            lda (BFENLO),Y
   658 338D 8D B4 34		REAA013     sta L36BB
   659
   660 3390			JMPSIOEND
   661 3390 4C AA 34		REAA014     jmp RDSIOEND
   662
   663 				; command FORMAT DISK
   664 3393 C9 21		NEXT3       cmp #$21
   665 3395 D0 0B		            bne NEXT4
   666 3397 A0 00		SIOFRMT     ldy #$00
   667 3399 A9 FF		            lda #$FF
   668 339B 91 34		            sta (BFENLO),Y
   669 339D C8			            iny
   670 339E 91 34		            sta (BFENLO),Y
   671 33A0 D0 EE		            bne JMPSIOEND
   672
   673 				; command FORMAT DISK ENHANCED
   674 33A2 C9 22		NEXT4       cmp #$22
   675 33A4 D0 0C		            bne NEXT5
   676 33A6 A9 1A		            lda #$1A
   677 33A8 8D B4 34		REAA015     sta L36BB
   678 33AB A9 80		            lda #$80
   679 33AD 8D B8 34		REAA016     sta CONFSECSIZ
   680 33B0 D0 E5		            bne SIOFRMT
   681 				            
   682 				; command PUT/GET SECTOR 
   683 33B2 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   684 33B4 F0 0B		            beq PUTGETSEC
   685 33B6 C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   686 33B8 F0 07		            beq PUTGETSEC
   687 33BA C9 50		            cmp #$50            ; command PUT SECTOR
   688 33BC F0 03		            beq PUTGETSEC
   689 33BE 4C AD 34		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   690 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   691 				; buffer address and calc byte count
   692 33C1 A9 00		PUTGETSEC   lda #$00
   693 33C3 85 32		            sta BUFRLO
   694 33C5 AD 0A 03		            lda DAUX1
   695 33C8 38			            sec
   696 33C9 E9 01		            sbc #$01
   697 33CB 85 33		            sta BUFRHI
   698 33CD AD 0B 03		            lda DAUX2
   699 33D0 E9 00		            sbc #$00
   700 33D2 06 33		            asl BUFRHI
   701 33D4 2A			            rol
   702 33D5 2C 08 03		            bit DBYTLO
   703 33D8 30 06		            bmi L3631
   704 33DA 0E B8 34		REAA017     asl CONFSECSIZ
   705 33DD 06 33		            asl BUFRHI
   706 33DF 2A			            rol
   707 33E0 AA			L3631       tax                 ; set X with memory bank number
   708 33E1 A5 33		            lda BUFRHI
   709 33E3 4A			            lsr
   710 33E4 4A			            lsr
   711 33E5 66 32		            ror BUFRLO
   712 33E7 09 80		            ora #$80
   713 33E9 85 33		            sta BUFRHI
   714 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   715 				; set buffer address in copy loops
   716 33EB A5 32		            lda BUFRLO
   717 33ED 8D 55 34		REAA021     sta GETADRLP+1
   718 33F0 8D 89 34		REAA022     sta PUTADRLP+1
   719 33F3 A5 33		            lda BUFRHI
   720 33F5 8D 56 34		REAA023     sta GETADRLP+2
   721 33F8 8D 8A 34		REAA024     sta PUTADRLP+2            
   722 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   723 				; check for GET
   724 33FB AD 02 03		            lda DCOMND
   725 33FE C9 52		            cmp #$52
   726 3400 F0 0A		            beq L3656           ; is GET
   727 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   728 				; PUT: put user data to buffer            
   729 3402 A0 7F		            ldy #$7F
   730 3404 B1 34		L364B       lda (BFENLO),Y
   731 3406 99 BE 34		REAA005     sta BUFFERXX1,Y
   732 3409 88			            dey
   733 340A 10 F8		            bpl L364B
   734 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   735 				; check if bank number is in range            
   736 340C E0 20		L3656       cpx #$20            ; check bank number
   737 340E B0 AE		            bcs REAA020         ; intermediate jmp to NAK
   738 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   739 3410			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3410 AD A6 D5		            lda TCMOSL
     2 3413 48			            pha
     3 3414 AD A7 D5		            lda TCMOFR
     4 3417 48			            pha
     5 3418 AD A0 D5		            lda TCPBRL
     6 341B 48			            pha
     7 341C AD A1 D5		            lda TCPBRH
     8 341F 48			            pha
     9 3420 AD A2 D5		            lda TCPBEN
    10 3423 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   740 3424 E6 42		            inc CRITIC
   741 3426 A5 14		            lda RTCLOK+2
   742 3428 C5 14		WAITLOOP2   cmp RTCLOK+2
   743 342A F0 FC		            beq WAITLOOP2
   744 342C 78			            sei                 ; 40 cycles
   745 342D A9 00		            lda #$00
   746 342F 8D 0E D4		            sta NMIEN
   747 3432			            M_cart_set          ; set bank, number in X
Macro: M_CART_SET [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     2 3432 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
     3 3434 8D A6 D5		            sta TCMOSL          
     4 3437 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
     5 3439 8D A7 D5		            sta TCMOFR
     6 343C 8A			            txa
     7 343D 0A			            asl   
     8 343E 8D A0 D5		            sta TCPBRL              ; get bank number from X
     9 3441 A9 00		            lda #$00                     
    10 3443 8D A1 D5		            sta TCPBRH              ; set high to $00
    11 3446 A9 01		            lda #$01
    12 3448 8D A2 D5		            sta TCPBEN              ; enable        
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   748 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   749 				; check for PUT
   750 344B A0 7F		            ldy #$7F            ; 9 cycles
   751 344D AD 02 03		            lda DCOMND
   752 3450 C9 52		            cmp #$52
   753 3452 D0 31		            bne L369B           ; is PUT
   754 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   755 				; GET: read data to buffer
   756 3454			L367B
   757 				;            lda (BUFRLO),Y      ; 6 cycles
   758 3454 B9 FF FF		GETADRLP    lda $FFFF,Y
   759 3457 99 BE 34		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
   760 345A 88			            dey                 ; 2 cycles +
   761 345B 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2176
   762 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   763 				; restore bank for write to user buffer
   764 345D			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 345D 68			            pla                 
     2 345E 8D A2 D5		            sta TCPBEN          
     3 3461 68			            pla                 
     4 3462 8D A1 D5		            sta TCPBRH          
     5 3465 68			            pla                 
     6 3466 8D A0 D5		            sta TCPBRL          
     7 3469 68			            pla                 
     8 346A 8D A7 D5		            sta TCMOFR          
     9 346D 68			            pla                 
    10 346E 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   765 3471 A9 E0		            lda #$E0            ; enable interrupts
   766 3473 8D 0E D4		            sta NMIEN
   767 3476 58			            cli
   768 3477 C6 42		            dec CRITIC          ; 54 cycles
   769 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
   770 				; GET: write buffer to user data            
   771 3479 A0 7F		            ldy #$7F
   772 347B			L368E
   773 347B B9 BE 34		REAA008     lda BUFFERXX1,Y
   774 347E 91 34		            sta (BFENLO),Y
   775 3480 88			            dey
   776 3481 10 F8		            bpl L368E
   777 3483 30 25		            bmi RDSIOEND
   778 				            
   779 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   780 				; PUT: buffer data to sector
   781 3485			L369B
   782 3485 B9 BE 34		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
   783 				;            sta (BUFRLO),Y    ; 6 cycles +              
   784 3488 99 FF FF		PUTADRLP    sta $FFFF,Y
   785 348B 88			            dey               ; 2 cycles +              
   786 348C 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2176 
   787 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   788 				; restore register
   789 348E			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 348E 68			            pla                 
     2 348F 8D A2 D5		            sta TCPBEN          
     3 3492 68			            pla                 
     4 3493 8D A1 D5		            sta TCPBRH          
     5 3496 68			            pla                 
     6 3497 8D A0 D5		            sta TCPBRL          
     7 349A 68			            pla                 
     8 349B 8D A7 D5		            sta TCMOFR          
     9 349E 68			            pla                 
    10 349F 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   790 34A2 A9 E0		            lda #$E0            ; enable interrupts
   791 34A4 8D 0E D4		            sta NMIEN
   792 34A7 58			            cli
   793 34A8 C6 42		            dec CRITIC          ; 54 cycles
   794 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   795 				; enable interrupts and set rc            
   796 34AA A0 01		RDSIOEND    ldy #$01
   797 34AC 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   798
   799 34AF 98			            tya                 ; set RC
   800 34B0 60			            rts
   801 				            
   802 				; drive configuration buffer
   803 34B1 28 01 12		CONFBUF     .byte $28,$01,$12
   804 34B4 00			L36BB       .byte $00
   805 34B5 00 00 00		            .byte $00,$00,$00
   806 34B8 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
   807 34B9 FF 00 00 00		            .byte $FF,$00,$00,$00
   808
   809 34BD 01			DRVNUM      .byte $01
   810 				; $80 for 128Bytes ($100 for 256Bytes)
   811 34BE			BUFFERXX1
   812 				;            org $37E6
   813 = 353E			REAEND      = BUFFERXX1 + $80
   814 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   815 				;;; END OF REALLOC BLOCK
   816 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   817
   818
   819 				; $20 Bytes
   820 = 353E			BNKSAVBUF   = REAEND
   821
   822 				; $20 bytes
   823 				;            org $3806
   824 				;BNKSAVBUF2  = BNKSAVBUF + $20
   825
   826 				 
   827 				;           org $3826
   828 34BE			            org BNKSAVBUF + $20
   829 				; realloc whole addresses
   830 355E-3670> 42 31		REATAB      .word REAA001+1 ;$33CA
   831 3560 4C 31		            .word REAA002+1 ;$33D4
   832 3562 53 31		            .word REAA003+1 ;$33DB
   833 3564 39 33		            .word REAA004+1 ;$3583
   834 3566 07 34		            .word REAA005+1 ;$364E
   835 3568 58 34		            .word REAA006+1 ;$367E
   836 356A 86 34		            .word REAA007+1 ;$369C
   837 356C 7C 34		            .word REAA008+1 ;$368F
   838 356E 52 33		            .word REAA009+1 ;$35A5
   839 3570 59 33		            .word REAA010+1 ;$35AC
   840 3572 73 33		            .word REAA011+1 ;$35C6
   841 3574 87 33		            .word REAA012+1 ;$35D8
   842 3576 8E 33		            .word REAA013+1 ;$35DF
   843 3578 91 33		            .word REAA014+1 ;$35E2
   844 357A A9 33		            .word REAA015+1 ;$35FA
   845 357C AE 33		            .word REAA016+1 ;$35FF
   846 357E DB 33		            .word REAA017+1 ;$362C
   847 3580 BF 33		            .word REAA020+1 ;$3610
   848 3582 EE 33		            .word REAA021+1
   849 3584 F1 33		            .word REAA022+1
   850 3586 F6 33		            .word REAA023+1
   851 3588 F9 33		            .word REAA024+1
   852 358A 00 00		            .word $0000
   853 				 
   854 				; realloc address low byte           
   855 358C 29 31		            .word REAL001+1 ;$33B1
   856 358E 45 31		            .word REAL002+1 ;$33CD
   857 3590 24 33		            .word REAL003+1 ;$356E
   858 3592 00 00		            .word $0000
   859 				; realloc address high byte (address to high byte and value of low byte)
   860 3594 2D 31		            .word REAH001+1  ;$33B5
   861 3596 20			            .byte <JSRDOSINI ;$6A
   862 				                        
   863 3597 4F 31		            .word REAH002+1 ;$33D7
   864 3599 2E			            .byte <RAMDSIO  ;$78
   865 				            
   866 359A 29 33		            .word REAH003+1  ;$3573
   867 359C 3E			            .byte <REAEND    ;$E6
   868 				            
   869
   870 359D 00 00		            .word $0000
   871 				            
   872 359F A9 00		REASTART    lda #$00
   873 35A1 8D 71 36		            sta REALOOPCNT
   874 35A4 AE 71 36		REALOOP     ldx REALOOPCNT
   875 35A7 BD 63 36		            lda REATABADR,X
   876 35AA 8D 49 36		            sta L3910+1
   877 35AD BD 64 36		            lda REATABADR+1,X
   878 35B0 8D 4A 36		            sta L3910+2
   879 35B3 0D 49 36		            ora L3910+1
   880 35B6 D0 01		            bne L3881
   881 35B8 60			            rts
   882 				            
   883 35B9 38			L3881       sec
   884 35BA BD 67 36		            lda READSTADR,X
   885 35BD FD 65 36		            sbc REASRCADR,X
   886 35C0 8D 72 36		            sta READIFLO
   887 35C3 BD 68 36		            lda READSTADR+1,X
   888 35C6 FD 66 36		            sbc REASRCADR+1,X
   889 35C9 8D 73 36		            sta READIFHI
   890 				            
   891 35CC 20 54 36		L3894       jsr L391C
   892 35CF F0 13		            beq L38AC
   893 35D1 B1 D7		            lda ($D7),Y
   894 35D3 18			            clc
   895 35D4 6D 72 36		            adc READIFLO
   896 35D7 91 D7		            sta ($D7),Y
   897 35D9 C8			            iny
   898 35DA B1 D7		            lda ($D7),Y
   899 35DC 6D 73 36		            adc READIFHI
   900 35DF 91 D7		            sta ($D7),Y
   901 35E1 4C CC 35		            jmp L3894
   902 35E4 20 54 36		L38AC       jsr L391C
   903 35E7 F0 0B		            beq L38BC
   904 35E9 B1 D7		            lda ($D7),Y
   905 35EB 18			            clc
   906 35EC 6D 72 36		            adc READIFLO
   907 35EF 91 D7		            sta ($D7),Y
   908 35F1 4C E4 35		            jmp L38AC
   909 35F4 20 54 36		L38BC       jsr L391C
   910 35F7 F0 11		            beq L38D2
   911 35F9 20 48 36		            jsr L3910
   912 35FC 18			            clc
   913 35FD 6D 72 36		            adc READIFLO
   914 3600 B1 D7		            lda ($D7),Y
   915 3602 6D 73 36		            adc READIFHI
   916 3605 91 D7		            sta ($D7),Y
   917 3607 4C F4 35		            jmp L38BC
   918 360A AE 71 36		L38D2       ldx REALOOPCNT
   919
   920 360D BD 69 36		            lda CPYFROMADR,X
   921 3610 8D 2B 36		            sta L38F2+1
   922 3613 BD 6A 36		            lda CPYFROMADR+1,X
   923 3616 8D 2C 36		            sta L38F2+2
   924
   925 3619 BD 6D 36		            lda CPYTOADR,X
   926 361C 8D 2E 36		            sta L38F2+4
   927 361F BD 6E 36		            lda CPYTOADR+1,X
   928 3622 8D 2F 36		            sta L38F2+5
   929
   930 3625 BC 6C 36		            ldy CPYLENGTH+1,X
   931 3628 A2 00		            ldx #$00
   932 362A BD FF FF		L38F2       lda $FFFF,X
   933 362D 9D FF FF		            sta $FFFF,X
   934 3630 E8			            inx
   935 3631 D0 F7		            bne L38F2
   936 3633 EE 2C 36		            inc L38F2+2
   937 3636 EE 2F 36		            inc L38F2+5
   938 3639 88			            dey
   939 363A 10 EE		            bpl L38F2
   940 363C AD 71 36		            lda REALOOPCNT
   941 363F 18			            clc
   942 3640 69 0C		            adc #$0C
   943 3642 8D 71 36		            sta REALOOPCNT
   944 3645 4C A4 35		            jmp REALOOP
   945 				            
   946 3648 AD FF FF		L3910       lda $FFFF
   947 364B EE 49 36		            inc L3910+1
   948 364E D0 03		            bne L391B
   949 3650 EE 4A 36		            inc L3910+2
   950 3653 60			L391B       rts
   951
   952 3654 20 48 36		L391C       jsr L3910
   953 3657 85 D7		            sta $D7
   954 3659 20 48 36		            jsr L3910
   955 365C A0 00		            ldy #$00
   956 365E 85 D8		            sta $D8
   957 3660 05 D7		            ora $D7
   958 3662 60			            rts
   959
   960 				; realloc code pointer
   961 3663 5E 35		REATABADR   .word REATAB
   962 3665 20 33		REASRCADR   .word REABEGIN
   963 3667 FF FF		READSTADR   .word $FFFF
   964 				; copy code pointer
   965 3669 20 33		CPYFROMADR  .word REABEGIN
   966 366B 1E 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
   967 366D FF FF		CPYTOADR    .word $FFFF
   968 366F 00 00		            .word $0000
   969 				            
   970 				; $01 byte
   971 3671			REALOOPCNT  ;= $392B
   972 = 3672			READIFLO   = REALOOPCNT+1
   973 = 3673			READIFHI   = READIFLO+1
   974
   975
   976 				         
