mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0304			DBUFLO      = $0304
    41 = 0305			DBUFHI      = $0305
    42 = 0308			DBYTLO      = $0308
    43 = 0309			DBYTHI      = $0309
    44 = 030A			DAUX1       = $030A
    45 = 030B			DAUX2       = $030B
    46 = 0340			IOCB0       = $0340
    47 				; 
    48 				; PIA
    49 				; 
    50 = D300			PORTA       = $D300
    51 = D301			PORTB       = $D301
    52 = D302			PACTL       = $D302
    53 = D303			PBCTL       = $D303
    54 				; 
    55 				; ANTIC
    56 				;
    57 = D400			DMACTL      = $D400 
    58 = D40A			WSYNC       = $D40A
    59 = D40E			NMIEN       = $D40E
    60 				; 
    61 				; ROM VECTORS
    62 				; 
    63 = E456			CIOV        = $E456
    64 				;
    65 				; SpartaDOS 
    66 				;
    67 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    68 = 003F			SD_LBUF        = $3F ; offset to line buffer
    69 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    70 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    71 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    72
    73 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74 				; 
    75 				; The!Cart programming information
    76 				; (c) 2013 Matthias Reichl
    77 				;
    78 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    79 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    80 				; 25AA020A). The memory is addressed using 16384 8k banks
    81 				; (64 8k banks when using RAM instead of flash).
    82 				; 
    83 				; The cartridge configuration registers are located at
    84 				; $D5A0-$D5A8. All registers are read/write unless noted
    85 				; otherwise. Unused bits shall be written as '0' and
    86 				; always read back as '0'.
    87 				; 
    88 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    89 				; flash bank 0, writes to flash are disabled.
    90 				; 
    91 				; Depending on the selected cartridge mode additional
    92 				; registers are enabled at $D5xx.
    93 				; 
    94 				; The primary bank register also serves as a base bank
    95 				; register for the various sub-modes.
    96 				; 
    97 				; The secondary bank register is only used in "flexi mode".
    98 				;
    99
   100 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101 				; 
   102 				; The!Cart Register (from-to,default)
   103 				;
   104
   105 				; Mode Select
   106 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   107 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   108 				; other than the ones listed here are reserved (and result
   109 				; in "cartridge off"):
   110 				; $00: off, cartridge disabled
   111 				; $01: 8k banks at $A000
   112 				; $02: AtariMax 1MBit / 128k
   113 				; $03: Atarimax 8MBit / 1MB
   114 				; $04: OSS M091
   115 				; $08: SDX 64k cart, $D5Ex banking
   116 				; $09: Diamond GOS 64k cart, $D5Dx banking
   117 				; $0A: Express 64k cart, $D57x banking
   118 				; $0C: Atrax 128k cart
   119 				; $0D: Williams 64k cart
   120 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   121 				; $21: standard 16k cart at $8000-$BFFF
   122 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   123 				; $23: Blizzard 16k
   124 				; $24: Sic!Cart 512k
   125 				; $28: 16k Mega cart
   126 				; $29: 32k Mega cart
   127 				; $2A: 64k Mega cart
   128 				; $2B: 128k Mega cart
   129 				; $2C: 256k Mega cart
   130 				; $2D: 512k Mega cart
   131 				; $2E: 1024k Mega cart
   132 				; $2F: 2048k Mega cart
   133 				; $30: 32k XEGS cart
   134 				; $31: 64k XEGS cart
   135 				; $32: 128k XEGS cart
   136 				; $33: 256k XEGS cart
   137 				; $34: 512k XEGS cart
   138 				; $35: 1024k XEGS cart
   139 				; $38: 32k SWXEGS cart
   140 				; $39: 64k SWXEGS cart
   141 				; $3A: 128k SWXEGS cart
   142 				; $3B: 256k SWXEGS cart
   143 				; $3C: 512k SWXEGS cart
   144 				; $3D: 1024k SWXEGS cart
   145 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   146 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   147 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   148 				                         ; separate 8k banks at $A000 and $8000
   149 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   150
   151 				; how to figure out that The!Cart is not active?
   152 				; If the address is not used then the XL returns $ff but
   153 				; the XE (and old 800) return $d5 (high byte of address,
   154 				; the value of the last bus cycle)
   155 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   156 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   157
   158 				; Mode Flash/RAM Select
   159 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   160 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   161 				; bit 1: primary bank source (0=flash, 1=RAM)
   162 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   163 				; bit 3: secondary bank source (0=flash, 1=RAM)
   164 = 0000			TCMOFR.FLASH = $00
   165 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   166 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   167
   168 				; Primary Bank
   169 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   170 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   171 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   172
   173 				; Secondary Bank 
   174 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   175 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   176 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   177
   178 				; SPI interface to EEPROM
   179 = D5A8			TCINEP = $d5a8
   180 				; bit 0: SPI CLK
   181 				; bit 1: SPI CS
   182 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   183
   184 				; configuration lock
   185 = D5AF			TCCOLO = $d5af
   186 				; Writing to this register disables "The!Cart" registers
   187 				; at $d5aX.
   188
   189
   190 				; macros
   191
   192 				; saves register: pushes bank register on stack
   193 				M_cart_push .macro
   194 				            lda TCMOSL
   195 				            pha
   196 				            lda TCMOFR
   197 				            pha
   198 				            lda TCPBRL
   199 				            pha
   200 				            lda TCPBRH
   201 				            pha
   202 				            lda TCPBEN
   203 				            pha
   204 				            .endm
   205
   206 				; restores register from stack: pops from stack
   207 				M_cart_pop  .macro
   208 				            pla                 
   209 				            sta TCPBEN          
   210 				            pla                 
   211 				            sta TCPBRH          
   212 				            pla                 
   213 				            sta TCPBRL          
   214 				            pla                 
   215 				            sta TCMOFR          
   216 				            pla                 
   217 				            sta TCMOSL          
   218 				            .endm
   219 				 
   220 				; set bank: number of bank in X, uses A
   221 				M_cart_set  .macro
   222 				; set new The!Cart mode
   223 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   224 				            sta TCMOSL          
   225 				            lda #TCMOFR.PBRAM       ; set to RAM
   226 				            sta TCMOFR
   227 				            txa
   228 				            asl   
   229 				            sta TCPBRL              ; get bank number from X
   230 				            lda #$00                     
   231 				            sta TCPBRH              ; set high to $00
   232 				            lda #$01
   233 				            sta TCPBEN              ; enable        
   234 				            .endm
   235 				;
   236 				; Start of code
   237 				;
   238 				            org $3000
   239 				            
   240 				; info message
   241 FFFF> 3000-3615> 20 1B +             jsr PRINT
   242 3003 54 68 65 21 52 61 +             .byte 'The!Ramdisk ver54 for The!Cart by hjx',$9B,$FF
   243
   244 				; check for The!Cart
   245 302A AD A6 D5		             lda TCMOSL
   246 302D C9 FF		             cmp #TCMOSL.XLLOCK
   247 302F F0 04		             beq NORAMDISK
   248 3031 C9 D5		             cmp #TCMOSL.XELOCK
   249 3033 D0 47		             bne RAMDISKINI
   250 3035			NORAMDISK
   251 				; no banks            
   252 3035 20 1B 34		            jsr PRINT
   253 3038 20 20 45 72 72 6F +             .byte '  Error - The!Cart not found',$9B
   254 3055 20 20 55 73 65 20 +             .byte '  Use shift+return/esc in start menu',$9B,$FF
   255 307B 60			            rts
   256 				                        
   257 307C			RAMDISKINI
   258 				; check for parameter
   259 307C A0 0A		            ldy #SD_BUFOFF
   260 307E B1 0A		            lda (DOSVEC),Y
   261 3080 18			            clc
   262 3081 69 3F		            adc #SD_LBUF
   263 3083 A8			            tay
   264 3084 B1 0A		            lda (DOSVEC),Y
   265 3086 C9 9B		            cmp #$9B
   266 3088 D0 07		            bne PRSPARM
   267 				; no parameter -> error
   268 308A 4C E5 30		            jmp PARAMERR
   269
   270 				; jump for jsr to crunch name
   271 308D 4C FF FF		CRNAME      jmp $FFFF
   272
   273 3090 FF			CHKFRMT     .byte $FF
   274
   275 				; set crunch name address
   276 3091 A5 0A		PRSPARM     lda DOSVEC
   277 3093 18			            clc
   278 3094 69 03		            adc #SD_ZCRNAME
   279 3096 8D 8E 30		            sta CRNAME+1
   280 3099 A5 0B		            lda DOSVEC+1
   281 309B 69 00		            adc #$00
   282 309D 8D 8F 30		            sta CRNAME+2
   283 				            
   284 				; parameter parsing            
   285 				; get drive number SD_COMFNAM starts alway with Dx:
   286 30A0 20 8D 30		            jsr CRNAME
   287 30A3 D0 40		            bne PARAMERR
   288 30A5 A0 22		            ldy #SD_COMFNAM+1
   289 30A7 B1 0A		            lda (DOSVEC),Y
   290 30A9 29 0F		            and #$0F
   291 30AB 8D 15 36		            sta DRVNUM
   292 				; check options /N
   293 30AE 20 8D 30		            jsr CRNAME
   294 30B1 F0 2F		            beq PRSPAREND
   295 30B3 A0 24		            ldy #SD_COMFNAM+3
   296 30B5 B1 0A		            lda (DOSVEC),Y
   297 30B7 C9 2F		            cmp #'/'
   298 30B9 D0 2A		            bne PARAMERR
   299 30BB C8			PRSPARLOOP  iny
   300 30BC B1 0A		            lda (DOSVEC),Y
   301
   302 30BE C9 9B		            cmp #$9B         ; end of parameter
   303 30C0 F0 20		            beq PRSPAREND
   304 				            
   305 30C2 C9 41		            cmp #'A'         ; try to preserve
   306 30C4 D0 0B		            bne PRSPARNXT1
   307 30C6 20 7D 33		            jsr checkfrmt
   308 30C9 90 F0		            bcc PRSPARLOOP
   309 30CB EE 90 30		            inc CHKFRMT
   310 30CE 4C BB 30		            jmp PRSPARLOOP
   311
   312 30D1 C9 46		PRSPARNXT1  cmp #'F'         ; just format
   313 30D3 D0 03		            bne PRSPARNXT2
   314 30D5 4C 21 32		            jmp FRMTRD
   315
   316 30D8 C9 4E		PRSPARNXT2  cmp #'N'         ; format ?
   317 30DA D0 09		            bne PARAMERR
   318 				; check format at startup to preserve existing RAM disk            
   319 30DC EE 90 30		            inc CHKFRMT
   320
   321 30DF 4C BB 30		            jmp PRSPARLOOP
   322
   323 30E2 4C 97 31		PRSPAREND   jmp STARTINST
   324
   325 30E5 20 1B 34		PARAMERR    jsr PRINT
   326 30E8 20 20 45 72 72 6F +             .byte '  Error - Wrong parameter',$9B
   327 3102 20 20 55 73 65 20 +             .byte '  Use RAMCART Dn: [/N|A|F]',$9B
   328 311D 20 20 20 20 4E 20 +             .byte '    N - driver no format',$9B
   329 3136 20 20 20 20 41 20 +             .byte '    A - driver auto format if needed',$9B
   330 315B 20 20 20 20 46 20 +             .byte '    F - format no driver',$9B
   331 3174 20 20 20 20 77 2F +             .byte '    w/o option driver and format',$9B,$FF
   332 3196 60			            rts
   333
   334 3197			STARTINST   
   335 3197 AD 15 36		            lda DRVNUM
   336 319A 18			            clc
   337 319B 69 30		            adc #'0'
   338 319D 8D C0 31		            sta ramDx
   339 31A0 38			            sec
   340 31A1 E9 01		            sbc #$01
   341 31A3 8D CB 31		            sta flashDy
   342 31A6 20 1B 34		            jsr PRINT
   343 31A9 20 20 49 6E 73 74 +             .byte '  Install driver: RAM D'
   344 31C0 78 3A 2C 20 46 6C + ramDx       .byte 'x:, Flash D'
   345 31CB 79 3A 9B FF		flashDy     .byte 'y:',$9B,$FF
   346 				; set jsr to original DOSINI
   347 31CF A5 0C		            lda DOSINI
   348 31D1 8D 52 34		            sta JSRDOSINI+1
   349 31D4 A5 0D		            lda DOSINI+1
   350 31D6 8D 53 34		            sta JSRDOSINI+2
   351
   352 				; set MEMLO oldaddress, realloc
   353 31D9 AD E7 02		            lda MEMLO
   354 31DC 8D BF 37		            sta READSTADR
   355 31DF 8D C5 37		            sta CPYTOADR
   356 31E2 AD E8 02		            lda MEMLO+1
   357 31E5 8D C0 37		            sta READSTADR+1
   358 31E8 8D C6 37		            sta CPYTOADR+1
   359 				;
   360 				; start realloc
   361 				;
   362 31EB 20 F7 36		            jsr REASTART
   363
   364 				; set new DOSINI            
   365 31EE A9 51		REAL001     lda #<JSRDOSINI
   366 31F0 85 0C		            sta DOSINI
   367 31F2 A9 34		REAH001     lda #>JSRDOSINI
   368 31F4 85 0D		            sta DOSINI+1
   369 				; get SIO and patch for RAMDISK
   370 31F6 38			            sec
   371 31F7 A5 0A		            lda DOSVEC
   372 31F9 E9 0A		            sbc #SD_LSIO
   373 31FB 85 32		            sta BUFRLO
   374 31FD A5 0B		            lda DOSVEC+1
   375 31FF E9 00		            sbc #$00
   376 3201 85 33		            sta BUFRHI
   377 3203 A0 00		            ldy #$00
   378 3205 B1 32		            lda (BUFRLO),Y
   379 3207 8D 77 34		REAA001     sta JMPSIO+1      ;realloc $33CA
   380 320A A9 5F		REAL002     lda #<RAMDSIO
   381 320C 91 32		            sta (BUFRLO),Y
   382 320E C8			            iny
   383 320F B1 32		            lda (BUFRLO),Y
   384 3211 8D 78 34		REAA002     sta JMPSIO+2      ;realloc $33D4
   385 3214 A9 34		REAH002     lda #>RAMDSIO
   386 3216 91 32		            sta (BUFRLO),Y
   387 				; set MEMLO            
   388 3218 20 54 34		REAA003     jsr SETMEMLO      ;realloc $33DB
   389 				; format if requested            
   390 321B 2C 90 30		            bit CHKFRMT
   391 321E 30 01		            bmi FRMTRD
   392 3220 60			            rts
   393
   394 				; format ramdisk
   395 3221 20 1B 34		FRMTRD      jsr PRINT
   396 3224 20 20 46 6F 72 6D +             .byte '  Formatted 512k',$9B,$FF
   397
   398 3236 20 A3 33		            jsr cart_save
   399
   400 				; clear sector 0-3
   401 3239 A2 00		_loop03     ldx #$00
   402 323B 20 EA 33		            jsr cart_set
   403 323E A9 00		            lda #$00
   404 3240 A0 7F		            ldy #$7f
   405 3242 99 00 80		FRMTCLP03   sta $8000,Y
   406 3245 88			            dey
   407 3246 10 FA		            bpl FRMTCLP03
   408 3248 20 C2 33		            jsr cart_restore
   409 324B AD 43 32		            lda FRMTCLP03+1
   410 324E 18			            clc
   411 324F 69 80		            adc #$80
   412 3251 8D 43 32		            sta FRMTCLP03+1
   413 3254 AD 44 32		            lda FRMTCLP03+2
   414 3257 69 00		            adc #$00
   415 3259 8D 44 32		            sta FRMTCLP03+2
   416 325C A9 04		_loopcnt03  lda #$04
   417 325E CE 5D 32		            dec _loopcnt03+1
   418 3261 D0 D6		            bne _loop03
   419
   420 				; header loop            
   421 3263 A2 00		            ldx #$00
   422 3265 20 EA 33		            jsr cart_set
   423 3268 A0 2B		            ldy #$2b
   424 326A B9 3A 33		_loopheader lda RDHEAD,Y
   425 326D 99 80 80		            sta $8080,Y
   426 3270 88			            dey
   427 3271 10 F7		            bpl _loopheader
   428 3273 A9 60		            lda #$60    ; write RTS to second boot sector
   429 3275 8D 00 81		            sta $8100   ; see header jmp $3080
   430 3278 20 C2 33		            jsr cart_restore
   431
   432
   433 				; set sector 4-7 to $ff VTOV 512k = 4096 sectors
   434 				; = 4 VTOC sectors
   435 327B A2 00		_loop47     ldx #$00
   436 327D 20 EA 33		            jsr cart_set
   437 3280 A9 FF		            lda #$ff
   438 3282 A0 7F		            ldy #$7f
   439 3284 99 00 82		FRMTCLP47   sta $8200,Y
   440 3287 88			            dey
   441 3288 10 FA		            bpl FRMTCLP47
   442 328A 20 C2 33		            jsr cart_restore
   443 328D AD 85 32		            lda FRMTCLP47+1
   444 3290 18			            clc
   445 3291 69 80		            adc #$80
   446 3293 8D 85 32		            sta FRMTCLP47+1
   447 3296 AD 86 32		            lda FRMTCLP47+2
   448 3299 69 00		            adc #$00
   449 329B 8D 86 32		            sta FRMTCLP47+2
   450 329E A9 04		_loopcnt47  lda #$04
   451 32A0 CE 9F 32		            dec _loopcnt47+1
   452 32A3 D0 D6		            bne _loop47
   453
   454 				; clear sector 8-9 
   455 32A5 A2 00		_loop89     ldx #$00
   456 32A7 20 EA 33		            jsr cart_set
   457 32AA A9 00		            lda #$00
   458 32AC A0 7F		            ldy #$7f
   459 32AE 99 00 84		FRMTCLP89   sta $8400,Y
   460 32B1 88			            dey
   461 32B2 10 FA		            bpl FRMTCLP89
   462 32B4 20 C2 33		            jsr cart_restore
   463 32B7 AD AF 32		            lda FRMTCLP89+1
   464 32BA 18			            clc
   465 32BB 69 80		            adc #$80
   466 32BD 8D AF 32		            sta FRMTCLP89+1
   467 32C0 AD B0 32		            lda FRMTCLP89+2
   468 32C3 69 00		            adc #$00
   469 32C5 8D B0 32		            sta FRMTCLP89+2
   470 32C8 A9 02		_loopcnt89  lda #$02
   471 32CA CE C9 32		            dec _loopcnt89+1
   472 32CD D0 D6		            bne _loop89
   473
   474 32CF A2 00		            ldx #$00
   475 32D1 20 EA 33		            jsr cart_set
   476 				; write magic for Ebiguy
   477 32D4 AD 32 33		            lda MAGIC
   478 32D7 8D 00 80		            sta $8000
   479 				            
   480 32DA AD 33 33		            lda MAGIC+1
   481 32DD 8D 01 80		            sta $8000+1
   482 				            
   483 32E0 AD 34 33		            lda MAGIC+2
   484 32E3 8D 02 80		            sta $8000+2
   485 				            
   486 32E6 AD 35 33		            lda MAGIC+3
   487 32E9 8D 03 80		            sta $8000+3
   488 				            
   489 32EC AD 36 33		            lda MAGIC+4
   490 32EF 8D 04 80		            sta $8000+4
   491 				            
   492 32F2 AD 37 33		            lda MAGIC+5
   493 32F5 8D 05 80		            sta $8000+5
   494 				            
   495 32F8 AD 38 33		            lda MAGIC+6
   496 32FB 8D 06 80		            sta $8000+6
   497 				            
   498 32FE AD 39 33		            lda MAGIC+7
   499 3301 8D 07 80		            sta $8000+7
   500 				; mark used sectors
   501 3304 A9 00		            lda #$00
   502 3306 8D 00 82		            sta $8200   ; sector 0-7
   503 3309 A9 3F		            lda #$3f
   504 330B 8D 01 82		            sta $8201   ; sector 8-9
   505 				;            lda #$fe
   506 				;            sta $83ff   ; sector 4096 does not exit
   507 				; set sector map for MAIN
   508 330E A9 00		            lda #$00    ; two words $0000 (first and last)
   509 3310 8D 00 84		            sta $8400
   510 3313 8D 01 84		            sta $8401
   511 3316 8D 02 84		            sta $8402
   512 3319 8D 03 84		            sta $8403
   513 331C A9 09		            lda #$09    ;  and third $0009 start of main
   514 331E 8D 04 84		            sta $8404
   515 				; set MAIN directory            
   516 3321 A2 00		            ldx #$00
   517 3323 BD 66 33		_loopmain   lda RDMAIN,x
   518 3326 9D 80 84		            sta $8480,x
   519 3329 E8			            inx
   520 332A E0 17		            cpx #$17
   521 332C D0 F5		            bne _loopmain
   522 332E 20 C2 33		            jsr cart_restore
   523
   524 				; finished
   525 3331 60			            rts
   526 				            
   527 3332 34 23 32 21 2D 24 + MAGIC       .byte $34,$23,$32,$21,$2D,$24,$33,$2B
   528 				            
   529 				; load boot sector to $3000 start $3080 and RTS ($60)
   530 333A 00			RDHEAD      .byte $00 ; Usually 0. Some formatting tools put a $53 (='S) for SD here.
   531 333B 03			            .byte $03 ; Number of sectors to boot.
   532 333C 00 30		            .byte $00,$30 ; Address where the boot sectors are loaded to
   533 333E E0 07		            .byte $E0,$07 ; This address is copied to DOSINI
   534 3340 4C 80 30		            .byte $4c,$80,$30 ; After boot jump here: jmp $3080 (just RTS)
   535 3343 08 00		            .byte $08,$00 ; Sector number of the first sector map of the MAIN directory
   536 3345 00 10		            .word $1000 ; total sector count
   537 3347 F6 0F		            .word $0ff6 ; free sector count
   538 3349 04			            .byte $04 ; Number of bit map sectors on the disk
   539 334A 04 00		            .byte $04,$00 ; Sector number of the first bit map sector
   540 334C 28 00		            .byte $28,$00 ; Sector number to begin the file data sector allocation search
   541 334E 0A 00		            .byte $0A,$00 ; Sector number to begin the directory data sector allocation search
   542 3350 43 41 52 54 35 31 +             .byte 'CART512K' ; Volume name, 8 chars
   543 3358 01			            .byte $01 ; Tracks on disk (1 for ramdisks and HDs)
   544 3359 80			            .byte $80 ; Sector size ($80=128,$00=256,$01=512)
   545 335A 20			            .byte $20 ; File system version ($20=SD1.1-4.2 version 2.0, $21=Sd4.4> version 2.1) 
   546 335B 00 00 00 00 00	            .byte $00,$00,$00,$00,$00 ; reserved - no known use
   547 3360 00			            .byte $00 ; Volume sequence number
   548 3361 00			            .byte $00 ; Volume random number
   549 3362 00 00		            .byte $00,$00 ; Sector number of the first sector map of the file to be loaded when the disk is booted
   550 3364 00			            .byte $00 ; Lock flag ($ff=locked, $00=unlocked)
   551 3365 00			            .byte $00
   552
   553 3366 28			RDMAIN      .byte $28 ; Bits 7-0: OpenWrite,-,SubDir,Del,Used,Arc,Hid,Prot
   554 3367 00 00		            .word $0000 ; First sector map of parent directory (MAIN=0)
   555 3369 17 00 00		            .byte $17,$00,$00 ; length of directory in bytes (always times 23 bytes)
   556 336C 4D 41 49 4E 20 20 + RDMAINNAME  .byte 'MAIN       ' ; Name 11 chars
   557 3377 0B 07 47		            .byte $0b,$07,$47 ; Date DD/MM/YY
   558 337A 0B 0B 0B		            .byte $0b,$0b,$0b ; Time HH:MM:SS
   559
   560 				; check preformat
   561 337D			checkfrmt
   562 337D 20 A3 33		            jsr cart_save
   563 3380 A2 00		            ldx #$00
   564 3382 20 EA 33		            jsr cart_set
   565
   566 3385 BD 6C 33		_nxtcharv   lda RDMAINNAME,x    ; check volume name
   567 3388 DD 86 84		            cmp $8486,x
   568 338B D0 0A		            bne _nofrmt
   569 338D E8			            inx
   570 338E E0 0B		            cpx #$0b
   571 3390 D0 F3		            bne _nxtcharv
   572 				            
   573 3392 20 C2 33		            jsr cart_restore
   574 3395 38			            sec
   575 3396 60			            rts
   576 				            
   577 3397 20 C2 33		_nofrmt     jsr cart_restore
   578 339A 18			            clc
   579 339B 60			            rts
   580
   581 				; wait for sync            
   582 339C A5 14		WAITSYNC    lda RTCLOK+2
   583 339E C5 14		WAITLOOP    cmp RTCLOK+2
   584 33A0 F0 FC		            beq WAITLOOP
   585 33A2 60			            rts
   586
   587 33A3			cart_save
   588 33A3 AD A6 D5		            lda TCMOSL
   589 33A6 8D 15 34		            sta _tcmosl
   590 33A9 AD A7 D5		            lda TCMOFR
   591 33AC 8D 16 34		            sta _tcmofr
   592 33AF AD A0 D5		            lda TCPBRL
   593 33B2 8D 17 34		            sta _tcpbrl
   594 33B5 AD A1 D5		            lda TCPBRH
   595 33B8 8D 18 34		            sta _tcpbrh
   596 33BB AD A2 D5		            lda TCPBEN
   597 33BE 8D 19 34		            sta _tcpben
   598
   599 33C1 60			            rts
   600
   601 33C2			cart_restore
   602 33C2 AD 15 34		            lda _tcmosl
   603 33C5 8D A6 D5		            sta TCMOSL
   604 33C8 AD 16 34		            lda _tcmofr
   605 33CB 8D A7 D5		            sta TCMOFR
   606 33CE AD 17 34		            lda _tcpbrl
   607 33D1 8D A0 D5		            sta TCPBRL
   608 33D4 AD 18 34		            lda _tcpbrh
   609 33D7 8D A1 D5		            sta TCPBRH
   610 33DA AD 19 34		            lda _tcpben
   611 33DD 8D A2 D5		            sta TCPBEN
   612
   613 33E0 AD 1A 34		            lda _nmien          ; enable interrupts
   614 33E3 8D 0E D4		            sta NMIEN
   615 33E6 58			            cli
   616 33E7 C6 42		            dec CRITIC 
   617
   618 33E9 60			            rts
   619
   620 33EA			cart_set
   621 33EA E6 42		            inc CRITIC 
   622 33EC 20 9C 33		            jsr WAITSYNC        ; wait for vblank
   623 33EF 78			            sei
   624 33F0 AD 0E D4		            lda NMIEN
   625 33F3 8D 1A 34		            sta _nmien
   626 33F6 A9 00		            lda #$00
   627 33F8 8D 0E D4		            sta NMIEN
   628
   629 33FB A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   630 33FD 8D A6 D5		            sta TCMOSL          
   631 3400 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   632 3402 8D A7 D5		            sta TCMOFR
   633 3405 8A			            txa
   634 3406 0A			            asl   
   635 3407 8D A0 D5		            sta TCPBRL              ; get bank number from X
   636 340A A9 00		            lda #$00                     
   637 340C 8D A1 D5		            sta TCPBRH              ; set high to $00
   638 340F A9 01		            lda #$01
   639 3411 8D A2 D5		            sta TCPBEN              ; enable        
   640
   641 3414 60			            rts            
   642
   643 3415 00			_tcmosl     .byte $00
   644 3416 00			_tcmofr     .byte $00
   645 3417 00			_tcpbrl     .byte $00
   646 3418 00			_tcpbrh     .byte $00
   647 3419 00			_tcpben     .byte $00
   648
   649 341A 00			_nmien      .byte $00
   650 				            
   651 				; print subroutine            
   652 341B 68			PRINT       pla
   653 341C 8D 2C 34		            sta PRINTITER+1
   654 341F 68			            pla
   655 3420 8D 2D 34		            sta PRINTITER+2
   656 3423 EE 2C 34		PRINTLOOP   inc PRINTITER+1
   657 3426 D0 03		            bne PRINTITER
   658 3428 EE 2D 34		            inc PRINTITER+2
   659 342B AD FF FF		PRINTITER   lda $FFFF
   660 342E C9 FF		            cmp #$FF
   661 3430 F0 06		            beq PRINTEND
   662 3432 20 41 34		            jsr CIOPUTCHR
   663 3435 4C 23 34		            jmp PRINTLOOP
   664 3438 AD 2D 34		PRINTEND    lda PRINTITER+2
   665 343B 48			            pha
   666 343C AD 2C 34		            lda PRINTITER+1
   667 343F 48			            pha
   668 3440 60			            rts
   669 				; call cio put char subroutine
   670 3441 A2 00		CIOPUTCHR   ldx #$00
   671 3443 8E 48 03		            stx IOCB0+ICBLL
   672 3446 8E 49 03		            stx IOCB0+ICBLH
   673 3449 A0 0B		            ldy #$0B
   674 344B 8C 42 03		            sty IOCB0+ICCOM
   675 344E 4C 56 E4		            jmp CIOV
   676
   677
   678
   679 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   680 				;;; BEGIN OF REALLOC BLOCK
   681 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   682
   683 				; to realloc routines
   684 				; DOSINI set MEMLO at reset
   685 3451			REABEGIN
   686
   687 3451 20 00 00		JSRDOSINI   jsr $0000
   688 3454			SETMEMLO    
   689 3454 A9 96		REAL003     lda #<REAEND
   690 3456 8D E7 02		            sta MEMLO
   691 3459 A9 36		REAH003     lda #>REAEND
   692 345B 8D E8 02		            sta MEMLO+1
   693 345E 60			            rts
   694
   695 				; new DOSVEC for RAMDISK device
   696 345F AD 00 03		RAMDSIO     lda DDEVIC
   697 3462 C9 31		            cmp #$31
   698 3464 D0 10		            bne JMPSIO
   699 3466 AD 15 36		REAA004     lda DRVNUM  ; check drive number for RAM
   700 3469 CD 01 03		            cmp DUNIT
   701 346C F0 0B		            beq NEWSIOGO
   702 346E AA			            tax         ; check drive number for Flash
   703 346F CA			            dex
   704 3470 8A			            txa
   705 3471 CD 01 03		            cmp DUNIT
   706 3474 F0 03		            beq NEWSIOGO
   707 3476 4C 00 00		JMPSIO      jmp $0000
   708
   709 				; set buffer address
   710 3479 AD 04 03		NEWSIOGO    lda DBUFLO
   711 347C 85 34		            sta BFENLO
   712 347E AD 05 03		            lda DBUFHI
   713 3481 85 35		            sta BFENHI
   714 				; load commad byte            
   715 3483 AD 02 03		            lda DCOMND
   716 				; command STATUS REQUEST
   717 3486 C9 53		            cmp #$53 
   718 3488 D0 1B		            bne NEXT1
   719 348A AD 10 36		REAA009     lda CONFSECSIZ
   720 348D 4A			            lsr
   721 348E 4A			            lsr
   722 348F 49 30		            eor #$30
   723 3491 AC 0C 36		REAA010     ldy L36BB
   724 3494 C0 1A		            cpy #$1A
   725 3496 D0 02		            bne L35B4
   726 3498 09 80		            ora #$80
   727 349A A0 00		L35B4       ldy #$00
   728 349C 91 34		            sta (BFENLO),Y
   729 349E C8			            iny
   730 349F A9 FF		            lda #$FF
   731 34A1 91 34		            sta (BFENLO),Y
   732 34A3 30 24		            bmi JMPSIOEND
   733 				            
   734 				; command RETURN CONFIGURATION            
   735 34A5 C9 4E		NEXT1       cmp #$4E
   736 34A7 D0 0C		            bne NEXT2
   737 34A9 A0 0B		            ldy #$0B            ; 12 bytes
   738 34AB			RETCNFLOOP
   739 34AB B9 09 36		REAA011     lda CONFBUF,Y
   740 34AE 91 34		            sta (BFENLO),Y
   741 34B0 88			            dey
   742 34B1 10 F8		            bpl RETCNFLOOP
   743 34B3 30 14		            bmi JMPSIOEND
   744
   745 				; command SET CONFIGURATION
   746 34B5 C9 4F		NEXT2       cmp #$4F
   747 34B7 D0 13		            bne NEXT3
   748 34B9 A0 07		            ldy #$07
   749 34BB B1 34		            lda (BFENLO),Y
   750 34BD F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   751 34BF 8D 10 36		REAA012     sta CONFSECSIZ
   752 34C2 A0 03		            ldy #$03
   753 34C4 B1 34		            lda (BFENLO),Y
   754 34C6 8D 0C 36		REAA013     sta L36BB
   755
   756 34C9			JMPSIOEND
   757 34C9 4C 02 36		REAA014     jmp RDSIOEND
   758
   759 				; command FORMAT DISK
   760 34CC C9 21		NEXT3       cmp #$21
   761 34CE D0 0B		            bne NEXT4
   762 34D0 A0 00		SIOFRMT     ldy #$00
   763 34D2 A9 FF		            lda #$FF
   764 34D4 91 34		            sta (BFENLO),Y
   765 34D6 C8			            iny
   766 34D7 91 34		            sta (BFENLO),Y
   767 34D9 D0 EE		            bne JMPSIOEND
   768
   769 				; command FORMAT DISK ENHANCED
   770 34DB C9 22		NEXT4       cmp #$22
   771 34DD D0 0C		            bne NEXT5
   772 34DF A9 1A		            lda #$1A
   773 34E1 8D 0C 36		REAA015     sta L36BB
   774 34E4 A9 80		            lda #$80
   775 34E6 8D 10 36		REAA016     sta CONFSECSIZ
   776 34E9 D0 E5		            bne SIOFRMT
   777 				            
   778 				; command PUT/GET SECTOR 
   779 34EB C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   780 34ED F0 0B		            beq PUTGETSEC
   781 34EF C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   782 34F1 F0 07		            beq PUTGETSEC
   783 34F3 C9 50		            cmp #$50            ; command PUT SECTOR
   784 34F5 F0 03		            beq PUTGETSEC
   785 34F7 4C 05 36		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   786 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   787 				; buffer address and calc byte count
   788 34FA A9 00		PUTGETSEC   lda #$00
   789 34FC 85 32		            sta BUFRLO
   790 34FE AD 0A 03		            lda DAUX1
   791 3501 85 33		            sta BUFRHI
   792 3503 AD 0B 03		            lda DAUX2
   793 3506 06 33		            asl BUFRHI
   794 3508 2A			            rol
   795 3509 AA			            tax                 ; set X with memory bank number
   796 350A A5 33		            lda BUFRHI
   797 350C 4A			            lsr
   798 350D 4A			            lsr
   799 350E 66 32		            ror BUFRLO
   800 3510 09 80		            ora #$80
   801 3512 85 33		            sta BUFRHI
   802 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   803 				; set buffer address in copy loops
   804 3514 A5 32		            lda BUFRLO
   805 3516 8D AD 35		REAA021     sta GETADRLP+1
   806 3519 8D E1 35		REAA022     sta PUTADRLP+1
   807 351C A5 33		            lda BUFRHI
   808 351E 8D AE 35		REAA023     sta GETADRLP+2
   809 3521 8D E2 35		REAA024     sta PUTADRLP+2            
   810 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   811 				; check for GET
   812 3524 AD 02 03		            lda DCOMND
   813 3527 C9 52		            cmp #$52
   814 3529 F0 0A		            beq L3656           ; is GET
   815 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   816 				; PUT: put user data to buffer            
   817 352B A0 7F		            ldy #$7F
   818 352D B1 34		L364B       lda (BFENLO),Y
   819 352F 99 16 36		REAA005     sta BUFFERXX1,Y
   820 3532 88			            dey
   821 3533 10 F8		            bpl L364B
   822 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   823 				; check if bank number is in range            
   824 3535 E0 20		L3656       cpx #$20            ; check bank number
   825 3537 B0 BE		            bcs REAA020         ; intermediate jmp to NAK
   826 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   827 3539			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3539 AD A6 D5		            lda TCMOSL
     2 353C 48			            pha
     3 353D AD A7 D5		            lda TCMOFR
     4 3540 48			            pha
     5 3541 AD A0 D5		            lda TCPBRL
     6 3544 48			            pha
     7 3545 AD A1 D5		            lda TCPBRH
     8 3548 48			            pha
     9 3549 AD A2 D5		            lda TCPBEN
    10 354C 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   828 354D E6 42		            inc CRITIC
   829 354F A5 14		            lda RTCLOK+2
   830 3551 C5 14		WAITLOOP2   cmp RTCLOK+2
   831 3553 F0 FC		            beq WAITLOOP2
   832 3555 78			            sei                 ; 40 cycles
   833 3556 AD 0E D4		            lda NMIEN
   834 3559 48			            pha
   835 355A A9 00		            lda #$00
   836 355C 8D 0E D4		            sta NMIEN
   837 				; set bank, number in X
   838 355F A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   839 3561 8D A6 D5		            sta TCMOSL          
   840
   841 3564 AD 15 36		REAA025     lda DRVNUM  ; check drive number for RAM
   842 3567 CD 01 03		            cmp DUNIT
   843 356A F0 23		            beq setTCram
   844
   845 356C A9 00		setTCflash  lda #TCMOFR.FLASH       ; set to FLASH (start $3fc0)
   846 356E 8D A7 D5		            sta TCMOFR
   847 3571 A9 C0		            lda #$c0
   848 3573 8D A0 D5		            sta TCPBRL
   849 3576 A9 3F		            lda #$3f
   850 3578 8D A1 D5		            sta TCPBRH
   851 357B 8A			            txa
   852 357C 0A			            asl
   853 357D 18			            clc   
   854 357E 6D A0 D5		            adc TCPBRL              ; get bank number from X
   855 3581 8D A0 D5		            sta TCPBRL
   856 3584 AD A1 D5		            lda TCPBRH
   857 3587 69 00		            adc #$00                     
   858 3589 8D A1 D5		            sta TCPBRH              ; set high to $00
   859 358C 18			            clc
   860 358D 90 0F		            bcc setTcend
   861
   862 358F A9 03		setTCram    lda #TCMOFR.PBRAM       ; set to RAM
   863 3591 8D A7 D5		            sta TCMOFR
   864 3594 8A			            txa
   865 3595 0A			            asl   
   866 3596 8D A0 D5		            sta TCPBRL              ; get bank number from X
   867 3599 A9 00		            lda #$00                     
   868 359B 8D A1 D5		            sta TCPBRH              ; set high to $00
   869
   870 359E A9 01		setTCend    lda #$01
   871 35A0 8D A2 D5		            sta TCPBEN              ; enable        
   872 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   873 				; check for PUT
   874 35A3 A0 7F		            ldy #$7F            ; 9 cycles
   875 35A5 AD 02 03		            lda DCOMND
   876 35A8 C9 52		            cmp #$52
   877 35AA D0 31		            bne L369B           ; is PUT
   878 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   879 				; GET: read data to buffer
   880 35AC			L367B
   881 				;            lda (BUFRLO),Y      ; 6 cycles
   882 35AC B9 FF FF		GETADRLP    lda $FFFF,Y
   883 35AF 99 16 36		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
   884 35B2 88			            dey                 ; 2 cycles +
   885 35B3 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2176
   886 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   887 				; restore bank for write to user buffer
   888 35B5 68			            pla
   889 35B6 AA			            tax
   890 35B7			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 35B7 68			            pla                 
     2 35B8 8D A2 D5		            sta TCPBEN          
     3 35BB 68			            pla                 
     4 35BC 8D A1 D5		            sta TCPBRH          
     5 35BF 68			            pla                 
     6 35C0 8D A0 D5		            sta TCPBRL          
     7 35C3 68			            pla                 
     8 35C4 8D A7 D5		            sta TCMOFR          
     9 35C7 68			            pla                 
    10 35C8 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   891 35CB 8E 0E D4		            stx NMIEN
   892 35CE 58			            cli
   893 35CF C6 42		            dec CRITIC          ; 54 cycles
   894 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
   895 				; GET: write buffer to user data            
   896 35D1 A0 7F		            ldy #$7F
   897 35D3			L368E
   898 35D3 B9 16 36		REAA008     lda BUFFERXX1,Y
   899 35D6 91 34		            sta (BFENLO),Y
   900 35D8 88			            dey
   901 35D9 10 F8		            bpl L368E
   902 35DB 30 25		            bmi RDSIOEND
   903 				            
   904 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   905 				; PUT: buffer data to sector
   906 35DD			L369B
   907 35DD B9 16 36		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
   908 				;            sta (BUFRLO),Y    ; 6 cycles +              
   909 35E0 99 FF FF		PUTADRLP    sta $FFFF,Y
   910 35E3 88			            dey               ; 2 cycles +              
   911 35E4 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2176 
   912 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   913 				; restore register
   914 35E6 68			            pla
   915 35E7 AA			            tax
   916 35E8			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 35E8 68			            pla                 
     2 35E9 8D A2 D5		            sta TCPBEN          
     3 35EC 68			            pla                 
     4 35ED 8D A1 D5		            sta TCPBRH          
     5 35F0 68			            pla                 
     6 35F1 8D A0 D5		            sta TCPBRL          
     7 35F4 68			            pla                 
     8 35F5 8D A7 D5		            sta TCMOFR          
     9 35F8 68			            pla                 
    10 35F9 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   917 35FC 8E 0E D4		            stx NMIEN
   918 35FF 58			            cli
   919 3600 C6 42		            dec CRITIC          ; 54 cycles
   920 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   921 				; enable interrupts and set rc            
   922 3602 A0 01		RDSIOEND    ldy #$01
   923 3604 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   924
   925 3607 98			            tya                 ; set RC
   926 3608 60			            rts
   927 				            
   928 				; drive configuration buffer
   929 3609 28 01 12		CONFBUF     .byte $28,$01,$12
   930 360C 00			L36BB       .byte $00
   931 360D 00 00 00		            .byte $00,$00,$00
   932 3610 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
   933 3611 FF 00 00 00		            .byte $FF,$00,$00,$00
   934
   935 3615 01			DRVNUM      .byte $01
   936 				; $80 for 128Bytes ($100 for 256Bytes)
   937 3616			BUFFERXX1
   938 				;            org $37E6
   939 = 3696			REAEND      = BUFFERXX1 + $80
   940 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   941 				;;; END OF REALLOC BLOCK
   942 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   943
   944
   945 				; $20 Bytes
   946 = 3696			BNKSAVBUF   = REAEND
   947
   948 				; $20 bytes
   949 				;            org $3806
   950 				;BNKSAVBUF2  = BNKSAVBUF + $20
   951
   952 				 
   953 				;           org $3826
   954 3616			            org BNKSAVBUF + $20
   955 				; realloc whole addresses
   956 36B6-37C8> 08 32		REATAB      .word REAA001+1 ;$33CA
   957 36B8 12 32		            .word REAA002+1 ;$33D4
   958 36BA 19 32		            .word REAA003+1 ;$33DB
   959 36BC 67 34		            .word REAA004+1 ;$3583
   960 36BE 30 35		            .word REAA005+1 ;$364E
   961 36C0 B0 35		            .word REAA006+1 ;$367E
   962 36C2 DE 35		            .word REAA007+1 ;$369C
   963 36C4 D4 35		            .word REAA008+1 ;$368F
   964 36C6 8B 34		            .word REAA009+1 ;$35A5
   965 36C8 92 34		            .word REAA010+1 ;$35AC
   966 36CA AC 34		            .word REAA011+1 ;$35C6
   967 36CC C0 34		            .word REAA012+1 ;$35D8
   968 36CE C7 34		            .word REAA013+1 ;$35DF
   969 36D0 CA 34		            .word REAA014+1 ;$35E2
   970 36D2 E2 34		            .word REAA015+1 ;$35FA
   971 36D4 E7 34		            .word REAA016+1 ;$35FF
   972 36D6 F8 34		            .word REAA020+1 ;$3610
   973 36D8 17 35		            .word REAA021+1
   974 36DA 1A 35		            .word REAA022+1
   975 36DC 1F 35		            .word REAA023+1
   976 36DE 22 35		            .word REAA024+1
   977 36E0 65 35		            .word REAA025+1
   978 36E2 00 00		            .word $0000
   979 				 
   980 				; realloc address low byte           
   981 36E4 EF 31		            .word REAL001+1 ;$33B1
   982 36E6 0B 32		            .word REAL002+1 ;$33CD
   983 36E8 55 34		            .word REAL003+1 ;$356E
   984 36EA 00 00		            .word $0000
   985 				; realloc address high byte (address to high byte and value of low byte)
   986 36EC F3 31		            .word REAH001+1  ;$33B5
   987 36EE 51			            .byte <JSRDOSINI ;$6A
   988 				                        
   989 36EF 15 32		            .word REAH002+1 ;$33D7
   990 36F1 5F			            .byte <RAMDSIO  ;$78
   991 				            
   992 36F2 5A 34		            .word REAH003+1  ;$3573
   993 36F4 96			            .byte <REAEND    ;$E6
   994 				            
   995
   996 36F5 00 00		            .word $0000
   997 				            
   998 36F7 A9 00		REASTART    lda #$00
   999 36F9 8D C9 37		            sta REALOOPCNT
  1000 36FC AE C9 37		REALOOP     ldx REALOOPCNT
  1001 36FF BD BB 37		            lda REATABADR,X
  1002 3702 8D A1 37		            sta L3910+1
  1003 3705 BD BC 37		            lda REATABADR+1,X
  1004 3708 8D A2 37		            sta L3910+2
  1005 370B 0D A1 37		            ora L3910+1
  1006 370E D0 01		            bne L3881
  1007 3710 60			            rts
  1008 				            
  1009 3711 38			L3881       sec
  1010 3712 BD BF 37		            lda READSTADR,X
  1011 3715 FD BD 37		            sbc REASRCADR,X
  1012 3718 8D CA 37		            sta READIFLO
  1013 371B BD C0 37		            lda READSTADR+1,X
  1014 371E FD BE 37		            sbc REASRCADR+1,X
  1015 3721 8D CB 37		            sta READIFHI
  1016 				            
  1017 3724 20 AC 37		L3894       jsr L391C
  1018 3727 F0 13		            beq L38AC
  1019 3729 B1 D7		            lda ($D7),Y
  1020 372B 18			            clc
  1021 372C 6D CA 37		            adc READIFLO
  1022 372F 91 D7		            sta ($D7),Y
  1023 3731 C8			            iny
  1024 3732 B1 D7		            lda ($D7),Y
  1025 3734 6D CB 37		            adc READIFHI
  1026 3737 91 D7		            sta ($D7),Y
  1027 3739 4C 24 37		            jmp L3894
  1028 373C 20 AC 37		L38AC       jsr L391C
  1029 373F F0 0B		            beq L38BC
  1030 3741 B1 D7		            lda ($D7),Y
  1031 3743 18			            clc
  1032 3744 6D CA 37		            adc READIFLO
  1033 3747 91 D7		            sta ($D7),Y
  1034 3749 4C 3C 37		            jmp L38AC
  1035 374C 20 AC 37		L38BC       jsr L391C
  1036 374F F0 11		            beq L38D2
  1037 3751 20 A0 37		            jsr L3910
  1038 3754 18			            clc
  1039 3755 6D CA 37		            adc READIFLO
  1040 3758 B1 D7		            lda ($D7),Y
  1041 375A 6D CB 37		            adc READIFHI
  1042 375D 91 D7		            sta ($D7),Y
  1043 375F 4C 4C 37		            jmp L38BC
  1044 3762 AE C9 37		L38D2       ldx REALOOPCNT
  1045
  1046 3765 BD C1 37		            lda CPYFROMADR,X
  1047 3768 8D 83 37		            sta L38F2+1
  1048 376B BD C2 37		            lda CPYFROMADR+1,X
  1049 376E 8D 84 37		            sta L38F2+2
  1050
  1051 3771 BD C5 37		            lda CPYTOADR,X
  1052 3774 8D 86 37		            sta L38F2+4
  1053 3777 BD C6 37		            lda CPYTOADR+1,X
  1054 377A 8D 87 37		            sta L38F2+5
  1055
  1056 377D BC C4 37		            ldy CPYLENGTH+1,X
  1057 3780 A2 00		            ldx #$00
  1058 3782 BD FF FF		L38F2       lda $FFFF,X
  1059 3785 9D FF FF		            sta $FFFF,X
  1060 3788 E8			            inx
  1061 3789 D0 F7		            bne L38F2
  1062 378B EE 84 37		            inc L38F2+2
  1063 378E EE 87 37		            inc L38F2+5
  1064 3791 88			            dey
  1065 3792 10 EE		            bpl L38F2
  1066 3794 AD C9 37		            lda REALOOPCNT
  1067 3797 18			            clc
  1068 3798 69 0C		            adc #$0C
  1069 379A 8D C9 37		            sta REALOOPCNT
  1070 379D 4C FC 36		            jmp REALOOP
  1071 				            
  1072 37A0 AD FF FF		L3910       lda $FFFF
  1073 37A3 EE A1 37		            inc L3910+1
  1074 37A6 D0 03		            bne L391B
  1075 37A8 EE A2 37		            inc L3910+2
  1076 37AB 60			L391B       rts
  1077
  1078 37AC 20 A0 37		L391C       jsr L3910
  1079 37AF 85 D7		            sta $D7
  1080 37B1 20 A0 37		            jsr L3910
  1081 37B4 A0 00		            ldy #$00
  1082 37B6 85 D8		            sta $D8
  1083 37B8 05 D7		            ora $D7
  1084 37BA 60			            rts
  1085
  1086 				; realloc code pointer
  1087 37BB B6 36		REATABADR   .word REATAB
  1088 37BD 51 34		REASRCADR   .word REABEGIN
  1089 37BF FF FF		READSTADR   .word $FFFF
  1090 				; copy code pointer
  1091 37C1 51 34		CPYFROMADR  .word REABEGIN
  1092 37C3 45 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1093 37C5 FF FF		CPYTOADR    .word $FFFF
  1094 37C7 00 00		            .word $0000
  1095 				            
  1096 				; $01 byte
  1097 37C9			REALOOPCNT  ;= $392B
  1098 = 37CA			READIFLO   = REALOOPCNT+1
  1099 = 37CB			READIFHI   = READIFLO+1
  1100
  1101
  1102 				         
