mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0304			DBUFLO      = $0304
    41 = 0305			DBUFHI      = $0305
    42 = 0308			DBYTLO      = $0308
    43 = 0309			DBYTHI      = $0309
    44 = 030A			DAUX1       = $030A
    45 = 030B			DAUX2       = $030B
    46 = 0340			IOCB0       = $0340
    47 				; 
    48 				; PIA
    49 				; 
    50 = D300			PORTA       = $D300
    51 = D301			PORTB       = $D301
    52 = D302			PACTL       = $D302
    53 = D303			PBCTL       = $D303
    54 				; 
    55 				; ANTIC
    56 				;
    57 = D400			DMACTL      = $D400 
    58 = D40A			WSYNC       = $D40A
    59 = D40E			NMIEN       = $D40E
    60 				; 
    61 				; ROM VECTORS
    62 				; 
    63 = E456			CIOV        = $E456
    64 				;
    65 				; SpartaDOS 
    66 				;
    67 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    68 = 003F			SD_LBUF        = $3F ; offset to line buffer
    69 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    70 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    71 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    72
    73 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74 				; 
    75 				; The!Cart programming information
    76 				; (c) 2013 Matthias Reichl
    77 				;
    78 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    79 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    80 				; 25AA020A). The memory is addressed using 16384 8k banks
    81 				; (64 8k banks when using RAM instead of flash).
    82 				; 
    83 				; The cartridge configuration registers are located at
    84 				; $D5A0-$D5A8. All registers are read/write unless noted
    85 				; otherwise. Unused bits shall be written as '0' and
    86 				; always read back as '0'.
    87 				; 
    88 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    89 				; flash bank 0, writes to flash are disabled.
    90 				; 
    91 				; Depending on the selected cartridge mode additional
    92 				; registers are enabled at $D5xx.
    93 				; 
    94 				; The primary bank register also serves as a base bank
    95 				; register for the various sub-modes.
    96 				; 
    97 				; The secondary bank register is only used in "flexi mode".
    98 				;
    99
   100 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101 				; 
   102 				; The!Cart Register (from-to,default)
   103 				;
   104
   105 				; Mode Select
   106 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   107 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   108 				; other than the ones listed here are reserved (and result
   109 				; in "cartridge off"):
   110 				; $00: off, cartridge disabled
   111 				; $01: 8k banks at $A000
   112 				; $02: AtariMax 1MBit / 128k
   113 				; $03: Atarimax 8MBit / 1MB
   114 				; $04: OSS M091
   115 				; $08: SDX 64k cart, $D5Ex banking
   116 				; $09: Diamond GOS 64k cart, $D5Dx banking
   117 				; $0A: Express 64k cart, $D57x banking
   118 				; $0C: Atrax 128k cart
   119 				; $0D: Williams 64k cart
   120 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   121 				; $21: standard 16k cart at $8000-$BFFF
   122 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   123 				; $23: Blizzard 16k
   124 				; $24: Sic!Cart 512k
   125 				; $28: 16k Mega cart
   126 				; $29: 32k Mega cart
   127 				; $2A: 64k Mega cart
   128 				; $2B: 128k Mega cart
   129 				; $2C: 256k Mega cart
   130 				; $2D: 512k Mega cart
   131 				; $2E: 1024k Mega cart
   132 				; $2F: 2048k Mega cart
   133 				; $30: 32k XEGS cart
   134 				; $31: 64k XEGS cart
   135 				; $32: 128k XEGS cart
   136 				; $33: 256k XEGS cart
   137 				; $34: 512k XEGS cart
   138 				; $35: 1024k XEGS cart
   139 				; $38: 32k SWXEGS cart
   140 				; $39: 64k SWXEGS cart
   141 				; $3A: 128k SWXEGS cart
   142 				; $3B: 256k SWXEGS cart
   143 				; $3C: 512k SWXEGS cart
   144 				; $3D: 1024k SWXEGS cart
   145 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   146 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   147 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   148 				                         ; separate 8k banks at $A000 and $8000
   149 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   150
   151 				; how to figure out that The!Cart is not active?
   152 				; If the address is not used then the XL returns $ff but
   153 				; the XE (and old 800) return $d5 (high byte of address,
   154 				; the value of the last bus cycle)
   155 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   156 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   157
   158 				; Mode Flash/RAM Select
   159 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   160 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   161 				; bit 1: primary bank source (0=flash, 1=RAM)
   162 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   163 				; bit 3: secondary bank source (0=flash, 1=RAM)
   164 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   165 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   166
   167 				; Primary Bank
   168 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   169 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   170 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   171
   172 				; Secondary Bank 
   173 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   174 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   175 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   176
   177 				; SPI interface to EEPROM
   178 = D5A8			TCINEP = $d5a8
   179 				; bit 0: SPI CLK
   180 				; bit 1: SPI CS
   181 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   182
   183 				; configuration lock
   184 = D5AF			TCCOLO = $d5af
   185 				; Writing to this register disables "The!Cart" registers
   186 				; at $d5aX.
   187
   188
   189 				; macros
   190
   191 				; saves register: pushes bank register on stack
   192 				M_cart_push .macro
   193 				            lda TCMOSL
   194 				            pha
   195 				            lda TCMOFR
   196 				            pha
   197 				            lda TCPBRL
   198 				            pha
   199 				            lda TCPBRH
   200 				            pha
   201 				            lda TCPBEN
   202 				            pha
   203 				            .endm
   204
   205 				; restores register from stack: pops from stack
   206 				M_cart_pop  .macro
   207 				            pla                 
   208 				            sta TCPBEN          
   209 				            pla                 
   210 				            sta TCPBRH          
   211 				            pla                 
   212 				            sta TCPBRL          
   213 				            pla                 
   214 				            sta TCMOFR          
   215 				            pla                 
   216 				            sta TCMOSL          
   217 				            .endm
   218 				 
   219 				; set bank: number of bank in X, uses A
   220 				M_cart_set  .macro
   221 				; set new The!Cart mode
   222 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   223 				            sta TCMOSL          
   224 				            lda #TCMOFR.PBRAM       ; set to RAM
   225 				            sta TCMOFR
   226 				            txa
   227 				            asl   
   228 				            sta TCPBRL              ; get bank number from X
   229 				            lda #$00                     
   230 				            sta TCPBRH              ; set high to $00
   231 				            lda #$01
   232 				            sta TCPBEN              ; enable        
   233 				            .endm
   234 				;
   235 				; Start of code
   236 				;
   237 				            org $3000
   238 				            
   239 				; info message
   240 FFFF> 3000-35C3> 20 FC +             jsr PRINT
   241 3003 54 48 45 21 52 41 +             .byte 'THE!RAMDISK ver51 for THE!CART by HJX',$9B,$FF
   242
   243 				; check for The!Cart
   244 302A AD A6 D5		             lda TCMOSL
   245 302D C9 FF		             cmp #TCMOSL.XLLOCK
   246 302F F0 04		             beq NORAMDISK
   247 3031 C9 D5		             cmp #TCMOSL.XELOCK
   248 3033 D0 50		             bne RAMDISKINI
   249 3035			NORAMDISK
   250 				; no banks            
   251 3035 20 FC 33		            jsr PRINT
   252 3038 20 20 45 72 72 6F +             .byte '  Error - 512k RAM THE!CART not found',$9B
   253 305E 20 20 55 73 65 20 +             .byte '  Use SHIFT+RETURN/ESC in start menu',$9B,$FF
   254 3084 60			            rts
   255 				                        
   256 3085			RAMDISKINI
   257 				; check for parameter
   258 3085 A0 0A		            ldy #SD_BUFOFF
   259 3087 B1 0A		            lda (DOSVEC),Y
   260 3089 18			            clc
   261 308A 69 3F		            adc #SD_LBUF
   262 308C A8			            tay
   263 308D B1 0A		            lda (DOSVEC),Y
   264 308F C9 9B		            cmp #$9B
   265 3091 D0 07		            bne PRSPARM
   266 				; no parameter -> error
   267 3093 4C EE 30		            jmp PARAMERR
   268
   269 				; jump for jsr to crunch name
   270 3096 4C FF FF		CRNAME      jmp $FFFF
   271
   272 3099 FF			CHKFRMT     .byte $FF
   273
   274 				; set crunch name address
   275 309A A5 0A		PRSPARM     lda DOSVEC
   276 309C 18			            clc
   277 309D 69 03		            adc #SD_ZCRNAME
   278 309F 8D 97 30		            sta CRNAME+1
   279 30A2 A5 0B		            lda DOSVEC+1
   280 30A4 69 00		            adc #$00
   281 30A6 8D 98 30		            sta CRNAME+2
   282 				            
   283 				; parameter parsing            
   284 				; get drive number SD_COMFNAM starts alway with Dx:
   285 30A9 20 96 30		            jsr CRNAME
   286 30AC D0 40		            bne PARAMERR
   287 30AE A0 22		            ldy #SD_COMFNAM+1
   288 30B0 B1 0A		            lda (DOSVEC),Y
   289 30B2 29 0F		            and #$0F
   290 30B4 8D C3 35		            sta DRVNUM
   291 				; check options /N
   292 30B7 20 96 30		            jsr CRNAME
   293 30BA F0 2F		            beq PRSPAREND
   294 30BC A0 24		            ldy #SD_COMFNAM+3
   295 30BE B1 0A		            lda (DOSVEC),Y
   296 30C0 C9 2F		            cmp #'/'
   297 30C2 D0 2A		            bne PARAMERR
   298 30C4 C8			PRSPARLOOP  iny
   299 30C5 B1 0A		            lda (DOSVEC),Y
   300
   301 30C7 C9 9B		            cmp #$9B         ; end of parameter
   302 30C9 F0 20		            beq PRSPAREND
   303 				            
   304 30CB C9 41		            cmp #'A'         ; try to preserve
   305 30CD D0 0B		            bne PRSPARNXT1
   306 30CF 20 5E 33		            jsr checkfrmt
   307 30D2 90 F0		            bcc PRSPARLOOP
   308 30D4 EE 99 30		            inc CHKFRMT
   309 30D7 4C C4 30		            jmp PRSPARLOOP
   310
   311 30DA C9 46		PRSPARNXT1  cmp #'F'         ; just format
   312 30DC D0 03		            bne PRSPARNXT2
   313 30DE 4C 07 32		            jmp FRMTRD
   314
   315 30E1 C9 4E		PRSPARNXT2  cmp #'N'         ; format ?
   316 30E3 D0 09		            bne PARAMERR
   317 				; check format at startup to preserve existing RAM disk            
   318 30E5 EE 99 30		            inc CHKFRMT
   319
   320 30E8 4C C4 30		            jmp PRSPARLOOP
   321
   322 30EB 4C A0 31		PRSPAREND   jmp STARTINST
   323
   324 30EE 20 FC 33		PARAMERR    jsr PRINT
   325 30F1 20 20 45 72 72 6F +             .byte '  Error - Wrong parameter',$9B
   326 310B 20 20 55 73 65 20 +             .byte '  Use RAMCART Dn: [/N|A|F]',$9B
   327 3126 20 20 20 20 4E 20 +             .byte '    N - driver no format',$9B
   328 313F 20 20 20 20 41 20 +             .byte '    A - driver auto format if needed',$9B
   329 3164 20 20 20 20 46 20 +             .byte '    F - format no driver',$9B
   330 317D 20 20 20 20 77 2F +             .byte '    w/o option driver and format',$9B,$FF
   331 319F 60			            rts
   332
   333 31A0 20 FC 33		STARTINST   jsr PRINT
   334 31A3 20 20 49 6E 73 74 +             .byte '  Install driver',$9B,$FF
   335 				; set jsr to original DOSINI
   336 31B5 A5 0C		            lda DOSINI
   337 31B7 8D 33 34		            sta JSRDOSINI+1
   338 31BA A5 0D		            lda DOSINI+1
   339 31BC 8D 34 34		            sta JSRDOSINI+2
   340
   341 				; set MEMLO oldaddress, realloc
   342 31BF AD E7 02		            lda MEMLO
   343 31C2 8D 6B 37		            sta READSTADR
   344 31C5 8D 71 37		            sta CPYTOADR
   345 31C8 AD E8 02		            lda MEMLO+1
   346 31CB 8D 6C 37		            sta READSTADR+1
   347 31CE 8D 72 37		            sta CPYTOADR+1
   348 				;
   349 				; start realloc
   350 				;
   351 31D1 20 A3 36		            jsr REASTART
   352
   353 				; set new DOSINI            
   354 31D4 A9 32		REAL001     lda #<JSRDOSINI
   355 31D6 85 0C		            sta DOSINI
   356 31D8 A9 34		REAH001     lda #>JSRDOSINI
   357 31DA 85 0D		            sta DOSINI+1
   358 				; get SIO and patch for RAMDISK
   359 31DC 38			            sec
   360 31DD A5 0A		            lda DOSVEC
   361 31DF E9 0A		            sbc #SD_LSIO
   362 31E1 85 32		            sta BUFRLO
   363 31E3 A5 0B		            lda DOSVEC+1
   364 31E5 E9 00		            sbc #$00
   365 31E7 85 33		            sta BUFRHI
   366 31E9 A0 00		            ldy #$00
   367 31EB B1 32		            lda (BUFRLO),Y
   368 31ED 8D 50 34		REAA001     sta JMPSIO+1      ;realloc $33CA
   369 31F0 A9 40		REAL002     lda #<RAMDSIO
   370 31F2 91 32		            sta (BUFRLO),Y
   371 31F4 C8			            iny
   372 31F5 B1 32		            lda (BUFRLO),Y
   373 31F7 8D 51 34		REAA002     sta JMPSIO+2      ;realloc $33D4
   374 31FA A9 34		REAH002     lda #>RAMDSIO
   375 31FC 91 32		            sta (BUFRLO),Y
   376 				; set MEMLO            
   377 31FE 20 35 34		REAA003     jsr SETMEMLO      ;realloc $33DB
   378 				; format if requested            
   379 3201 2C 99 30		            bit CHKFRMT
   380 3204 30 01		            bmi FRMTRD
   381 3206 60			            rts
   382
   383 				; format ramdisk
   384 3207 20 FC 33		FRMTRD      jsr PRINT
   385 320A 20 20 46 6F 72 6D +             .byte '  Formatted 512k',$9B,$FF
   386
   387 321C 20 84 33		            jsr cart_save
   388
   389 				; clear sector 0-3
   390 321F A2 00		_loop03     ldx #$00
   391 3221 20 CB 33		            jsr cart_set
   392 3224 A9 00		            lda #$00
   393 3226 A0 7F		            ldy #$7f
   394 3228 99 00 80		FRMTCLP03   sta $8000,Y
   395 322B 88			            dey
   396 322C 10 FA		            bpl FRMTCLP03
   397 322E 20 A3 33		            jsr cart_restore
   398 3231 AD 29 32		            lda FRMTCLP03+1
   399 3234 18			            clc
   400 3235 69 80		            adc #$80
   401 3237 8D 29 32		            sta FRMTCLP03+1
   402 323A AD 2A 32		            lda FRMTCLP03+2
   403 323D 69 00		            adc #$00
   404 323F 8D 2A 32		            sta FRMTCLP03+2
   405 3242 A9 04		_loopcnt03  lda #$04
   406 3244 CE 43 32		            dec _loopcnt03+1
   407 3247 D0 D6		            bne _loop03
   408
   409 				; header loop            
   410 3249 A2 00		            ldx #$00
   411 324B 20 CB 33		            jsr cart_set
   412 324E A0 2B		            ldy #$2b
   413 3250 B9 1B 33		_loopheader lda RDHEAD,Y
   414 3253 99 80 80		            sta $8080,Y
   415 3256 88			            dey
   416 3257 10 F7		            bpl _loopheader
   417 3259 20 A3 33		            jsr cart_restore
   418
   419
   420 				; set sector 4-7 to $ff VTOV 512k = 4096 sectors
   421 				; = 4 VTOC sectors
   422 325C A2 00		_loop47     ldx #$00
   423 325E 20 CB 33		            jsr cart_set
   424 3261 A9 FF		            lda #$ff
   425 3263 A0 7F		            ldy #$7f
   426 3265 99 00 82		FRMTCLP47   sta $8200,Y
   427 3268 88			            dey
   428 3269 10 FA		            bpl FRMTCLP47
   429 326B 20 A3 33		            jsr cart_restore
   430 326E AD 66 32		            lda FRMTCLP47+1
   431 3271 18			            clc
   432 3272 69 80		            adc #$80
   433 3274 8D 66 32		            sta FRMTCLP47+1
   434 3277 AD 67 32		            lda FRMTCLP47+2
   435 327A 69 00		            adc #$00
   436 327C 8D 67 32		            sta FRMTCLP47+2
   437 327F A9 04		_loopcnt47  lda #$04
   438 3281 CE 80 32		            dec _loopcnt47+1
   439 3284 D0 D6		            bne _loop47
   440
   441 				; clear sector 8-9 
   442 3286 A2 00		_loop89     ldx #$00
   443 3288 20 CB 33		            jsr cart_set
   444 328B A9 00		            lda #$00
   445 328D A0 7F		            ldy #$7f
   446 328F 99 00 84		FRMTCLP89   sta $8400,Y
   447 3292 88			            dey
   448 3293 10 FA		            bpl FRMTCLP89
   449 3295 20 A3 33		            jsr cart_restore
   450 3298 AD 90 32		            lda FRMTCLP89+1
   451 329B 18			            clc
   452 329C 69 80		            adc #$80
   453 329E 8D 90 32		            sta FRMTCLP89+1
   454 32A1 AD 91 32		            lda FRMTCLP89+2
   455 32A4 69 00		            adc #$00
   456 32A6 8D 91 32		            sta FRMTCLP89+2
   457 32A9 A9 02		_loopcnt89  lda #$02
   458 32AB CE AA 32		            dec _loopcnt89+1
   459 32AE D0 D6		            bne _loop89
   460
   461 32B0 A2 00		            ldx #$00
   462 32B2 20 CB 33		            jsr cart_set
   463 				; write magic for Ebiguy
   464 32B5 AD 13 33		            lda MAGIC
   465 32B8 8D 00 80		            sta $8000
   466 				            
   467 32BB AD 14 33		            lda MAGIC+1
   468 32BE 8D 01 80		            sta $8000+1
   469 				            
   470 32C1 AD 15 33		            lda MAGIC+2
   471 32C4 8D 02 80		            sta $8000+2
   472 				            
   473 32C7 AD 16 33		            lda MAGIC+3
   474 32CA 8D 03 80		            sta $8000+3
   475 				            
   476 32CD AD 17 33		            lda MAGIC+4
   477 32D0 8D 04 80		            sta $8000+4
   478 				            
   479 32D3 AD 18 33		            lda MAGIC+5
   480 32D6 8D 05 80		            sta $8000+5
   481 				            
   482 32D9 AD 19 33		            lda MAGIC+6
   483 32DC 8D 06 80		            sta $8000+6
   484 				            
   485 32DF AD 1A 33		            lda MAGIC+7
   486 32E2 8D 07 80		            sta $8000+7
   487 				; mark used sectors
   488 32E5 A9 00		            lda #$00
   489 32E7 8D 00 82		            sta $8200   ; sector 0-7
   490 32EA A9 3F		            lda #$3f
   491 32EC 8D 01 82		            sta $8201   ; sector 8-9
   492 				;            lda #$fe
   493 				;            sta $83ff   ; sector 4096 does not exit
   494 				; set sector map for MAIN
   495 32EF A9 00		            lda #$00    ; two words $0000 (first and last)
   496 32F1 8D 00 84		            sta $8400
   497 32F4 8D 01 84		            sta $8401
   498 32F7 8D 02 84		            sta $8402
   499 32FA 8D 03 84		            sta $8403
   500 32FD A9 09		            lda #$09    ;  and third $0009 start of main
   501 32FF 8D 04 84		            sta $8404
   502 				; set MAIN directory            
   503 3302 A2 00		            ldx #$00
   504 3304 BD 47 33		_loopmain   lda RDMAIN,x
   505 3307 9D 80 84		            sta $8480,x
   506 330A E8			            inx
   507 330B E0 17		            cpx #$17
   508 330D D0 F5		            bne _loopmain
   509 330F 20 A3 33		            jsr cart_restore
   510
   511 				; finished
   512 3312 60			            rts
   513 				            
   514 3313 34 23 32 21 2D 24 + MAGIC       .byte $34,$23,$32,$21,$2D,$24,$33,$2B
   515 				            
   516 331B 00			RDHEAD      .byte $00 ; Usually 0. Some formatting tools put a $53 (='S) for SD here.
   517 331C 03			            .byte $03 ; Number of sectors to boot.
   518 331D 00 30		            .byte $00,$30 ; Address where the boot sectors are loaded to
   519 331F 0E 07		            .byte $0e,$07 ; This address is copied to DOSINI
   520 3321 4C 80 30		            .byte $4c,$80,$30 ; After boot jump here: jmp $3080
   521 3324 08 00		            .byte $08,$00 ; Sector number of the first sector map of the MAIN directory
   522 3326 FF 0F		            .word $0fff ; total sector count
   523 3328 F6 0F		            .word $0ff6 ; free sector count
   524 332A 04			            .byte $04 ; Number of bit map sectors on the disk
   525 332B 04 00		            .byte $04,$00 ; Sector number of the first bit map sector
   526 332D 28 00		            .byte $28,$00 ; Sector number to begin the file data sector allocation search
   527 332F 0A 00		            .byte $0A,$00 ; Sector number to begin the directory data sector allocation search
   528 3331 43 41 52 54 35 31 +             .byte 'CART512K' ; Volume name, 8 chars
   529 3339 01			            .byte $01 ; Tracks on disk (1 for ramdisks and HDs)
   530 333A 80			            .byte $80 ; Sector size ($80=128,$00=256,$01=512)
   531 333B 20			            .byte $20 ; File system version ($20=SD1.1-4.2 version 2.0, $21=Sd4.4> version 2.1) 
   532 333C 00 00 00 00 00	            .byte $00,$00,$00,$00,$00 ; reserved - no known use
   533 3341 00			            .byte $00 ; Volume sequence number
   534 3342 00			            .byte $00 ; Volume random number
   535 3343 00 00		            .byte $00,$00 ; Sector number of the first sector map of the file to be loaded when the disk is booted
   536 3345 00			            .byte $00 ; Lock flag ($ff=locked, $00=unlocked)
   537 3346 00			            .byte $00
   538
   539 3347 28			RDMAIN      .byte $28 ; Bits 7-0: OpenWrite,-,SubDir,Del,Used,Arc,Hid,Prot
   540 3348 00 00		            .word $0000 ; First sector map of parent directory (MAIN=0)
   541 334A 17 00 00		            .byte $17,$00,$00 ; length of directory in bytes (always times 23 bytes)
   542 334D 4D 41 49 4E 20 20 + RDMAINNAME  .byte 'MAIN       ' ; Name 11 chars
   543 3358 0B 07 47		            .byte $0b,$07,$47 ; Date DD/MM/YY
   544 335B 0B 0B 0B		            .byte $0b,$0b,$0b ; Time HH:MM:SS
   545
   546 				; check preformat
   547 335E			checkfrmt
   548 335E 20 84 33		            jsr cart_save
   549 3361 A2 00		            ldx #$00
   550 3363 20 CB 33		            jsr cart_set
   551
   552 3366 BD 4D 33		_nxtcharv   lda RDMAINNAME,x    ; check volume name
   553 3369 DD 86 84		            cmp $8486,x
   554 336C D0 0A		            bne _nofrmt
   555 336E E8			            inx
   556 336F E0 0B		            cpx #$0b
   557 3371 D0 F3		            bne _nxtcharv
   558 				            
   559 3373 20 A3 33		            jsr cart_restore
   560 3376 38			            sec
   561 3377 60			            rts
   562 				            
   563 3378 20 A3 33		_nofrmt     jsr cart_restore
   564 337B 18			            clc
   565 337C 60			            rts
   566
   567 				; wait for sync            
   568 337D A5 14		WAITSYNC    lda RTCLOK+2
   569 337F C5 14		WAITLOOP    cmp RTCLOK+2
   570 3381 F0 FC		            beq WAITLOOP
   571 3383 60			            rts
   572
   573 3384			cart_save
   574 3384 AD A6 D5		            lda TCMOSL
   575 3387 8D F6 33		            sta _tcmosl
   576 338A AD A7 D5		            lda TCMOFR
   577 338D 8D F7 33		            sta _tcmofr
   578 3390 AD A0 D5		            lda TCPBRL
   579 3393 8D F8 33		            sta _tcpbrl
   580 3396 AD A1 D5		            lda TCPBRH
   581 3399 8D F9 33		            sta _tcpbrh
   582 339C AD A2 D5		            lda TCPBEN
   583 339F 8D FA 33		            sta _tcpben
   584
   585 33A2 60			            rts
   586
   587 33A3			cart_restore
   588 33A3 AD F6 33		            lda _tcmosl
   589 33A6 8D A6 D5		            sta TCMOSL
   590 33A9 AD F7 33		            lda _tcmofr
   591 33AC 8D A7 D5		            sta TCMOFR
   592 33AF AD F8 33		            lda _tcpbrl
   593 33B2 8D A0 D5		            sta TCPBRL
   594 33B5 AD F9 33		            lda _tcpbrh
   595 33B8 8D A1 D5		            sta TCPBRH
   596 33BB AD FA 33		            lda _tcpben
   597 33BE 8D A2 D5		            sta TCPBEN
   598
   599 33C1 AD FB 33		            lda _nmien          ; enable interrupts
   600 33C4 8D 0E D4		            sta NMIEN
   601 33C7 58			            cli
   602 33C8 C6 42		            dec CRITIC 
   603
   604 33CA 60			            rts
   605
   606 33CB			cart_set
   607 33CB E6 42		            inc CRITIC 
   608 33CD 20 7D 33		            jsr WAITSYNC        ; wait for vblank
   609 33D0 78			            sei
   610 33D1 AD 0E D4		            lda NMIEN
   611 33D4 8D FB 33		            sta _nmien
   612 33D7 A9 00		            lda #$00
   613 33D9 8D 0E D4		            sta NMIEN
   614
   615 33DC A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   616 33DE 8D A6 D5		            sta TCMOSL          
   617 33E1 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   618 33E3 8D A7 D5		            sta TCMOFR
   619 33E6 8A			            txa
   620 33E7 0A			            asl   
   621 33E8 8D A0 D5		            sta TCPBRL              ; get bank number from X
   622 33EB A9 00		            lda #$00                     
   623 33ED 8D A1 D5		            sta TCPBRH              ; set high to $00
   624 33F0 A9 01		            lda #$01
   625 33F2 8D A2 D5		            sta TCPBEN              ; enable        
   626
   627 33F5 60			            rts            
   628
   629 33F6 00			_tcmosl     .byte $00
   630 33F7 00			_tcmofr     .byte $00
   631 33F8 00			_tcpbrl     .byte $00
   632 33F9 00			_tcpbrh     .byte $00
   633 33FA 00			_tcpben     .byte $00
   634
   635 33FB 00			_nmien      .byte $00
   636 				            
   637 				; print subroutine            
   638 33FC 68			PRINT       pla
   639 33FD 8D 0D 34		            sta PRINTITER+1
   640 3400 68			            pla
   641 3401 8D 0E 34		            sta PRINTITER+2
   642 3404 EE 0D 34		PRINTLOOP   inc PRINTITER+1
   643 3407 D0 03		            bne PRINTITER
   644 3409 EE 0E 34		            inc PRINTITER+2
   645 340C AD FF FF		PRINTITER   lda $FFFF
   646 340F C9 FF		            cmp #$FF
   647 3411 F0 06		            beq PRINTEND
   648 3413 20 22 34		            jsr CIOPUTCHR
   649 3416 4C 04 34		            jmp PRINTLOOP
   650 3419 AD 0E 34		PRINTEND    lda PRINTITER+2
   651 341C 48			            pha
   652 341D AD 0D 34		            lda PRINTITER+1
   653 3420 48			            pha
   654 3421 60			            rts
   655 				; call cio put char subroutine
   656 3422 A2 00		CIOPUTCHR   ldx #$00
   657 3424 8E 48 03		            stx IOCB0+ICBLL
   658 3427 8E 49 03		            stx IOCB0+ICBLH
   659 342A A0 0B		            ldy #$0B
   660 342C 8C 42 03		            sty IOCB0+ICCOM
   661 342F 4C 56 E4		            jmp CIOV
   662
   663
   664
   665 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   666 				;;; BEGIN OF REALLOC BLOCK
   667 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   668
   669 				; to realloc routines
   670 				; DOSINI set MEMLO at reset
   671 3432			REABEGIN
   672
   673 3432 20 00 00		JSRDOSINI   jsr $0000
   674 3435			SETMEMLO    
   675 3435 A9 44		REAL003     lda #<REAEND
   676 3437 8D E7 02		            sta MEMLO
   677 343A A9 36		REAH003     lda #>REAEND
   678 343C 8D E8 02		            sta MEMLO+1
   679 343F 60			            rts
   680
   681 				; new DOSVEC for RAMDISK device
   682 3440 AD 00 03		RAMDSIO     lda DDEVIC
   683 3443 C9 31		            cmp #$31
   684 3445 D0 08		            bne JMPSIO
   685 3447 AD 01 03		            lda DUNIT
   686 344A CD C3 35		REAA004     cmp DRVNUM
   687 344D F0 03		            beq NEWSIOGO
   688 344F 4C 00 00		JMPSIO      jmp $0000
   689
   690 				; set buffer address
   691 3452 AD 04 03		NEWSIOGO    lda DBUFLO
   692 3455 85 34		            sta BFENLO
   693 3457 AD 05 03		            lda DBUFHI
   694 345A 85 35		            sta BFENHI
   695 				; load commad byte            
   696 345C AD 02 03		            lda DCOMND
   697 				; command STATUS REQUEST
   698 345F C9 53		            cmp #$53 
   699 3461 D0 1B		            bne NEXT1
   700 3463 AD BE 35		REAA009     lda CONFSECSIZ
   701 3466 4A			            lsr
   702 3467 4A			            lsr
   703 3468 49 30		            eor #$30
   704 346A AC BA 35		REAA010     ldy L36BB
   705 346D C0 1A		            cpy #$1A
   706 346F D0 02		            bne L35B4
   707 3471 09 80		            ora #$80
   708 3473 A0 00		L35B4       ldy #$00
   709 3475 91 34		            sta (BFENLO),Y
   710 3477 C8			            iny
   711 3478 A9 FF		            lda #$FF
   712 347A 91 34		            sta (BFENLO),Y
   713 347C 30 24		            bmi JMPSIOEND
   714 				            
   715 				; command RETURN CONFIGURATION            
   716 347E C9 4E		NEXT1       cmp #$4E
   717 3480 D0 0C		            bne NEXT2
   718 3482 A0 0B		            ldy #$0B            ; 12 bytes
   719 3484			RETCNFLOOP
   720 3484 B9 B7 35		REAA011     lda CONFBUF,Y
   721 3487 91 34		            sta (BFENLO),Y
   722 3489 88			            dey
   723 348A 10 F8		            bpl RETCNFLOOP
   724 348C 30 14		            bmi JMPSIOEND
   725
   726 				; command SET CONFIGURATION
   727 348E C9 4F		NEXT2       cmp #$4F
   728 3490 D0 13		            bne NEXT3
   729 3492 A0 07		            ldy #$07
   730 3494 B1 34		            lda (BFENLO),Y
   731 3496 F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   732 3498 8D BE 35		REAA012     sta CONFSECSIZ
   733 349B A0 03		            ldy #$03
   734 349D B1 34		            lda (BFENLO),Y
   735 349F 8D BA 35		REAA013     sta L36BB
   736
   737 34A2			JMPSIOEND
   738 34A2 4C B0 35		REAA014     jmp RDSIOEND
   739
   740 				; command FORMAT DISK
   741 34A5 C9 21		NEXT3       cmp #$21
   742 34A7 D0 0B		            bne NEXT4
   743 34A9 A0 00		SIOFRMT     ldy #$00
   744 34AB A9 FF		            lda #$FF
   745 34AD 91 34		            sta (BFENLO),Y
   746 34AF C8			            iny
   747 34B0 91 34		            sta (BFENLO),Y
   748 34B2 D0 EE		            bne JMPSIOEND
   749
   750 				; command FORMAT DISK ENHANCED
   751 34B4 C9 22		NEXT4       cmp #$22
   752 34B6 D0 0C		            bne NEXT5
   753 34B8 A9 1A		            lda #$1A
   754 34BA 8D BA 35		REAA015     sta L36BB
   755 34BD A9 80		            lda #$80
   756 34BF 8D BE 35		REAA016     sta CONFSECSIZ
   757 34C2 D0 E5		            bne SIOFRMT
   758 				            
   759 				; command PUT/GET SECTOR 
   760 34C4 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   761 34C6 F0 0B		            beq PUTGETSEC
   762 34C8 C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   763 34CA F0 07		            beq PUTGETSEC
   764 34CC C9 50		            cmp #$50            ; command PUT SECTOR
   765 34CE F0 03		            beq PUTGETSEC
   766 34D0 4C B3 35		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   767 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   768 				; buffer address and calc byte count
   769 34D3 A9 00		PUTGETSEC   lda #$00
   770 34D5 85 32		            sta BUFRLO
   771
   772 34D7 AD 0A 03		            lda DAUX1
   773 				;            sec
   774 				;            sbc #$01
   775 34DA 85 33		            sta BUFRHI
   776
   777 34DC AD 0B 03		            lda DAUX2
   778 				;            sbc #$00
   779 				;
   780 34DF 06 33		            asl BUFRHI
   781 34E1 2A			            rol
   782 34E2 AA			            tax                 ; set X with memory bank number
   783 34E3 A5 33		            lda BUFRHI
   784 34E5 4A			            lsr
   785 34E6 4A			            lsr
   786 34E7 66 32		            ror BUFRLO
   787 34E9 09 80		            ora #$80
   788 34EB 85 33		            sta BUFRHI
   789 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   790 				; set buffer address in copy loops
   791 34ED A5 32		            lda BUFRLO
   792 34EF 8D 5B 35		REAA021     sta GETADRLP+1
   793 34F2 8D 8F 35		REAA022     sta PUTADRLP+1
   794 34F5 A5 33		            lda BUFRHI
   795 34F7 8D 5C 35		REAA023     sta GETADRLP+2
   796 34FA 8D 90 35		REAA024     sta PUTADRLP+2            
   797 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   798 				; check for GET
   799 34FD AD 02 03		            lda DCOMND
   800 3500 C9 52		            cmp #$52
   801 3502 F0 0A		            beq L3656           ; is GET
   802 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   803 				; PUT: put user data to buffer            
   804 3504 A0 7F		            ldy #$7F
   805 3506 B1 34		L364B       lda (BFENLO),Y
   806 3508 99 C4 35		REAA005     sta BUFFERXX1,Y
   807 350B 88			            dey
   808 350C 10 F8		            bpl L364B
   809 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   810 				; check if bank number is in range            
   811 350E E0 20		L3656       cpx #$20            ; check bank number
   812 3510 B0 BE		            bcs REAA020         ; intermediate jmp to NAK
   813 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   814 3512			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3512 AD A6 D5		            lda TCMOSL
     2 3515 48			            pha
     3 3516 AD A7 D5		            lda TCMOFR
     4 3519 48			            pha
     5 351A AD A0 D5		            lda TCPBRL
     6 351D 48			            pha
     7 351E AD A1 D5		            lda TCPBRH
     8 3521 48			            pha
     9 3522 AD A2 D5		            lda TCPBEN
    10 3525 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   815 3526 E6 42		            inc CRITIC
   816 3528 A5 14		            lda RTCLOK+2
   817 352A C5 14		WAITLOOP2   cmp RTCLOK+2
   818 352C F0 FC		            beq WAITLOOP2
   819 352E 78			            sei                 ; 40 cycles
   820 352F AD 0E D4		            lda NMIEN
   821 3532 48			            pha
   822 3533 A9 00		            lda #$00
   823 3535 8D 0E D4		            sta NMIEN
   824 3538			            M_cart_set          ; set bank, number in X
Macro: M_CART_SET [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     2 3538 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
     3 353A 8D A6 D5		            sta TCMOSL          
     4 353D A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
     5 353F 8D A7 D5		            sta TCMOFR
     6 3542 8A			            txa
     7 3543 0A			            asl   
     8 3544 8D A0 D5		            sta TCPBRL              ; get bank number from X
     9 3547 A9 00		            lda #$00                     
    10 3549 8D A1 D5		            sta TCPBRH              ; set high to $00
    11 354C A9 01		            lda #$01
    12 354E 8D A2 D5		            sta TCPBEN              ; enable        
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   825 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   826 				; check for PUT
   827 3551 A0 7F		            ldy #$7F            ; 9 cycles
   828 3553 AD 02 03		            lda DCOMND
   829 3556 C9 52		            cmp #$52
   830 3558 D0 31		            bne L369B           ; is PUT
   831 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   832 				; GET: read data to buffer
   833 355A			L367B
   834 				;            lda (BUFRLO),Y      ; 6 cycles
   835 355A B9 FF FF		GETADRLP    lda $FFFF,Y
   836 355D 99 C4 35		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
   837 3560 88			            dey                 ; 2 cycles +
   838 3561 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2176
   839 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   840 				; restore bank for write to user buffer
   841 3563 68			            pla
   842 3564 AA			            tax
   843 3565			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3565 68			            pla                 
     2 3566 8D A2 D5		            sta TCPBEN          
     3 3569 68			            pla                 
     4 356A 8D A1 D5		            sta TCPBRH          
     5 356D 68			            pla                 
     6 356E 8D A0 D5		            sta TCPBRL          
     7 3571 68			            pla                 
     8 3572 8D A7 D5		            sta TCMOFR          
     9 3575 68			            pla                 
    10 3576 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   844 3579 8E 0E D4		            stx NMIEN
   845 357C 58			            cli
   846 357D C6 42		            dec CRITIC          ; 54 cycles
   847 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
   848 				; GET: write buffer to user data            
   849 357F A0 7F		            ldy #$7F
   850 3581			L368E
   851 3581 B9 C4 35		REAA008     lda BUFFERXX1,Y
   852 3584 91 34		            sta (BFENLO),Y
   853 3586 88			            dey
   854 3587 10 F8		            bpl L368E
   855 3589 30 25		            bmi RDSIOEND
   856 				            
   857 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   858 				; PUT: buffer data to sector
   859 358B			L369B
   860 358B B9 C4 35		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
   861 				;            sta (BUFRLO),Y    ; 6 cycles +              
   862 358E 99 FF FF		PUTADRLP    sta $FFFF,Y
   863 3591 88			            dey               ; 2 cycles +              
   864 3592 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2176 
   865 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   866 				; restore register
   867 3594 68			            pla
   868 3595 AA			            tax
   869 3596			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 3596 68			            pla                 
     2 3597 8D A2 D5		            sta TCPBEN          
     3 359A 68			            pla                 
     4 359B 8D A1 D5		            sta TCPBRH          
     5 359E 68			            pla                 
     6 359F 8D A0 D5		            sta TCPBRL          
     7 35A2 68			            pla                 
     8 35A3 8D A7 D5		            sta TCMOFR          
     9 35A6 68			            pla                 
    10 35A7 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   870 35AA 8E 0E D4		            stx NMIEN
   871 35AD 58			            cli
   872 35AE C6 42		            dec CRITIC          ; 54 cycles
   873 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   874 				; enable interrupts and set rc            
   875 35B0 A0 01		RDSIOEND    ldy #$01
   876 35B2 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   877
   878 35B5 98			            tya                 ; set RC
   879 35B6 60			            rts
   880 				            
   881 				; drive configuration buffer
   882 35B7 28 01 12		CONFBUF     .byte $28,$01,$12
   883 35BA 00			L36BB       .byte $00
   884 35BB 00 00 00		            .byte $00,$00,$00
   885 35BE 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
   886 35BF FF 00 00 00		            .byte $FF,$00,$00,$00
   887
   888 35C3 01			DRVNUM      .byte $01
   889 				; $80 for 128Bytes ($100 for 256Bytes)
   890 35C4			BUFFERXX1
   891 				;            org $37E6
   892 = 3644			REAEND      = BUFFERXX1 + $80
   893 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   894 				;;; END OF REALLOC BLOCK
   895 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   896
   897
   898 				; $20 Bytes
   899 = 3644			BNKSAVBUF   = REAEND
   900
   901 				; $20 bytes
   902 				;            org $3806
   903 				;BNKSAVBUF2  = BNKSAVBUF + $20
   904
   905 				 
   906 				;           org $3826
   907 35C4			            org BNKSAVBUF + $20
   908 				; realloc whole addresses
   909 3664-3774> EE 31		REATAB      .word REAA001+1 ;$33CA
   910 3666 F8 31		            .word REAA002+1 ;$33D4
   911 3668 FF 31		            .word REAA003+1 ;$33DB
   912 366A 4B 34		            .word REAA004+1 ;$3583
   913 366C 09 35		            .word REAA005+1 ;$364E
   914 366E 5E 35		            .word REAA006+1 ;$367E
   915 3670 8C 35		            .word REAA007+1 ;$369C
   916 3672 82 35		            .word REAA008+1 ;$368F
   917 3674 64 34		            .word REAA009+1 ;$35A5
   918 3676 6B 34		            .word REAA010+1 ;$35AC
   919 3678 85 34		            .word REAA011+1 ;$35C6
   920 367A 99 34		            .word REAA012+1 ;$35D8
   921 367C A0 34		            .word REAA013+1 ;$35DF
   922 367E A3 34		            .word REAA014+1 ;$35E2
   923 3680 BB 34		            .word REAA015+1 ;$35FA
   924 3682 C0 34		            .word REAA016+1 ;$35FF
   925 3684 D1 34		            .word REAA020+1 ;$3610
   926 3686 F0 34		            .word REAA021+1
   927 3688 F3 34		            .word REAA022+1
   928 368A F8 34		            .word REAA023+1
   929 368C FB 34		            .word REAA024+1
   930 368E 00 00		            .word $0000
   931 				 
   932 				; realloc address low byte           
   933 3690 D5 31		            .word REAL001+1 ;$33B1
   934 3692 F1 31		            .word REAL002+1 ;$33CD
   935 3694 36 34		            .word REAL003+1 ;$356E
   936 3696 00 00		            .word $0000
   937 				; realloc address high byte (address to high byte and value of low byte)
   938 3698 D9 31		            .word REAH001+1  ;$33B5
   939 369A 32			            .byte <JSRDOSINI ;$6A
   940 				                        
   941 369B FB 31		            .word REAH002+1 ;$33D7
   942 369D 40			            .byte <RAMDSIO  ;$78
   943 				            
   944 369E 3B 34		            .word REAH003+1  ;$3573
   945 36A0 44			            .byte <REAEND    ;$E6
   946 				            
   947
   948 36A1 00 00		            .word $0000
   949 				            
   950 36A3 A9 00		REASTART    lda #$00
   951 36A5 8D 75 37		            sta REALOOPCNT
   952 36A8 AE 75 37		REALOOP     ldx REALOOPCNT
   953 36AB BD 67 37		            lda REATABADR,X
   954 36AE 8D 4D 37		            sta L3910+1
   955 36B1 BD 68 37		            lda REATABADR+1,X
   956 36B4 8D 4E 37		            sta L3910+2
   957 36B7 0D 4D 37		            ora L3910+1
   958 36BA D0 01		            bne L3881
   959 36BC 60			            rts
   960 				            
   961 36BD 38			L3881       sec
   962 36BE BD 6B 37		            lda READSTADR,X
   963 36C1 FD 69 37		            sbc REASRCADR,X
   964 36C4 8D 76 37		            sta READIFLO
   965 36C7 BD 6C 37		            lda READSTADR+1,X
   966 36CA FD 6A 37		            sbc REASRCADR+1,X
   967 36CD 8D 77 37		            sta READIFHI
   968 				            
   969 36D0 20 58 37		L3894       jsr L391C
   970 36D3 F0 13		            beq L38AC
   971 36D5 B1 D7		            lda ($D7),Y
   972 36D7 18			            clc
   973 36D8 6D 76 37		            adc READIFLO
   974 36DB 91 D7		            sta ($D7),Y
   975 36DD C8			            iny
   976 36DE B1 D7		            lda ($D7),Y
   977 36E0 6D 77 37		            adc READIFHI
   978 36E3 91 D7		            sta ($D7),Y
   979 36E5 4C D0 36		            jmp L3894
   980 36E8 20 58 37		L38AC       jsr L391C
   981 36EB F0 0B		            beq L38BC
   982 36ED B1 D7		            lda ($D7),Y
   983 36EF 18			            clc
   984 36F0 6D 76 37		            adc READIFLO
   985 36F3 91 D7		            sta ($D7),Y
   986 36F5 4C E8 36		            jmp L38AC
   987 36F8 20 58 37		L38BC       jsr L391C
   988 36FB F0 11		            beq L38D2
   989 36FD 20 4C 37		            jsr L3910
   990 3700 18			            clc
   991 3701 6D 76 37		            adc READIFLO
   992 3704 B1 D7		            lda ($D7),Y
   993 3706 6D 77 37		            adc READIFHI
   994 3709 91 D7		            sta ($D7),Y
   995 370B 4C F8 36		            jmp L38BC
   996 370E AE 75 37		L38D2       ldx REALOOPCNT
   997
   998 3711 BD 6D 37		            lda CPYFROMADR,X
   999 3714 8D 2F 37		            sta L38F2+1
  1000 3717 BD 6E 37		            lda CPYFROMADR+1,X
  1001 371A 8D 30 37		            sta L38F2+2
  1002
  1003 371D BD 71 37		            lda CPYTOADR,X
  1004 3720 8D 32 37		            sta L38F2+4
  1005 3723 BD 72 37		            lda CPYTOADR+1,X
  1006 3726 8D 33 37		            sta L38F2+5
  1007
  1008 3729 BC 70 37		            ldy CPYLENGTH+1,X
  1009 372C A2 00		            ldx #$00
  1010 372E BD FF FF		L38F2       lda $FFFF,X
  1011 3731 9D FF FF		            sta $FFFF,X
  1012 3734 E8			            inx
  1013 3735 D0 F7		            bne L38F2
  1014 3737 EE 30 37		            inc L38F2+2
  1015 373A EE 33 37		            inc L38F2+5
  1016 373D 88			            dey
  1017 373E 10 EE		            bpl L38F2
  1018 3740 AD 75 37		            lda REALOOPCNT
  1019 3743 18			            clc
  1020 3744 69 0C		            adc #$0C
  1021 3746 8D 75 37		            sta REALOOPCNT
  1022 3749 4C A8 36		            jmp REALOOP
  1023 				            
  1024 374C AD FF FF		L3910       lda $FFFF
  1025 374F EE 4D 37		            inc L3910+1
  1026 3752 D0 03		            bne L391B
  1027 3754 EE 4E 37		            inc L3910+2
  1028 3757 60			L391B       rts
  1029
  1030 3758 20 4C 37		L391C       jsr L3910
  1031 375B 85 D7		            sta $D7
  1032 375D 20 4C 37		            jsr L3910
  1033 3760 A0 00		            ldy #$00
  1034 3762 85 D8		            sta $D8
  1035 3764 05 D7		            ora $D7
  1036 3766 60			            rts
  1037
  1038 				; realloc code pointer
  1039 3767 64 36		REATABADR   .word REATAB
  1040 3769 32 34		REASRCADR   .word REABEGIN
  1041 376B FF FF		READSTADR   .word $FFFF
  1042 				; copy code pointer
  1043 376D 32 34		CPYFROMADR  .word REABEGIN
  1044 376F 12 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1045 3771 FF FF		CPYTOADR    .word $FFFF
  1046 3773 00 00		            .word $0000
  1047 				            
  1048 				; $01 byte
  1049 3775			REALOOPCNT  ;= $392B
  1050 = 3776			READIFLO   = REALOOPCNT+1
  1051 = 3777			READIFHI   = READIFLO+1
  1052
  1053
  1054 				         
