mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     5 				;
     6 				; System equates
     7 				;
     8 				; OS EQUATES
     9 				; ----------
    10 				; 
    11 				; IO EQUATES
    12 				; 
    13 = 0002			ICCOM       = $0002
    14 = 0008			ICBLL       = $0008
    15 = 0009			ICBLH       = $0009
    16 				; 
    17 				; OS VARIABLES FOR XL/XE
    18 				; 
    19 				; PAGE 0
    20 				; 
    21 = 000A			DOSVEC      = $000A
    22 = 000C			DOSINI      = $000C
    23 = 0012			RTCLOK      = $0012
    24 = 0032			BUFRLO      = $0032
    25 = 0033			BUFRHI      = $0033
    26 = 0034			BFENLO      = $0034
    27 = 0035			BFENHI      = $0035
    28 = 0042			CRITIC      = $0042
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0304			DBUFLO      = $0304
    41 = 0305			DBUFHI      = $0305
    42 = 0308			DBYTLO      = $0308
    43 = 0309			DBYTHI      = $0309
    44 = 030A			DAUX1       = $030A
    45 = 030B			DAUX2       = $030B
    46 = 0340			IOCB0       = $0340
    47 				; 
    48 				; PIA
    49 				; 
    50 = D300			PORTA       = $D300
    51 = D301			PORTB       = $D301
    52 = D302			PACTL       = $D302
    53 = D303			PBCTL       = $D303
    54 				; 
    55 				; ANTIC
    56 				;
    57 = D400			DMACTL      = $D400 
    58 = D40A			WSYNC       = $D40A
    59 = D40E			NMIEN       = $D40E
    60 				; 
    61 				; ROM VECTORS
    62 				; 
    63 = E456			CIOV        = $E456
    64 				;
    65 				; SpartaDOS 
    66 				;
    67 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    68 = 003F			SD_LBUF        = $3F ; offset to line buffer
    69 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    70 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    71 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    72
    73 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74 				; 
    75 				; The!Cart programming information
    76 				; (c) 2013 Matthias Reichl
    77 				;
    78 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    79 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    80 				; 25AA020A). The memory is addressed using 16384 8k banks
    81 				; (64 8k banks when using RAM instead of flash).
    82 				; 
    83 				; The cartridge configuration registers are located at
    84 				; $D5A0-$D5A8. All registers are read/write unless noted
    85 				; otherwise. Unused bits shall be written as '0' and
    86 				; always read back as '0'.
    87 				; 
    88 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    89 				; flash bank 0, writes to flash are disabled.
    90 				; 
    91 				; Depending on the selected cartridge mode additional
    92 				; registers are enabled at $D5xx.
    93 				; 
    94 				; The primary bank register also serves as a base bank
    95 				; register for the various sub-modes.
    96 				; 
    97 				; The secondary bank register is only used in "flexi mode".
    98 				;
    99
   100 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101 				; 
   102 				; The!Cart Register (from-to,default)
   103 				;
   104
   105 				; Mode Select
   106 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   107 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   108 				; other than the ones listed here are reserved (and result
   109 				; in "cartridge off"):
   110 				; $00: off, cartridge disabled
   111 				; $01: 8k banks at $A000
   112 				; $02: AtariMax 1MBit / 128k
   113 				; $03: Atarimax 8MBit / 1MB
   114 				; $04: OSS M091
   115 				; $08: SDX 64k cart, $D5Ex banking
   116 				; $09: Diamond GOS 64k cart, $D5Dx banking
   117 				; $0A: Express 64k cart, $D57x banking
   118 				; $0C: Atrax 128k cart
   119 				; $0D: Williams 64k cart
   120 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   121 				; $21: standard 16k cart at $8000-$BFFF
   122 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   123 				; $23: Blizzard 16k
   124 				; $24: Sic!Cart 512k
   125 				; $28: 16k Mega cart
   126 				; $29: 32k Mega cart
   127 				; $2A: 64k Mega cart
   128 				; $2B: 128k Mega cart
   129 				; $2C: 256k Mega cart
   130 				; $2D: 512k Mega cart
   131 				; $2E: 1024k Mega cart
   132 				; $2F: 2048k Mega cart
   133 				; $30: 32k XEGS cart
   134 				; $31: 64k XEGS cart
   135 				; $32: 128k XEGS cart
   136 				; $33: 256k XEGS cart
   137 				; $34: 512k XEGS cart
   138 				; $35: 1024k XEGS cart
   139 				; $38: 32k SWXEGS cart
   140 				; $39: 64k SWXEGS cart
   141 				; $3A: 128k SWXEGS cart
   142 				; $3B: 256k SWXEGS cart
   143 				; $3C: 512k SWXEGS cart
   144 				; $3D: 1024k SWXEGS cart
   145 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   146 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   147 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   148 				                         ; separate 8k banks at $A000 and $8000
   149 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   150
   151 				; how to figure out that The!Cart is not active?
   152 				; If the address is not used then the XL returns $ff but
   153 				; the XE (and old 800) return $d5 (high byte of address,
   154 				; the value of the last bus cycle)
   155 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   156 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   157
   158 				; Mode Flash/RAM Select
   159 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   160 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   161 				; bit 1: primary bank source (0=flash, 1=RAM)
   162 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   163 				; bit 3: secondary bank source (0=flash, 1=RAM)
   164 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   165 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   166
   167 				; Primary Bank
   168 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   169 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   170 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   171
   172 				; Secondary Bank 
   173 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   174 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   175 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   176
   177 				; SPI interface to EEPROM
   178 = D5A8			TCINEP = $d5a8
   179 				; bit 0: SPI CLK
   180 				; bit 1: SPI CS
   181 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   182
   183 				; configuration lock
   184 = D5AF			TCCOLO = $d5af
   185 				; Writing to this register disables "The!Cart" registers
   186 				; at $d5aX.
   187
   188
   189 				; macros
   190
   191 				; saves register: pushes bank register on stack
   192 				M_cart_push .macro
   193 				            lda TCMOSL
   194 				            pha
   195 				            lda TCMOFR
   196 				            pha
   197 				            lda TCPBRL
   198 				            pha
   199 				            lda TCPBRH
   200 				            pha
   201 				            lda TCPBEN
   202 				            pha
   203 				            .endm
   204
   205 				; restores register from stack: pops from stack
   206 				M_cart_pop  .macro
   207 				            pla                 
   208 				            sta TCPBEN          
   209 				            pla                 
   210 				            sta TCPBRH          
   211 				            pla                 
   212 				            sta TCPBRL          
   213 				            pla                 
   214 				            sta TCMOFR          
   215 				            pla                 
   216 				            sta TCMOSL          
   217 				            .endm
   218 				 
   219 				; set bank: number of bank in X, uses A
   220 				M_cart_set  .macro
   221 				; set new The!Cart mode
   222 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   223 				            sta TCMOSL          
   224 				            lda #TCMOFR.PBRAM       ; set to RAM
   225 				            sta TCMOFR
   226 				            txa
   227 				            asl   
   228 				            sta TCPBRL              ; get bank number from X
   229 				            lda #$00                     
   230 				            sta TCPBRH              ; set high to $00
   231 				            lda #$01
   232 				            sta TCPBEN              ; enable        
   233 				            .endm
   234 				;
   235 				; Start of code
   236 				;
   237 				            org $3000
   238 				            
   239 				; info message
   240 FFFF> 3000-3589> 20 BD +             jsr PRINT
   241 3003 54 48 45 21 52 41 +             .byte 'THE!RAMDISK ver51 for THE!CART by HJX',$9B,$FF
   242
   243 				; check for The!Cart
   244 302A AD A6 D5		             lda TCMOSL
   245 302D C9 FF		             cmp #TCMOSL.XLLOCK
   246 302F F0 04		             beq NORAMDISK
   247 3031 C9 D5		             cmp #TCMOSL.XELOCK
   248 3033 D0 50		             bne RAMDISKINI
   249 3035			NORAMDISK
   250 				; no banks            
   251 3035 20 BD 33		            jsr PRINT
   252 3038 20 20 45 72 72 6F +             .byte '  Error - 512k RAM THE!CART not found',$9B
   253 305E 20 20 55 73 65 20 +             .byte '  Use SHIFT+RETURN/ESC in start menu',$9B,$FF
   254 3084 60			            rts
   255 				                        
   256 3085			RAMDISKINI
   257 				; check for parameter
   258 3085 A0 0A		            ldy #SD_BUFOFF
   259 3087 B1 0A		            lda (DOSVEC),Y
   260 3089 18			            clc
   261 308A 69 3F		            adc #SD_LBUF
   262 308C A8			            tay
   263 308D B1 0A		            lda (DOSVEC),Y
   264 308F C9 9B		            cmp #$9B
   265 3091 D0 07		            bne PRSPARM
   266 				; no parameter -> error
   267 3093 4C EE 30		            jmp PARAMERR
   268
   269 				; jump for jsr to crunch name
   270 3096 4C FF FF		CRNAME      jmp $FFFF
   271
   272 3099 FF			CHKFRMT     .byte $FF
   273
   274 				; set crunch name address
   275 309A A5 0A		PRSPARM     lda DOSVEC
   276 309C 18			            clc
   277 309D 69 03		            adc #SD_ZCRNAME
   278 309F 8D 97 30		            sta CRNAME+1
   279 30A2 A5 0B		            lda DOSVEC+1
   280 30A4 69 00		            adc #$00
   281 30A6 8D 98 30		            sta CRNAME+2
   282 				            
   283 				; parameter parsing            
   284 				; get drive number SD_COMFNAM starts alway with Dx:
   285 30A9 20 96 30		            jsr CRNAME
   286 30AC D0 40		            bne PARAMERR
   287 30AE A0 22		            ldy #SD_COMFNAM+1
   288 30B0 B1 0A		            lda (DOSVEC),Y
   289 30B2 29 0F		            and #$0F
   290 30B4 8D 89 35		            sta DRVNUM
   291 				; check options /N
   292 30B7 20 96 30		            jsr CRNAME
   293 30BA F0 2F		            beq PRSPAREND
   294 30BC A0 24		            ldy #SD_COMFNAM+3
   295 30BE B1 0A		            lda (DOSVEC),Y
   296 30C0 C9 2F		            cmp #'/'
   297 30C2 D0 2A		            bne PARAMERR
   298 30C4 C8			PRSPARLOOP  iny
   299 30C5 B1 0A		            lda (DOSVEC),Y
   300
   301 30C7 C9 9B		            cmp #$9B         ; end of parameter
   302 30C9 F0 20		            beq PRSPAREND
   303 				            
   304 30CB C9 41		            cmp #'A'         ; try to preserve
   305 30CD D0 0B		            bne PRSPARNXT1
   306 30CF 20 0E 33		            jsr checkfrmt
   307 30D2 90 F0		            bcc PRSPARLOOP
   308 30D4 EE 99 30		            inc CHKFRMT
   309 30D7 4C C4 30		            jmp PRSPARLOOP
   310
   311 30DA C9 46		PRSPARNXT1  cmp #'F'         ; just format
   312 30DC D0 03		            bne PRSPARNXT2
   313 30DE 4C 07 32		            jmp FRMTRD
   314
   315 30E1 C9 4E		PRSPARNXT2  cmp #'N'         ; format ?
   316 30E3 D0 09		            bne PARAMERR
   317 				; check format at startup to preserve existing RAM disk            
   318 30E5 EE 99 30		            inc CHKFRMT
   319
   320 30E8 4C C4 30		            jmp PRSPARLOOP
   321
   322 30EB 4C A0 31		PRSPAREND   jmp STARTINST
   323
   324 30EE 20 BD 33		PARAMERR    jsr PRINT
   325 30F1 20 20 45 72 72 6F +             .byte '  Error - Wrong parameter',$9B
   326 310B 20 20 55 73 65 20 +             .byte '  Use RAMCART Dn: [/N|A|F]',$9B
   327 3126 20 20 20 20 4E 20 +             .byte '    N - driver no format',$9B
   328 313F 20 20 20 20 41 20 +             .byte '    A - driver auto format if needed',$9B
   329 3164 20 20 20 20 46 20 +             .byte '    F - format no driver',$9B
   330 317D 20 20 20 20 77 2F +             .byte '    w/o option driver and format',$9B,$FF
   331 319F 60			            rts
   332
   333 31A0 20 BD 33		STARTINST   jsr PRINT
   334 31A3 20 20 49 6E 73 74 +             .byte '  Install driver',$9B,$FF
   335 				; set jsr to original DOSINI
   336 31B5 A5 0C		            lda DOSINI
   337 31B7 8D F4 33		            sta JSRDOSINI+1
   338 31BA A5 0D		            lda DOSINI+1
   339 31BC 8D F5 33		            sta JSRDOSINI+2
   340
   341 				; set MEMLO oldaddress, realloc
   342 31BF AD E7 02		            lda MEMLO
   343 31C2 8D 31 37		            sta READSTADR
   344 31C5 8D 37 37		            sta CPYTOADR
   345 31C8 AD E8 02		            lda MEMLO+1
   346 31CB 8D 32 37		            sta READSTADR+1
   347 31CE 8D 38 37		            sta CPYTOADR+1
   348 				;
   349 				; start realloc
   350 				;
   351 31D1 20 69 36		            jsr REASTART
   352
   353 				; set new DOSINI            
   354 31D4 A9 F3		REAL001     lda #<JSRDOSINI
   355 31D6 85 0C		            sta DOSINI
   356 31D8 A9 33		REAH001     lda #>JSRDOSINI
   357 31DA 85 0D		            sta DOSINI+1
   358 				; get SIO and patch for RAMDISK
   359 31DC 38			            sec
   360 31DD A5 0A		            lda DOSVEC
   361 31DF E9 0A		            sbc #SD_LSIO
   362 31E1 85 32		            sta BUFRLO
   363 31E3 A5 0B		            lda DOSVEC+1
   364 31E5 E9 00		            sbc #$00
   365 31E7 85 33		            sta BUFRHI
   366 31E9 A0 00		            ldy #$00
   367 31EB B1 32		            lda (BUFRLO),Y
   368 31ED 8D 11 34		REAA001     sta JMPSIO+1      ;realloc $33CA
   369 31F0 A9 01		REAL002     lda #<RAMDSIO
   370 31F2 91 32		            sta (BUFRLO),Y
   371 31F4 C8			            iny
   372 31F5 B1 32		            lda (BUFRLO),Y
   373 31F7 8D 12 34		REAA002     sta JMPSIO+2      ;realloc $33D4
   374 31FA A9 34		REAH002     lda #>RAMDSIO
   375 31FC 91 32		            sta (BUFRLO),Y
   376 				; set MEMLO            
   377 31FE 20 F6 33		REAA003     jsr SETMEMLO      ;realloc $33DB
   378 				; format if requested            
   379 3201 2C 99 30		            bit CHKFRMT
   380 3204 30 01		            bmi FRMTRD
   381 3206 60			            rts
   382
   383 				; format ramdisk
   384 3207 20 BD 33		FRMTRD      jsr PRINT
   385 320A 20 20 46 6F 72 6D +             .byte '  Formatted 512k',$9B,$FF
   386
   387 321C 20 45 33		            jsr cart_save
   388
   389 				; clear sector 1
   390 321F A2 00		            ldx #$00
   391 3221 20 8C 33		            jsr cart_set
   392 3224 A9 00		            lda #$00
   393 3226 A0 7F		            ldy #$7f
   394 3228 99 00 80		FRMTCLP1    sta $8000,Y
   395 322B 88			            dey
   396 322C 10 FA		            bpl FRMTCLP1
   397 322E 20 64 33		            jsr cart_restore
   398
   399 				; set sector 2-5 to $ff VTOV 512k = 4096 sectors
   400 				; = 4 VTOC sectors
   401 3231 A2 00		_loop25     ldx #$00
   402 3233 20 8C 33		            jsr cart_set
   403 3236 A9 FF		            lda #$ff
   404 3238 A0 7F		            ldy #$7f
   405 323A 99 80 80		FRMTCLP25   sta $8080,Y
   406 323D 88			            dey
   407 323E 10 FA		            bpl FRMTCLP25
   408 3240 20 64 33		            jsr cart_restore
   409 3243 AD 3B 32		            lda FRMTCLP25+1
   410 3246 18			            clc
   411 3247 69 80		            adc #$80
   412 3249 8D 3B 32		            sta FRMTCLP25+1
   413 324C AD 3C 32		            lda FRMTCLP25+2
   414 324F 69 00		            adc #$00
   415 3251 8D 3C 32		            sta FRMTCLP25+2
   416 3254 A9 04		_loopcnt25  lda #$04
   417 3256 CE 55 32		            dec _loopcnt25+1
   418 3259 D0 D6		            bne _loop25
   419
   420 				; clear sector 6-8 
   421 325B A2 00		_loop68     ldx #$00
   422 325D 20 8C 33		            jsr cart_set
   423 3260 A9 00		            lda #$00
   424 3262 A0 7F		            ldy #$7f
   425 3264 99 80 82		FRMTCLP68   sta $8280,Y
   426 3267 88			            dey
   427 3268 10 FA		            bpl FRMTCLP68
   428 326A 20 64 33		            jsr cart_restore
   429 326D AD 65 32		            lda FRMTCLP68+1
   430 3270 18			            clc
   431 3271 69 80		            adc #$80
   432 3273 8D 65 32		            sta FRMTCLP68+1
   433 3276 AD 66 32		            lda FRMTCLP68+2
   434 3279 69 00		            adc #$00
   435 327B 8D 66 32		            sta FRMTCLP68+2
   436 327E A9 03		_loopcnt68  lda #$03
   437 3280 CE 7F 32		            dec _loopcnt68+1
   438 3283 D0 D6		            bne _loop68
   439
   440 				; header loop            
   441 3285 A2 00		            ldx #$00
   442 3287 20 8C 33		            jsr cart_set
   443 328A A0 2A		            ldy #$2A
   444 328C B9 D2 32		FRMTHLP     lda RDHEAD,Y
   445 328F 99 00 80		            sta $8000,Y
   446 3292 88			            dey
   447 3293 10 F7		            bpl FRMTHLP
   448 3295 20 64 33		            jsr cart_restore
   449
   450 				 ; set map sector
   451 3298 A2 00		            ldx #$00
   452 329A 20 8C 33		            jsr cart_set
   453 329D A9 04		            lda #$04 
   454 329F 8D 0F 80		            sta $800F     ; number of bit map sectors used on the disk
   455 32A2 18			            clc
   456 32A3 69 02		            adc #$02
   457 32A5 8D 09 80		            sta $8009     ; first sector map of the MAIN directory
   458 32A8 A9 00		            lda #$00 
   459 32AA 8D 80 80		            sta $8080
   460 32AD A9 80		            lda #$80      ; low address of MAIN sector map
   461 32AF 85 32		            sta BUFRLO
   462 32B1 A9 82		            lda #$82      ; high address of MAIN sector map
   463 32B3 85 33		            sta BUFRHI   
   464 32B5 18			            clc
   465 32B6 A0 04		            ldy #$04
   466 32B8 AD 09 80		            lda $8009
   467 32BB 69 01		            adc #$01
   468 32BD 91 32		            sta (BUFRLO),Y
   469 				; set MAIN sector map            
   470 32BF A2 00		            ldx #$00
   471 32C1 A0 80		            ldy #$80
   472 32C3 BD FD 32		L349B       lda RDMAIN,X
   473 32C6 91 32		            sta (BUFRLO),Y
   474 32C8 E8			            inx
   475 32C9 C8			            iny
   476 32CA E0 11		            cpx #$11
   477 32CC D0 F5		            bne L349B
   478 32CE 20 64 33		            jsr cart_restore
   479
   480 				; finished
   481 32D1 60			            rts
   482 				            
   483 32D2 00 03 00 07 E0 07 + RDHEAD      .byte $00,$03,$00,$07,$E0,$07,$4C,$80
   484 32DA 30 03 00		            .byte $30,$03,$00 ;original $00,$04,$FB,$03
   485 32DD 00 10 F8 0F		            .word $1000,$0ff8 ; 512k
   486 32E1 01 02 00 20 00 00 +             .byte $01, $02,$00,$20,$00,$00,$00
   487 32E8 43 41 52 54 35 31 +             .byte 'CART512K'
   488 32F0 00 80 22 00 00 00 +             .byte $00,$80,$22,$00,$00,$00,$00,$00
   489 32F8 00 16 00 00 00	            .byte $00,$16,$00,$00,$00
   490
   491 32FD 08 00 00 17 00 00	RDMAIN      .byte $08,$00,$00,$17,$00,$00
   492 3303 4D 41 49 4E 20 20 +             .byte 'MAIN       '
   493
   494 				; check preformat
   495 330E			checkfrmt
   496 330E 20 45 33		            jsr cart_save
   497 3311 A2 00		            ldx #$00
   498 3313 20 8C 33		            jsr cart_set
   499
   500 3316 A2 16		            ldx #$16            ; check volume name
   501 3318 BD D2 32		_nxtcharv   lda RDHEAD,x
   502 331B DD 00 80		            cmp $8000,x
   503 331E D0 19		            bne _nofrmt
   504 3320 E8			            inx
   505 3321 E0 1E		            cpx #$1E
   506 3323 D0 F3		            bne _nxtcharv
   507 				            
   508 3325 A2 06		            ldx #$06            ; check main dir name
   509 3327 BD FD 32		_nxtcharm   lda RDMAIN,x
   510 332A DD 00 83		            cmp $8300,x
   511 332D D0 0A		            bne _nofrmt
   512 332F E8			            inx
   513 3330 E0 11		            cpx #$11
   514 3332 D0 F3		            bne _nxtcharm    
   515 				            
   516 3334 20 64 33		            jsr cart_restore
   517 3337 38			            sec
   518 3338 60			            rts
   519 				            
   520 3339 20 64 33		_nofrmt     jsr cart_restore
   521 333C 18			            clc
   522 333D 60			            rts
   523
   524 				; wait for sync            
   525 333E A5 14		WAITSYNC    lda RTCLOK+2
   526 3340 C5 14		WAITLOOP    cmp RTCLOK+2
   527 3342 F0 FC		            beq WAITLOOP
   528 3344 60			            rts
   529
   530 3345			cart_save
   531 3345 AD A6 D5		            lda TCMOSL
   532 3348 8D B7 33		            sta _tcmosl
   533 334B AD A7 D5		            lda TCMOFR
   534 334E 8D B8 33		            sta _tcmofr
   535 3351 AD A0 D5		            lda TCPBRL
   536 3354 8D B9 33		            sta _tcpbrl
   537 3357 AD A1 D5		            lda TCPBRH
   538 335A 8D BA 33		            sta _tcpbrh
   539 335D AD A2 D5		            lda TCPBEN
   540 3360 8D BB 33		            sta _tcpben
   541
   542 3363 60			            rts
   543
   544 3364			cart_restore
   545 3364 AD B7 33		            lda _tcmosl
   546 3367 8D A6 D5		            sta TCMOSL
   547 336A AD B8 33		            lda _tcmofr
   548 336D 8D A7 D5		            sta TCMOFR
   549 3370 AD B9 33		            lda _tcpbrl
   550 3373 8D A0 D5		            sta TCPBRL
   551 3376 AD BA 33		            lda _tcpbrh
   552 3379 8D A1 D5		            sta TCPBRH
   553 337C AD BB 33		            lda _tcpben
   554 337F 8D A2 D5		            sta TCPBEN
   555
   556 3382 AD BC 33		            lda _nmien          ; enable interrupts
   557 3385 8D 0E D4		            sta NMIEN
   558 3388 58			            cli
   559 3389 C6 42		            dec CRITIC 
   560
   561 338B 60			            rts
   562
   563 338C			cart_set
   564 338C E6 42		            inc CRITIC 
   565 338E 20 3E 33		            jsr WAITSYNC        ; wait for vblank
   566 3391 78			            sei
   567 3392 AD 0E D4		            lda NMIEN
   568 3395 8D BC 33		            sta _nmien
   569 3398 A9 00		            lda #$00
   570 339A 8D 0E D4		            sta NMIEN
   571
   572 339D A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   573 339F 8D A6 D5		            sta TCMOSL          
   574 33A2 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
   575 33A4 8D A7 D5		            sta TCMOFR
   576 33A7 8A			            txa
   577 33A8 0A			            asl   
   578 33A9 8D A0 D5		            sta TCPBRL              ; get bank number from X
   579 33AC A9 00		            lda #$00                     
   580 33AE 8D A1 D5		            sta TCPBRH              ; set high to $00
   581 33B1 A9 01		            lda #$01
   582 33B3 8D A2 D5		            sta TCPBEN              ; enable        
   583
   584 33B6 60			            rts            
   585
   586 33B7 00			_tcmosl     .byte $00
   587 33B8 00			_tcmofr     .byte $00
   588 33B9 00			_tcpbrl     .byte $00
   589 33BA 00			_tcpbrh     .byte $00
   590 33BB 00			_tcpben     .byte $00
   591
   592 33BC 00			_nmien      .byte $00
   593 				            
   594 				; print subroutine            
   595 33BD 68			PRINT       pla
   596 33BE 8D CE 33		            sta PRINTITER+1
   597 33C1 68			            pla
   598 33C2 8D CF 33		            sta PRINTITER+2
   599 33C5 EE CE 33		PRINTLOOP   inc PRINTITER+1
   600 33C8 D0 03		            bne PRINTITER
   601 33CA EE CF 33		            inc PRINTITER+2
   602 33CD AD FF FF		PRINTITER   lda $FFFF
   603 33D0 C9 FF		            cmp #$FF
   604 33D2 F0 06		            beq PRINTEND
   605 33D4 20 E3 33		            jsr CIOPUTCHR
   606 33D7 4C C5 33		            jmp PRINTLOOP
   607 33DA AD CF 33		PRINTEND    lda PRINTITER+2
   608 33DD 48			            pha
   609 33DE AD CE 33		            lda PRINTITER+1
   610 33E1 48			            pha
   611 33E2 60			            rts
   612 				; call cio put char subroutine
   613 33E3 A2 00		CIOPUTCHR   ldx #$00
   614 33E5 8E 48 03		            stx IOCB0+ICBLL
   615 33E8 8E 49 03		            stx IOCB0+ICBLH
   616 33EB A0 0B		            ldy #$0B
   617 33ED 8C 42 03		            sty IOCB0+ICCOM
   618 33F0 4C 56 E4		            jmp CIOV
   619
   620
   621
   622 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   623 				;;; BEGIN OF REALLOC BLOCK
   624 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   625
   626 				; to realloc routines
   627 				; DOSINI set MEMLO at reset
   628 33F3			REABEGIN
   629
   630 33F3 20 00 00		JSRDOSINI   jsr $0000
   631 33F6			SETMEMLO    
   632 33F6 A9 0A		REAL003     lda #<REAEND
   633 33F8 8D E7 02		            sta MEMLO
   634 33FB A9 36		REAH003     lda #>REAEND
   635 33FD 8D E8 02		            sta MEMLO+1
   636 3400 60			            rts
   637
   638 				; new DOSVEC for RAMDISK device
   639 3401 AD 00 03		RAMDSIO     lda DDEVIC
   640 3404 C9 31		            cmp #$31
   641 3406 D0 08		            bne JMPSIO
   642 3408 AD 01 03		            lda DUNIT
   643 340B CD 89 35		REAA004     cmp DRVNUM
   644 340E F0 03		            beq NEWSIOGO
   645 3410 4C 00 00		JMPSIO      jmp $0000
   646
   647 				; set buffer address
   648 3413 AD 04 03		NEWSIOGO    lda DBUFLO
   649 3416 85 34		            sta BFENLO
   650 3418 AD 05 03		            lda DBUFHI
   651 341B 85 35		            sta BFENHI
   652 				; load commad byte            
   653 341D AD 02 03		            lda DCOMND
   654 				; command STATUS REQUEST
   655 3420 C9 53		            cmp #$53 
   656 3422 D0 1B		            bne NEXT1
   657 3424 AD 84 35		REAA009     lda CONFSECSIZ
   658 3427 4A			            lsr
   659 3428 4A			            lsr
   660 3429 49 30		            eor #$30
   661 342B AC 80 35		REAA010     ldy L36BB
   662 342E C0 1A		            cpy #$1A
   663 3430 D0 02		            bne L35B4
   664 3432 09 80		            ora #$80
   665 3434 A0 00		L35B4       ldy #$00
   666 3436 91 34		            sta (BFENLO),Y
   667 3438 C8			            iny
   668 3439 A9 FF		            lda #$FF
   669 343B 91 34		            sta (BFENLO),Y
   670 343D 30 24		            bmi JMPSIOEND
   671 				            
   672 				; command RETURN CONFIGURATION            
   673 343F C9 4E		NEXT1       cmp #$4E
   674 3441 D0 0C		            bne NEXT2
   675 3443 A0 0B		            ldy #$0B            ; 12 bytes
   676 3445			RETCNFLOOP
   677 3445 B9 7D 35		REAA011     lda CONFBUF,Y
   678 3448 91 34		            sta (BFENLO),Y
   679 344A 88			            dey
   680 344B 10 F8		            bpl RETCNFLOOP
   681 344D 30 14		            bmi JMPSIOEND
   682
   683 				; command SET CONFIGURATION
   684 344F C9 4F		NEXT2       cmp #$4F
   685 3451 D0 13		            bne NEXT3
   686 3453 A0 07		            ldy #$07
   687 3455 B1 34		            lda (BFENLO),Y
   688 3457 F0 38		            beq REAA020         ; error if sec size <> $80 ( $00 -> $100)            
   689 3459 8D 84 35		REAA012     sta CONFSECSIZ
   690 345C A0 03		            ldy #$03
   691 345E B1 34		            lda (BFENLO),Y
   692 3460 8D 80 35		REAA013     sta L36BB
   693
   694 3463			JMPSIOEND
   695 3463 4C 76 35		REAA014     jmp RDSIOEND
   696
   697 				; command FORMAT DISK
   698 3466 C9 21		NEXT3       cmp #$21
   699 3468 D0 0B		            bne NEXT4
   700 346A A0 00		SIOFRMT     ldy #$00
   701 346C A9 FF		            lda #$FF
   702 346E 91 34		            sta (BFENLO),Y
   703 3470 C8			            iny
   704 3471 91 34		            sta (BFENLO),Y
   705 3473 D0 EE		            bne JMPSIOEND
   706
   707 				; command FORMAT DISK ENHANCED
   708 3475 C9 22		NEXT4       cmp #$22
   709 3477 D0 0C		            bne NEXT5
   710 3479 A9 1A		            lda #$1A
   711 347B 8D 80 35		REAA015     sta L36BB
   712 347E A9 80		            lda #$80
   713 3480 8D 84 35		REAA016     sta CONFSECSIZ
   714 3483 D0 E5		            bne SIOFRMT
   715 				            
   716 				; command PUT/GET SECTOR 
   717 3485 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   718 3487 F0 0B		            beq PUTGETSEC
   719 3489 C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   720 348B F0 07		            beq PUTGETSEC
   721 348D C9 50		            cmp #$50            ; command PUT SECTOR
   722 348F F0 03		            beq PUTGETSEC
   723 3491 4C 79 35		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   724 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   725 				; buffer address and calc byte count
   726 3494 A9 00		PUTGETSEC   lda #$00
   727 3496 85 32		            sta BUFRLO
   728 3498 AD 0A 03		            lda DAUX1
   729 349B 38			            sec
   730 349C E9 01		            sbc #$01
   731 349E 85 33		            sta BUFRHI
   732 34A0 AD 0B 03		            lda DAUX2
   733 34A3 E9 00		            sbc #$00
   734 34A5 06 33		            asl BUFRHI
   735 34A7 2A			            rol
   736 34A8 AA			            tax                 ; set X with memory bank number
   737 34A9 A5 33		            lda BUFRHI
   738 34AB 4A			            lsr
   739 34AC 4A			            lsr
   740 34AD 66 32		            ror BUFRLO
   741 34AF 09 80		            ora #$80
   742 34B1 85 33		            sta BUFRHI
   743 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   744 				; set buffer address in copy loops
   745 34B3 A5 32		            lda BUFRLO
   746 34B5 8D 21 35		REAA021     sta GETADRLP+1
   747 34B8 8D 55 35		REAA022     sta PUTADRLP+1
   748 34BB A5 33		            lda BUFRHI
   749 34BD 8D 22 35		REAA023     sta GETADRLP+2
   750 34C0 8D 56 35		REAA024     sta PUTADRLP+2            
   751 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   752 				; check for GET
   753 34C3 AD 02 03		            lda DCOMND
   754 34C6 C9 52		            cmp #$52
   755 34C8 F0 0A		            beq L3656           ; is GET
   756 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   757 				; PUT: put user data to buffer            
   758 34CA A0 7F		            ldy #$7F
   759 34CC B1 34		L364B       lda (BFENLO),Y
   760 34CE 99 8A 35		REAA005     sta BUFFERXX1,Y
   761 34D1 88			            dey
   762 34D2 10 F8		            bpl L364B
   763 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   764 				; check if bank number is in range            
   765 34D4 E0 20		L3656       cpx #$20            ; check bank number
   766 34D6 B0 B9		            bcs REAA020         ; intermediate jmp to NAK
   767 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   768 34D8			            M_cart_push         ; save register
Macro: M_CART_PUSH [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 34D8 AD A6 D5		            lda TCMOSL
     2 34DB 48			            pha
     3 34DC AD A7 D5		            lda TCMOFR
     4 34DF 48			            pha
     5 34E0 AD A0 D5		            lda TCPBRL
     6 34E3 48			            pha
     7 34E4 AD A1 D5		            lda TCPBRH
     8 34E7 48			            pha
     9 34E8 AD A2 D5		            lda TCPBEN
    10 34EB 48			            pha
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   769 34EC E6 42		            inc CRITIC
   770 34EE A5 14		            lda RTCLOK+2
   771 34F0 C5 14		WAITLOOP2   cmp RTCLOK+2
   772 34F2 F0 FC		            beq WAITLOOP2
   773 34F4 78			            sei                 ; 40 cycles
   774 34F5 AD 0E D4		            lda NMIEN
   775 34F8 48			            pha
   776 34F9 A9 00		            lda #$00
   777 34FB 8D 0E D4		            sta NMIEN
   778 34FE			            M_cart_set          ; set bank, number in X
Macro: M_CART_SET [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     2 34FE A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
     3 3500 8D A6 D5		            sta TCMOSL          
     4 3503 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
     5 3505 8D A7 D5		            sta TCMOFR
     6 3508 8A			            txa
     7 3509 0A			            asl   
     8 350A 8D A0 D5		            sta TCPBRL              ; get bank number from X
     9 350D A9 00		            lda #$00                     
    10 350F 8D A1 D5		            sta TCPBRH              ; set high to $00
    11 3512 A9 01		            lda #$01
    12 3514 8D A2 D5		            sta TCPBEN              ; enable        
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   779 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   780 				; check for PUT
   781 3517 A0 7F		            ldy #$7F            ; 9 cycles
   782 3519 AD 02 03		            lda DCOMND
   783 351C C9 52		            cmp #$52
   784 351E D0 31		            bne L369B           ; is PUT
   785 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   786 				; GET: read data to buffer
   787 3520			L367B
   788 				;            lda (BUFRLO),Y      ; 6 cycles
   789 3520 B9 FF FF		GETADRLP    lda $FFFF,Y
   790 3523 99 8A 35		REAA006     sta BUFFERXX1,Y     ; 5 cycles +
   791 3526 88			            dey                 ; 2 cycles +
   792 3527 10 F7		            bpl L367B           ; 4 cycles + * 128 = 2176
   793 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   794 				; restore bank for write to user buffer
   795 3529 68			            pla
   796 352A AA			            tax
   797 352B			            M_cart_pop          ; restore register            
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 352B 68			            pla                 
     2 352C 8D A2 D5		            sta TCPBEN          
     3 352F 68			            pla                 
     4 3530 8D A1 D5		            sta TCPBRH          
     5 3533 68			            pla                 
     6 3534 8D A0 D5		            sta TCPBRL          
     7 3537 68			            pla                 
     8 3538 8D A7 D5		            sta TCMOFR          
     9 353B 68			            pla                 
    10 353C 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   798 353F 8E 0E D4		            stx NMIEN
   799 3542 58			            cli
   800 3543 C6 42		            dec CRITIC          ; 54 cycles
   801 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;            
   802 				; GET: write buffer to user data            
   803 3545 A0 7F		            ldy #$7F
   804 3547			L368E
   805 3547 B9 8A 35		REAA008     lda BUFFERXX1,Y
   806 354A 91 34		            sta (BFENLO),Y
   807 354C 88			            dey
   808 354D 10 F8		            bpl L368E
   809 354F 30 25		            bmi RDSIOEND
   810 				            
   811 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   812 				; PUT: buffer data to sector
   813 3551			L369B
   814 3551 B9 8A 35		REAA007     lda BUFFERXX1,Y   ; 5 cycles                
   815 				;            sta (BUFRLO),Y    ; 6 cycles +              
   816 3554 99 FF FF		PUTADRLP    sta $FFFF,Y
   817 3557 88			            dey               ; 2 cycles +              
   818 3558 10 F7		            bpl L369B         ; 4 cycles + * 128 = 2176 
   819 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   820 				; restore register
   821 355A 68			            pla
   822 355B AA			            tax
   823 355C			            M_cart_pop          ; restore register
Macro: M_CART_POP [Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM]
     1 355C 68			            pla                 
     2 355D 8D A2 D5		            sta TCPBEN          
     3 3560 68			            pla                 
     4 3561 8D A1 D5		            sta TCPBRH          
     5 3564 68			            pla                 
     6 3565 8D A0 D5		            sta TCPBRL          
     7 3568 68			            pla                 
     8 3569 8D A7 D5		            sta TCMOFR          
     9 356C 68			            pla                 
    10 356D 8D A6 D5		            sta TCMOSL          
Source: /Users/holgerjanz/Documents/ATARI-XL/Projects/RAMCART/FTe SpartaDOS 3/RAMCART.ASM
   824 3570 8E 0E D4		            stx NMIEN
   825 3573 58			            cli
   826 3574 C6 42		            dec CRITIC          ; 54 cycles
   827 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   828 				; enable interrupts and set rc            
   829 3576 A0 01		RDSIOEND    ldy #$01
   830 3578 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   831
   832 357B 98			            tya                 ; set RC
   833 357C 60			            rts
   834 				            
   835 				; drive configuration buffer
   836 357D 28 01 12		CONFBUF     .byte $28,$01,$12
   837 3580 00			L36BB       .byte $00
   838 3581 00 00 00		            .byte $00,$00,$00
   839 3584 80			CONFSECSIZ  .byte $80                   ; $80 -> 128Byte, $00 -> 256Byte
   840 3585 FF 00 00 00		            .byte $FF,$00,$00,$00
   841
   842 3589 01			DRVNUM      .byte $01
   843 				; $80 for 128Bytes ($100 for 256Bytes)
   844 358A			BUFFERXX1
   845 				;            org $37E6
   846 = 360A			REAEND      = BUFFERXX1 + $80
   847 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   848 				;;; END OF REALLOC BLOCK
   849 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   850
   851
   852 				; $20 Bytes
   853 = 360A			BNKSAVBUF   = REAEND
   854
   855 				; $20 bytes
   856 				;            org $3806
   857 				;BNKSAVBUF2  = BNKSAVBUF + $20
   858
   859 				 
   860 				;           org $3826
   861 358A			            org BNKSAVBUF + $20
   862 				; realloc whole addresses
   863 362A-373A> EE 31		REATAB      .word REAA001+1 ;$33CA
   864 362C F8 31		            .word REAA002+1 ;$33D4
   865 362E FF 31		            .word REAA003+1 ;$33DB
   866 3630 0C 34		            .word REAA004+1 ;$3583
   867 3632 CF 34		            .word REAA005+1 ;$364E
   868 3634 24 35		            .word REAA006+1 ;$367E
   869 3636 52 35		            .word REAA007+1 ;$369C
   870 3638 48 35		            .word REAA008+1 ;$368F
   871 363A 25 34		            .word REAA009+1 ;$35A5
   872 363C 2C 34		            .word REAA010+1 ;$35AC
   873 363E 46 34		            .word REAA011+1 ;$35C6
   874 3640 5A 34		            .word REAA012+1 ;$35D8
   875 3642 61 34		            .word REAA013+1 ;$35DF
   876 3644 64 34		            .word REAA014+1 ;$35E2
   877 3646 7C 34		            .word REAA015+1 ;$35FA
   878 3648 81 34		            .word REAA016+1 ;$35FF
   879 364A 92 34		            .word REAA020+1 ;$3610
   880 364C B6 34		            .word REAA021+1
   881 364E B9 34		            .word REAA022+1
   882 3650 BE 34		            .word REAA023+1
   883 3652 C1 34		            .word REAA024+1
   884 3654 00 00		            .word $0000
   885 				 
   886 				; realloc address low byte           
   887 3656 D5 31		            .word REAL001+1 ;$33B1
   888 3658 F1 31		            .word REAL002+1 ;$33CD
   889 365A F7 33		            .word REAL003+1 ;$356E
   890 365C 00 00		            .word $0000
   891 				; realloc address high byte (address to high byte and value of low byte)
   892 365E D9 31		            .word REAH001+1  ;$33B5
   893 3660 F3			            .byte <JSRDOSINI ;$6A
   894 				                        
   895 3661 FB 31		            .word REAH002+1 ;$33D7
   896 3663 01			            .byte <RAMDSIO  ;$78
   897 				            
   898 3664 FC 33		            .word REAH003+1  ;$3573
   899 3666 0A			            .byte <REAEND    ;$E6
   900 				            
   901
   902 3667 00 00		            .word $0000
   903 				            
   904 3669 A9 00		REASTART    lda #$00
   905 366B 8D 3B 37		            sta REALOOPCNT
   906 366E AE 3B 37		REALOOP     ldx REALOOPCNT
   907 3671 BD 2D 37		            lda REATABADR,X
   908 3674 8D 13 37		            sta L3910+1
   909 3677 BD 2E 37		            lda REATABADR+1,X
   910 367A 8D 14 37		            sta L3910+2
   911 367D 0D 13 37		            ora L3910+1
   912 3680 D0 01		            bne L3881
   913 3682 60			            rts
   914 				            
   915 3683 38			L3881       sec
   916 3684 BD 31 37		            lda READSTADR,X
   917 3687 FD 2F 37		            sbc REASRCADR,X
   918 368A 8D 3C 37		            sta READIFLO
   919 368D BD 32 37		            lda READSTADR+1,X
   920 3690 FD 30 37		            sbc REASRCADR+1,X
   921 3693 8D 3D 37		            sta READIFHI
   922 				            
   923 3696 20 1E 37		L3894       jsr L391C
   924 3699 F0 13		            beq L38AC
   925 369B B1 D7		            lda ($D7),Y
   926 369D 18			            clc
   927 369E 6D 3C 37		            adc READIFLO
   928 36A1 91 D7		            sta ($D7),Y
   929 36A3 C8			            iny
   930 36A4 B1 D7		            lda ($D7),Y
   931 36A6 6D 3D 37		            adc READIFHI
   932 36A9 91 D7		            sta ($D7),Y
   933 36AB 4C 96 36		            jmp L3894
   934 36AE 20 1E 37		L38AC       jsr L391C
   935 36B1 F0 0B		            beq L38BC
   936 36B3 B1 D7		            lda ($D7),Y
   937 36B5 18			            clc
   938 36B6 6D 3C 37		            adc READIFLO
   939 36B9 91 D7		            sta ($D7),Y
   940 36BB 4C AE 36		            jmp L38AC
   941 36BE 20 1E 37		L38BC       jsr L391C
   942 36C1 F0 11		            beq L38D2
   943 36C3 20 12 37		            jsr L3910
   944 36C6 18			            clc
   945 36C7 6D 3C 37		            adc READIFLO
   946 36CA B1 D7		            lda ($D7),Y
   947 36CC 6D 3D 37		            adc READIFHI
   948 36CF 91 D7		            sta ($D7),Y
   949 36D1 4C BE 36		            jmp L38BC
   950 36D4 AE 3B 37		L38D2       ldx REALOOPCNT
   951
   952 36D7 BD 33 37		            lda CPYFROMADR,X
   953 36DA 8D F5 36		            sta L38F2+1
   954 36DD BD 34 37		            lda CPYFROMADR+1,X
   955 36E0 8D F6 36		            sta L38F2+2
   956
   957 36E3 BD 37 37		            lda CPYTOADR,X
   958 36E6 8D F8 36		            sta L38F2+4
   959 36E9 BD 38 37		            lda CPYTOADR+1,X
   960 36EC 8D F9 36		            sta L38F2+5
   961
   962 36EF BC 36 37		            ldy CPYLENGTH+1,X
   963 36F2 A2 00		            ldx #$00
   964 36F4 BD FF FF		L38F2       lda $FFFF,X
   965 36F7 9D FF FF		            sta $FFFF,X
   966 36FA E8			            inx
   967 36FB D0 F7		            bne L38F2
   968 36FD EE F6 36		            inc L38F2+2
   969 3700 EE F9 36		            inc L38F2+5
   970 3703 88			            dey
   971 3704 10 EE		            bpl L38F2
   972 3706 AD 3B 37		            lda REALOOPCNT
   973 3709 18			            clc
   974 370A 69 0C		            adc #$0C
   975 370C 8D 3B 37		            sta REALOOPCNT
   976 370F 4C 6E 36		            jmp REALOOP
   977 				            
   978 3712 AD FF FF		L3910       lda $FFFF
   979 3715 EE 13 37		            inc L3910+1
   980 3718 D0 03		            bne L391B
   981 371A EE 14 37		            inc L3910+2
   982 371D 60			L391B       rts
   983
   984 371E 20 12 37		L391C       jsr L3910
   985 3721 85 D7		            sta $D7
   986 3723 20 12 37		            jsr L3910
   987 3726 A0 00		            ldy #$00
   988 3728 85 D8		            sta $D8
   989 372A 05 D7		            ora $D7
   990 372C 60			            rts
   991
   992 				; realloc code pointer
   993 372D 2A 36		REATABADR   .word REATAB
   994 372F F3 33		REASRCADR   .word REABEGIN
   995 3731 FF FF		READSTADR   .word $FFFF
   996 				; copy code pointer
   997 3733 F3 33		CPYFROMADR  .word REABEGIN
   998 3735 17 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
   999 3737 FF FF		CPYTOADR    .word $FFFF
  1000 3739 00 00		            .word $0000
  1001 				            
  1002 				; $01 byte
  1003 373B			REALOOPCNT  ;= $392B
  1004 = 373C			READIFLO   = REALOOPCNT+1
  1005 = 373D			READIFHI   = READIFLO+1
  1006
  1007
  1008 				         
