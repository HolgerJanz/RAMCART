mads 1.9.9
     1 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2 				; 
     3 				; My DOS Patch - Ramdisk for The!Cart and MyDOS 4.55
     4 				;
     5 				; Patches for MyDOS 4.55 beta4
     6 				;
     7
     8 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     9 				; 
    10 				; The!Cart programming information
    11 				; (c) 2013 Matthias Reichl
    12 				;
    13 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    14 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    15 				; 25AA020A). The memory is addressed using 16384 8k banks
    16 				; (64 8k banks when using RAM instead of flash).
    17 				; 
    18 				; The cartridge configuration registers are located at
    19 				; $D5A0-$D5A8. All registers are read/write unless noted
    20 				; otherwise. Unused bits shall be written as '0' and
    21 				; always read back as '0'.
    22 				; 
    23 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    24 				; flash bank 0, writes to flash are disabled.
    25 				; 
    26 				; Depending on the selected cartridge mode additional
    27 				; registers are enabled at $D5xx.
    28 				; 
    29 				; The primary bank register also serves as a base bank
    30 				; register for the various sub-modes.
    31 				; 
    32 				; The secondary bank register is only used in "flexi mode".
    33 				;
    34
    35 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    36 				; 
    37 				; The!Cart Register (from-to,default)
    38 				;
    39
    40 				; Mode Select
    41 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
    42 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
    43 				; other than the ones listed here are reserved (and result
    44 				; in "cartridge off"):
    45 				; $00: off, cartridge disabled
    46 				; $01: 8k banks at $A000
    47 				; $02: AtariMax 1MBit / 128k
    48 				; $03: Atarimax 8MBit / 1MB
    49 				; $04: OSS M091
    50 				; $08: SDX 64k cart, $D5Ex banking
    51 				; $09: Diamond GOS 64k cart, $D5Dx banking
    52 				; $0A: Express 64k cart, $D57x banking
    53 				; $0C: Atrax 128k cart
    54 				; $0D: Williams 64k cart
    55 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
    56 				; $21: standard 16k cart at $8000-$BFFF
    57 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
    58 				; $23: Blizzard 16k
    59 				; $24: Sic!Cart 512k
    60 				; $28: 16k Mega cart
    61 				; $29: 32k Mega cart
    62 				; $2A: 64k Mega cart
    63 				; $2B: 128k Mega cart
    64 				; $2C: 256k Mega cart
    65 				; $2D: 512k Mega cart
    66 				; $2E: 1024k Mega cart
    67 				; $2F: 2048k Mega cart
    68 				; $30: 32k XEGS cart
    69 				; $31: 64k XEGS cart
    70 				; $32: 128k XEGS cart
    71 				; $33: 256k XEGS cart
    72 				; $34: 512k XEGS cart
    73 				; $35: 1024k XEGS cart
    74 				; $38: 32k SWXEGS cart
    75 				; $39: 64k SWXEGS cart
    76 				; $3A: 128k SWXEGS cart
    77 				; $3B: 256k SWXEGS cart
    78 				; $3C: 512k SWXEGS cart
    79 				; $3D: 1024k SWXEGS cart
    80 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
    81 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
    82 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
    83 				                         ; separate 8k banks at $A000 and $8000
    84 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
    85
    86 				; how to figure out that The!Cart is not active?
    87 				; If the address is not used then the XL returns $ff but
    88 				; the XE (and old 800) return $d5 (high byte of address,
    89 				; the value of the last bus cycle)
    90 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
    91 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
    92
    93 				; Mode Flash/RAM Select
    94 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
    95 				; bit 0: primary bank write enable (0=readOnly, 1=write)
    96 				; bit 1: primary bank source (0=flash, 1=RAM)
    97 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
    98 				; bit 3: secondary bank source (0=flash, 1=RAM)
    99 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   100 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   101
   102 				; Primary Bank
   103 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   104 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   105 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   106
   107 				; Secondary Bank 
   108 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   109 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   110 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   111
   112 				; SPI interface to EEPROM
   113 = D5A8			TCINEP = $d5a8
   114 				; bit 0: SPI CLK
   115 				; bit 1: SPI CS
   116 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   117
   118 				; configuration lock
   119 = D5AF			TCCOLO = $d5af
   120 				; Writing to this register disables "The!Cart" registers
   121 				; at $d5aX.
   122
   123
   124 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   125 				;
   126 				; OS Equates
   127 				;
   128
   129 = D40E			NMIEN   = $d40e
   130 = 0014			RTCLOKL = $14
   131 = 0042			CRITIC  = $42
   132
   133 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   134 				;
   135 				; Equates used to call CIO
   136 				;
   137
   138 = 00FE			XIO.FMTDD = 254 ; Format command
   139 = 0009			XIO.PRINT = 9   ; Print line
   140 = 0003			XIO.OPEN  = 3   ; Open
   141 = 000C			XIO.CLOSE = 12  ; Close
   142 = 0004			XIO.READ  = 4   ; Read
   143 = 0008			XIO.WRITE = 8   ; Write
   144 = 0007			XIO.GET   = 7   ; Get
   145 = 000B			XIO.PUT   = 11  ; Put
   146
   147 = 0340			IOCB        =  $0340    ; address of first IOCB
   148 = 0342			IOCB.CMD    = IOCB+2    ; where command goes in IOCB
   149 = 0344			IOCB.BUF    = IOCB+4    ; buffer (or name) address
   150 = 0348			IOCB.BUFLEN = IOCB+8    ; max buffer length address
   151 = 034A			IOCB.AUX1   = IOCB+10   ; Auxilliary byte 1
   152 = 034B			IOCB.AUX2   = IOCB+11   ; Auxilliary byte 2
   153
   154 = E456			CIOV = $E456            ; the classic location
   155
   156 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   157 				;
   158 				; Star Patch of DUP (DOS is patched at loading)
   159 				;
   160
   161 				        org $5000 ; MyDOS DUP ends at $4439
   162 				START
   163 				; info message
   164 FFFF> 5000-5048> A2 23	        ldx #<msg.start
   165 5002 A0 50		        ldy #>msg.start
   166 5004 A9 26		        lda #msg.start.end-msg.start
   167 5006 20 0A 50		        jsr print
   168 				; patch DUP
   169 				; set version extension (invers TC for The!Cart)
   170 				;        lda #$d4
   171 				;        sta PRNMENTC
   172 				;        lda #$c3
   173 				;        sta PRNMENTC+1
   174 				; finished
   175 5009 60			        rts        
   176 				        
   177 				; print to screen
   178 500A			print   ; print adr X,Y len A
   179 500A 8D 48 03		        sta IOCB.BUFLEN
   180 500D A9 00		        lda #$00
   181 500F 8D 49 03		        sta IOCB.BUFLEN+1
   182 5012 8E 44 03		        stx IOCB.BUF
   183 5015 8C 45 03		        sty IOCB.BUF+1
   184 5018 A9 0B		        lda #XIO.PUT
   185 501A 8D 42 03		        sta IOCB.CMD
   186 501D A2 00		        ldx #$00
   187 501F 20 56 E4		        jsr CIOV
   188 5022 60			        rts
   189
   190 5023			msg.start
   191 5023 54 68 65 21 43 61 +         .byte 'The!Cart PATCH v42 for MYDOS4.55beta4'
   192 5048 9B			        .byte $9b
   193 5049			msg.start.end
   194
   195
   196
   197 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   198 				;
   199 				; MyDOS Equates
   200 				;
   201
   202 = 0032			BUFR    = $32
   203 = 002E			CURFCB  = $2e
   204 = 0304			DBUFLO  = $0304
   205 = 030A			DAUX1   = $030a
   206 = 0303			DSTATS  = $0303
   207
   208 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   209 				;;
   210 				;; Patch DUP
   211 				;;
   212 				;
   213 				;; patched routines of DUP
   214 				;PRNMENTC= $2b32 ; MyDOS menu
   215 				;CHKBANKS= $3724 ; check bank
   216 				;RAMDSU  = $37c2 ; ramdisk present ?
   217 				;CHKRDBN = $382c ; directly at the call of bank check
   218 				;GETSEQN = $38da ; get sequence number of banks
   219 				;DVNOQ   = $38f8 ; drive number question
   220 				;DVNOQ2  = $390e ; jump over page map manipulation
   221 				;GETDRV  = $391f ; get drive number
   222 				;
   223 				;; set version extension (invers TC for The!Cart)
   224 				;;        org PRNMENTC
   225 				;        .byte $d4,$c3
   226 				;
   227 				;; check banks, sets RDKLMT
   228 				;;        org CHKBANKS
   229 				;        lda TCMOSL
   230 				;        cmp #TCMOSL.XLLOCK
   231 				;        beq CHKB.NO
   232 				;        cmp #TCMOSL.XELOCK
   233 				;        bne CHKB.YE
   234 				;CHKB.NO lda #$00
   235 				;        sta RDKLMT
   236 				;        rts
   237 				;CHKB.YE lda #$20
   238 				;        sta RDKLMT
   239 				;        rts
   240 				;        
   241 				;; jump over question about Axlon or XE,
   242 				;; we have The!Card
   243 				;;        org RAMDSU
   244 				;        jmp CHKRDBN
   245 				;        
   246 				;; jump over sequence number input
   247 				;; sequence is clear (0-31) = 32 banks
   248 				;;        org GETSEQN
   249 				;        jmp DVNOQ
   250 				;; jump over map page manipulation,
   251 				;; there is no map page anymore
   252 				;;        org DVNOQ2
   253 				;        jmp GETDRV
   254 				;        
   255 				;
   256 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   257 				;
   258 				; Patch DOS
   259 				;
   260
   261 				; patched routines of DOS
   262 = 0C33			RDKIO   = $0c33
   263 = 0BBA			MAPAGE  = $0bba
   264
   265 				; min $0bba because MAPAGE starts there but is not need,
   266 				; VALSEC original at $0bfa
   267 5049			        org MAPAGE+3        ; because of bcc VALSEC 
   268 				                            ; must not be out of range
   269 0BBD-0C2F> 0A		VALSEC  asl
   270 0BBE 85 32		        sta BUFR            ; save RAMbank # in X*2
   271 0BC0 98			        tya                 ; Sector # (lo) for address of sector
   272 				; set offsets for address in copy loop
   273 0BC1 28			        plp                 ; pull carry
   274 0BC2 A2 01		        ldx #loop.radr.off  ; offset for LB read     
   275 0BC4 A0 04		        ldy #loop.wadr.off  ; offset for LB write
   276 0BC6 90 04		        bcc sector.read  
   277 0BC8 A2 04		        ldx #loop.wadr.off  ; offset for LB write
   278 0BCA A0 01		        ldy #loop.radr.off  ; offset for LB read 
   279 0BCC			sector.read
   280 				; set address of sector
   281 0BCC 38			        sec                 ; set Bit7
   282 0BCD 6A			        ror                 ; save Bit0 in carry
   283 0BCE 29 BF		        and #$bf            ; clear Bit6
   284 0BD0 9D 19 0C		        sta loop.copy+1,X   ; (lo)/2.
   285 0BD3 A9 00		        lda #$00
   286 0BD5 6A			        ror                 ; Odd sector uses
   287 0BD6 9D 18 0C		        sta loop.copy,X     ;  top 1/2 page.
   288 				; set sector buffer address
   289 0BD9 AD 04 03		        lda DBUFLO          ; USER BUFFER ADDRESS GOES HERE
   290 0BDC 99 18 0C		        sta loop.copy,Y
   291 0BDF AD 05 03		        lda DBUFLO+1
   292 0BE2 99 19 0C		        sta loop.copy+1,Y
   293 				; save the!cart registers
   294 0BE5 AD A6 D5		        lda TCMOSL
   295 0BE8 48			        pha
   296 0BE9 AD A7 D5		        lda TCMOFR
   297 0BEC 48			        pha
   298 0BED AD A0 D5		        lda TCPBRL
   299 0BF0 48			        pha
   300 0BF1 AD A1 D5		        lda TCPBRH
   301 0BF4 48			        pha
   302 0BF5 AD A2 D5		        lda TCPBEN
   303 0BF8 48			        pha
   304 				; set critical mode
   305 0BF9 A9 01		        lda #$01
   306 0BFB 85 42		        sta CRITIC          ; tell VBLANK this is critical!
   307 0BFD A4 14		        ldy RTCLOKL
   308 0BFF C4 14		SYNC    cpy RTCLOKL         ; got a VBLANK yet?
   309 0C01 F0 FC		        beq SYNC            ; no
   310 0C03 8D 0E D4		        sta NMIEN           ; disable VBI and DLI
   311 0C06 78			        sei                 ; and disable IRQ's
   312 				; set new The!Cart mode, 30c
   313 0C07 A9 21		        lda #TCMOSL.16K     ; set 2x8k mode at $8000-$BFFF
   314 0C09 8D A6 D5		        sta TCMOSL        
   315 0C0C A9 03		        lda #TCMOFR.PBRAM   ; set to RAM
   316 0C0E 8D A7 D5		        sta TCMOFR          ;
   317 0C11 A5 32		        lda BUFR
   318 0C13 8D A0 D5		        sta TCPBRL          ; get bank number from x
   319 				; copy from/to buffer
   320 0C16 A0 7F		        ldy #$7f            ; 128 bytes in a sector
   321 0C18			loop.copy ; read/write sector from RAMDISK
   322 = 0001			loop.radr.off = $01
   323 = 0004			loop.wadr.off = $04
   324 0C18 B9 FF FF		        lda $ffff,Y         ; $FFFF is set to read address
   325 0C1B 99 FF FF		        sta $ffff,Y         ; $FFFF is set to write address
   326 0C1E 88			        dey
   327 0C1F 10 F7		        bpl loop.copy
   328 				; restore The!Cart registers, part1
   329 0C21 68			        pla        
   330 0C22 8D A2 D5		        sta TCPBEN 
   331 0C25 68			        pla        
   332 0C26 8D A1 D5		        sta TCPBRH 
   333 0C29 68			        pla        
   334 0C2A 8D A0 D5		        sta TCPBRL 
   335 				; jump to The End
   336 0C2D 4C 42 0C		        jmp RIOX
   337 				; max $0c32
   338
   339 0C30			        org RDKIO
   340 				; keep original address for RDKIO
   341 				; ramdisk IO
   342 				; input: sector number in A(H),Y(L)
   343 				;        read/write    in C on stack
   344 0C33-0C5A> 8C 0A 03	        sty DAUX1 ;*** FOR FORMAT CODE ***
   345 0C36 C0 80		        cpy #$80
   346 0C38 2A			        rol 
   347 0C39 C9 20		        cmp #32
   348 				; keep RDKLMT stable,
   349 				; do not change from NRDKIO to RDKLMT
   350 = 0C3A			RDKLMT  = *-1       ;NUMBER OF 16K PAGES IN RAMDISK
   351 0C3B 90 80		        bcc VALSEC  ;CALCULATE MEM. ADDR.
   352 0C3D 28			        plp 
   353 0C3E A0 8B		        ldy #139
   354 0C40 30 13		        bmi RERROR
   355 0C42			RIOX
   356 				; restore The!Cart registers, part2
   357 0C42 68			        pla        
   358 0C43 8D A7 D5		        sta TCMOFR 
   359 0C46 68			        pla        
   360 0C47 8D A6 D5		        sta TCMOSL 
   361 				; reset critical mode
   362 0C4A A9 C0		        lda #$C0
   363 0C4C 8D 0E D4		        sta NMIEN   ;RE-ENABLE NMI
   364 0C4F A0 00		        ldy #$00
   365 0C51 84 42		        sty CRITIC
   366 0C53 58			        cli         ;ENABLE INTERRUPTS
   367 				; set return values
   368 0C54 C8			        iny         ;RETURN '1' IN Y-REG
   369 0C55 8C 03 03		RERROR  sty DSTATS  ;AND IN STATUS BYTE
   370 0C58 A6 2E		        ldx CURFCB  ;RESTORE FCB ADDR
   371 0C5A 60			        rts         ;THEN EXIT
   372
   373 				; max $0c5c
   374
   375 02E0-02E1> 00 50		        run START
