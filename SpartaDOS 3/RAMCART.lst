mads 1.9.9
     1 				;
     2 				; THE!RAMDISK for THE!CART for SpartaDOS 3 
     3 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     4 				;
     5 				; System equates
     6 				;
     7 				; OS EQUATES
     8 				; ----------
     9 				; 
    10 				; IO EQUATES
    11 				; 
    12 = 0002			ICCOM       = $0002
    13 = 0008			ICBLL       = $0008
    14 = 0009			ICBLH       = $0009
    15 				; 
    16 				; OS VARIABLES FOR XL/XE
    17 				; 
    18 				; PAGE 0
    19 				; 
    20 = 000A			DOSVEC      = $000A
    21 = 000C			DOSINI      = $000C
    22 = 0012			RTCLOK      = $0012
    23 = 0032			BUFRLO      = $0032
    24 = 0033			BUFRHI      = $0033
    25 = 0034			BFENLO      = $0034
    26 = 0035			BFENHI      = $0035
    27 				; 
    28 				; PAGE 2
    29 				; 
    30 = 022F			SDMCTL      = $022F
    31 = 02E7			MEMLO       = $02E7
    32 				; 
    33 				; PAGE 3
    34 				; 
    35 = 0300			DDEVIC      = $0300
    36 = 0301			DUNIT       = $0301
    37 = 0302			DCOMND      = $0302
    38 = 0304			DBUFLO      = $0304
    39 = 0305			DBUFHI      = $0305
    40 = 0308			DBYTLO      = $0308
    41 = 0309			DBYTHI      = $0309
    42 = 030A			DAUX1       = $030A
    43 = 030B			DAUX2       = $030B
    44 = 0340			IOCB0       = $0340
    45 				; 
    46 				; PIA
    47 				; 
    48 = D300			PORTA       = $D300
    49 = D301			PORTB       = $D301
    50 = D302			PACTL       = $D302
    51 = D303			PBCTL       = $D303
    52 				; 
    53 				; ANTIC
    54 				; 
    55 = D40E			NMIEN       = $D40E
    56 				; 
    57 				; ROM VECTORS
    58 				; 
    59 = E456			CIOV        = $E456
    60 				;
    61 				; SpartaDOS 
    62 				;
    63 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    64 = 003F			SD_LBUF        = $3F ; offset to line buffer
    65 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    66 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    67 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    68
    69 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70 				; 
    71 				; The!Cart programming information
    72 				; (c) 2013 Matthias Reichl
    73 				;
    74 				; The!Cart is equipped with 128MB flash (Spansion S29GL01
    75 				; chip), 512k RAM and a 256-byte SPI EEPROM (Microchip
    76 				; 25AA020A). The memory is addressed using 16384 8k banks
    77 				; (64 8k banks when using RAM instead of flash).
    78 				; 
    79 				; The cartridge configuration registers are located at
    80 				; $D5A0-$D5A8. All registers are read/write unless noted
    81 				; otherwise. Unused bits shall be written as '0' and
    82 				; always read back as '0'.
    83 				; 
    84 				; Powerup configuration is 8k mode ($A000-$BFFF) using
    85 				; flash bank 0, writes to flash are disabled.
    86 				; 
    87 				; Depending on the selected cartridge mode additional
    88 				; registers are enabled at $D5xx.
    89 				; 
    90 				; The primary bank register also serves as a base bank
    91 				; register for the various sub-modes.
    92 				; 
    93 				; The secondary bank register is only used in "flexi mode".
    94 				;
    95
    96 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    97 				; 
    98 				; The!Cart Register (from-to,default)
    99 				;
   100
   101 				; Mode Select
   102 = D5A6			TCMOSL = $d5a6    ; mode ($00-$3d,$01)
   103 				; Cartridge mode is selected with bits 0-5 of $D5A6, values
   104 				; other than the ones listed here are reserved (and result
   105 				; in "cartridge off"):
   106 				; $00: off, cartridge disabled
   107 				; $01: 8k banks at $A000
   108 				; $02: AtariMax 1MBit / 128k
   109 				; $03: Atarimax 8MBit / 1MB
   110 				; $04: OSS M091
   111 				; $08: SDX 64k cart, $D5Ex banking
   112 				; $09: Diamond GOS 64k cart, $D5Dx banking
   113 				; $0A: Express 64k cart, $D57x banking
   114 				; $0C: Atrax 128k cart
   115 				; $0D: Williams 64k cart
   116 				; $20: flexi mode (separate 8k banks at $A000 and $8000)
   117 				; $21: standard 16k cart at $8000-$BFFF
   118 				; $22: MegaMax 16k mode (up to 2MB), AtariMax 8Mbit banking
   119 				; $23: Blizzard 16k
   120 				; $24: Sic!Cart 512k
   121 				; $28: 16k Mega cart
   122 				; $29: 32k Mega cart
   123 				; $2A: 64k Mega cart
   124 				; $2B: 128k Mega cart
   125 				; $2C: 256k Mega cart
   126 				; $2D: 512k Mega cart
   127 				; $2E: 1024k Mega cart
   128 				; $2F: 2048k Mega cart
   129 				; $30: 32k XEGS cart
   130 				; $31: 64k XEGS cart
   131 				; $32: 128k XEGS cart
   132 				; $33: 256k XEGS cart
   133 				; $34: 512k XEGS cart
   134 				; $35: 1024k XEGS cart
   135 				; $38: 32k SWXEGS cart
   136 				; $39: 64k SWXEGS cart
   137 				; $3A: 128k SWXEGS cart
   138 				; $3B: 256k SWXEGS cart
   139 				; $3C: 512k SWXEGS cart
   140 				; $3D: 1024k SWXEGS cart
   141 = 0000			TCMOSL.OFF   = $00    ; off, cartridge disabled
   142 = 0001			TCMOSL.8K    = $01    ; 8k banks at $A000
   143 = 0021			TCMOSL.FLEXI = $21    ; flexi mode,
   144 				                         ; separate 8k banks at $A000 and $8000
   145 = 0021			TCMOSL.16K   = $21    ; standard 16k cart at $8000-$BFFF
   146
   147 				; how to figure out that The!Cart is not active?
   148 				; If the address is not used then the XL returns $ff but
   149 				; the XE (and old 800) return $d5 (high byte of address,
   150 				; the value of the last bus cycle)
   151 = 00FF			TCMOSL.XLLOCK  = $ff    ; config lock or not present
   152 = 00D5			TCMOSL.XELOCK  = $d5    ; config lock or not present
   153
   154 				; Mode Flash/RAM Select
   155 = D5A7			TCMOFR = $d5a7    ;flash/RAM mode (0-15,0)
   156 				; bit 0: primary bank write enable (0=readOnly, 1=write)
   157 				; bit 1: primary bank source (0=flash, 1=RAM)
   158 				; bit 2: secondary bank write enable (0=readOnly, 1=write)
   159 				; bit 3: secondary bank source (0=flash, 1=RAM)
   160 = 0003			TCMOFR.PBRAM = $03    ; primary bank RAM
   161 = 000C			TCMOFR.SBRAM = $0C    ; secondary bank RAM
   162
   163 				; Primary Bank
   164 = D5A0			TCPBRL = $d5a0    ; register low byte (0-255,0)
   165 = D5A1			TCPBRH = $d5a1    ; register high byte (0-63,0)
   166 = D5A2			TCPBEN = $d5a2    ; enable (0=dis-1=en,1)
   167
   168 				; Secondary Bank 
   169 = D5A3			TCSBRL = $d5a3    ; register low byte (0-255,0)
   170 = D5A4			TCSBRH = $d5a4  ; register high byte (0-63,0)
   171 = D5A5			TCSBEN = $d5a5    ; enable (0=dis-1=en,0)
   172
   173 				; SPI interface to EEPROM
   174 = D5A8			TCINEP = $d5a8
   175 				; bit 0: SPI CLK
   176 				; bit 1: SPI CS
   177 				; bit 7: SPI data in (on reads), SPI data out (on writes)
   178
   179 				; configuration lock
   180 = D5AF			TCCOLO = $d5af
   181 				; Writing to this register disables "The!Cart" registers
   182 				; at $d5aX.
   183
   184
   185 				; macros
   186
   187 				; set bank: number of bank in X, uses A
   188 				M_bank_set  .macro
   189 				            lda BNKSWTMSK,X
   190 				            eor PORTB
   191 				            and #$7E
   192 				            eor PORTB
   193 				            sta PORTB
   194 				;            lda PORTB
   195 				;            and #$01
   196 				;            ora BNKSWTMSK,X
   197 				;            sta PORTB
   198 				            .endm
   199
   200 				; saves bank register: pushes bank register on stack
   201 				M_bank_push .macro
   202 				            lda PORTB
   203 				            pha
   204 				            .endm
   205
   206 				; restores bank register from stack: pops from stack
   207 				M_bank_pop  .macro
   208 				            pla
   209 				            sta PORTB
   210 				            .endm
   211 				 
   212 				; set bank: number of bank in X, uses A
   213 				M_cart_set  .macro
   214 				; set new The!Cart mode
   215 				            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
   216 				            sta TCMOSL          
   217 				            lda #TCMOFR.PBRAM       ; set to RAM
   218 				            sta TCMOFR
   219 				            txa
   220 				            asl   
   221 				            sta TCPBRL              ; get bank number from X
   222 				            lda #$00                     
   223 				            sta TCPBRH              ; set high to $00
   224 				            lda #$01
   225 				            sta TCPBEN              ; enable        
   226 				            .endm
   227
   228
   229
   230 				;
   231 				; Start of code
   232 				;
   233 				            org $3000
   234
   235 				; save the!cart registers
   236 FFFF> 3000-3484> AD A6 +             lda TCMOSL
   237 3003 48			            pha
   238 3004 AD A7 D5		            lda TCMOFR
   239 3007 48			            pha
   240 3008 AD A0 D5		            lda TCPBRL
   241 300B 48			            pha
   242 300C AD A1 D5		            lda TCPBRH
   243 300F 48			            pha
   244 3010 AD A2 D5		            lda TCPBEN
   245 3013 48			            pha
   246
   247 				           
   248 				; switch off interrupts
   249 3014 A9 00		            lda #$00
   250 3016 8D 2F 02		            sta SDMCTL
   251 3019 20 ED 31		            jsr WAITSYNC
   252 				            
   253 				; try to save and write banks            
   254 301C A2 1F		            ldx #$1F
   255 301E			BNKSAVWRT   M_cart_set
Macro: M_CART_SET [Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM]
     2 301E A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
     3 3020 8D A6 D5		            sta TCMOSL          
     4 3023 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
     5 3025 8D A7 D5		            sta TCMOFR
     6 3028 8A			            txa
     7 3029 0A			            asl   
     8 302A 8D A0 D5		            sta TCPBRL              ; get bank number from X
     9 302D A9 00		            lda #$00                     
    10 302F 8D A1 D5		            sta TCPBRH              ; set high to $00
    11 3032 A9 01		            lda #$01
    12 3034 8D A2 D5		            sta TCPBEN              ; enable        
Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM
   256 3037 AD 00 90		            lda $9000
   257 303A 9D 85 35		            sta BNKSAVBUF,X
   258 303D 8A			            txa
   259 303E 8D 00 90		            sta $9000
   260 3041 AD 00 B0		            lda $B000
   261 3044 9D A5 35		            sta BNKSAVBUF2,X
   262 3047 8A			            txa
   263 3048 0A			            asl
   264 3049 8D 00 B0		            sta $B000
   265 304C CA			            dex
   266 304D 10 CF		            bpl BNKSAVWRT
   267 				            
   268 				; check banks
   269 304F E8			BNKCHK      inx
   270 3050			            M_cart_set            
Macro: M_CART_SET [Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM]
     2 3050 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
     3 3052 8D A6 D5		            sta TCMOSL          
     4 3055 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
     5 3057 8D A7 D5		            sta TCMOFR
     6 305A 8A			            txa
     7 305B 0A			            asl   
     8 305C 8D A0 D5		            sta TCPBRL              ; get bank number from X
     9 305F A9 00		            lda #$00                     
    10 3061 8D A1 D5		            sta TCPBRH              ; set high to $00
    11 3064 A9 01		            lda #$01
    12 3066 8D A2 D5		            sta TCPBEN              ; enable        
Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM
   271 3069 8A			            txa
   272 306A CD 00 90		            cmp $9000
   273 306D D0 0C		            bne BNKSTOP
   274 306F 8A			            txa
   275 3070 0A			            asl
   276 3071 CD 00 B0		            cmp $B000
   277 3074 D0 05		            bne BNKSTOP
   278 3076 E0 1F		            cpx #$1F
   279 3078 D0 D5		            bne BNKCHK
   280 307A E8			            inx
   281 307B 8E 57 34		BNKSTOP     stx BNKCNT
   282
   283 				; restore banks
   284 307E A2 00		            ldx #$00
   285 3080			BNKRESTR    M_cart_set
Macro: M_CART_SET [Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM]
     2 3080 A9 21		            lda #TCMOSL.16K         ; set 2x8k mode at $8000-$BFFF
     3 3082 8D A6 D5		            sta TCMOSL          
     4 3085 A9 03		            lda #TCMOFR.PBRAM       ; set to RAM
     5 3087 8D A7 D5		            sta TCMOFR
     6 308A 8A			            txa
     7 308B 0A			            asl   
     8 308C 8D A0 D5		            sta TCPBRL              ; get bank number from X
     9 308F A9 00		            lda #$00                     
    10 3091 8D A1 D5		            sta TCPBRH              ; set high to $00
    11 3094 A9 01		            lda #$01
    12 3096 8D A2 D5		            sta TCPBEN              ; enable        
Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM
   286 3099 BD 85 35		            lda BNKSAVBUF,X
   287 309C 8D 00 90		            sta $9000
   288 309F BD A5 35		            lda BNKSAVBUF2,X
   289 30A2 8D 00 B0		            sta $B000
   290 30A5 E8			            inx
   291 30A6 E0 20		            cpx #$20
   292 30A8 D0 D6		            bne BNKRESTR
   293
   294 				; restore The!Cart registers
   295 30AA 68			            pla                 
   296 30AB 8D A2 D5		            sta TCPBEN          
   297 30AE 68			            pla                 
   298 30AF 8D A1 D5		            sta TCPBRH          
   299 30B2 68			            pla                 
   300 30B3 8D A0 D5		            sta TCPBRL          
   301 30B6 68			            pla                 
   302 30B7 8D A7 D5		            sta TCMOFR          
   303 30BA 68			            pla                 
   304 30BB 8D A6 D5		            sta TCMOSL          
   305
   306 				; enable interrupts
   307 30BE A9 22		            lda #$22
   308 30C0 8D 2F 02		            sta SDMCTL
   309 30C3 20 ED 31		            jsr WAITSYNC
   310
   311 				; info message
   312 30C6 20 DA 32		            jsr PRINT
   313 30C9 54 48 45 21 52 41 +             .byte 'THE!RAMDISK for THE!CART v1910051703',$9B,$FF
   314
   315 				; check bank count
   316 30EF AE 57 34		            ldx BNKCNT
   317 30F2 E0 20		            cpx #$20
   318 30F4 F0 2B		            beq RAMDISKINI
   319
   320 				; no banks            
   321 30F6 20 DA 32		            jsr PRINT
   322 30F9 20 20 45 72 72 6F +             .byte '  Error - 512k RAM THE!CART not found',$9B,$FF
   323 3120 60			            rts
   324 				                        
   325 3121			RAMDISKINI
   326 				; check for parameter
   327 3121 A0 0A		            ldy #SD_BUFOFF
   328 3123 B1 0A		            lda (DOSVEC),Y
   329 3125 18			            clc
   330 3126 69 3F		            adc #SD_LBUF
   331 3128 A8			            tay
   332 3129 B1 0A		            lda (DOSVEC),Y
   333 312B C9 9B		            cmp #$9B
   334 312D D0 07		            bne PRSPARM
   335 				; no parameter -> error
   336 312F 4C 71 31		            jmp PARAMERR
   337
   338 				; jump for jsr to crunch name
   339 3132 4C FF FF		CRNAME      jmp $FFFF
   340
   341 3135 FF			CHKFRMT     .byte $FF
   342
   343 				; set crunch name address
   344 3136 A5 0A		PRSPARM     lda DOSVEC
   345 3138 18			            clc
   346 3139 69 03		            adc #SD_ZCRNAME
   347 313B 8D 33 31		            sta CRNAME+1
   348 313E A5 0B		            lda DOSVEC+1
   349 3140 69 00		            adc #$00
   350 3142 8D 34 31		            sta CRNAME+2
   351 				            
   352 				; parameter parsing            
   353 				; get drive number SD_COMFNAM starts alway with Dx:
   354 3145 20 32 31		            jsr CRNAME
   355 3148 D0 27		            bne PARAMERR
   356 314A A0 22		            ldy #SD_COMFNAM+1
   357 314C B1 0A		            lda (DOSVEC),Y
   358 314E 29 0F		            and #$0F
   359 3150 8D 64 34		            sta DRVNUM
   360 				; check options /N
   361 3153 20 32 31		            jsr CRNAME
   362 3156 F0 43		            beq PRSPAREND
   363 3158 A0 24		            ldy #SD_COMFNAM+3
   364 315A B1 0A		            lda (DOSVEC),Y
   365 315C C9 2F		            cmp #'/'
   366 315E D0 11		            bne PARAMERR
   367 3160 C8			PRSPARLOOP  iny
   368 3161 B1 0A		            lda (DOSVEC),Y
   369 3163 C9 9B		            cmp #$9B         ; end of parameter
   370 3165 F0 34		            beq PRSPAREND
   371 3167 C9 4E		PRSPARNXT   cmp #'N'         ; format ?
   372 3169 D0 06		            bne PARAMERR
   373 				; check format at startup to preserve existing RAM disk            
   374 316B EE 35 31		            inc CHKFRMT
   375 316E 4C 60 31		            jmp PRSPARLOOP
   376 3171 20 DA 32		PARAMERR    jsr PRINT
   377 3174 45 72 72 6F 72 20 +             .byte 'Error - Parameter Error use Dx: [/N]',$9B,$FF
   378 319A 60			            rts
   379
   380 				; set jsr to original DOSINI
   381 319B A5 0C		PRSPAREND   lda DOSINI
   382 319D 8D 11 33		            sta JSRDOSINI+1
   383 31A0 A5 0D		            lda DOSINI+1
   384 31A2 8D 12 33		            sta JSRDOSINI+2
   385
   386 				; set MEMLO oldaddress, realloc
   387 31A5 AD E7 02		            lda MEMLO
   388 31A8 8D CA 36		            sta READSTADR
   389 31AB 8D D0 36		            sta CPYTOADR
   390 31AE AD E8 02		            lda MEMLO+1
   391 31B1 8D CB 36		            sta READSTADR+1
   392 31B4 8D D1 36		            sta CPYTOADR+1
   393 				;
   394 				; start realloc
   395 				;
   396 31B7 20 02 36		            jsr REASTART
   397
   398 				; set new DOSINI            
   399 31BA A9 10		REAL001     lda #<JSRDOSINI
   400 31BC 85 0C		            sta DOSINI
   401 31BE A9 33		REAH001     lda #>JSRDOSINI
   402 31C0 85 0D		            sta DOSINI+1
   403 				; get SIO and patch for RAMDISK
   404 31C2 38			            sec
   405 31C3 A5 0A		            lda DOSVEC
   406 31C5 E9 0A		            sbc #SD_LSIO
   407 31C7 85 32		            sta BUFRLO
   408 31C9 A5 0B		            lda DOSVEC+1
   409 31CB E9 00		            sbc #$00
   410 31CD 85 33		            sta BUFRHI
   411 31CF A0 00		            ldy #$00
   412 31D1 B1 32		            lda (BUFRLO),Y
   413 31D3 8D 2E 33		REAA001     sta JMPSIO+1      ;realloc $33CA
   414 31D6 A9 1E		REAL002     lda #<RAMDSIO
   415 31D8 91 32		            sta (BUFRLO),Y
   416 31DA C8			            iny
   417 31DB B1 32		            lda (BUFRLO),Y
   418 31DD 8D 2F 33		REAA002     sta JMPSIO+2      ;realloc $33D4
   419 31E0 A9 33		REAH002     lda #>RAMDSIO
   420 31E2 91 32		            sta (BUFRLO),Y
   421 				; set MEMLO            
   422 31E4 20 13 33		REAA003     jsr SETMEMLO      ;realloc $33DB
   423 				; format if requested            
   424 31E7 2C 35 31		            bit CHKFRMT
   425 31EA 30 08		            bmi FRMTRD
   426 31EC 60			            rts
   427
   428 				; wait for sync            
   429 31ED A5 14		WAITSYNC    lda RTCLOK+2
   430 31EF C5 14		WAITLOOP    cmp RTCLOK+2
   431 31F1 F0 FC		            beq WAITLOOP
   432 31F3 60			            rts
   433 				            
   434 				; format ramdisk
   435 31F4 20 DA 32		FRMTRD      jsr PRINT
   436 31F7 20 20 52 41 4D 20 +             .byte '  RAM Disk formatted',$9B,$FF
   437
   438
   439 				;            lda PORTB
   440 				;            pha
   441 320D			            M_bank_push
Macro: M_BANK_PUSH [Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM]
     1 320D AD 01 D3		            lda PORTB
     2 3210 48			            pha
Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM
   442 				            
   443 				;            and #$FD
   444 				;            eor BNKSWTMSK
   445 				;            and PORTBMASK
   446 				;            eor PORTB
   447 				;            sta PORTB
   448 3211 A2 10		            ldx #$10
   449 3213			            M_bank_set
Macro: M_BANK_SET [Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM]
     1 3213 BD 65 34		            lda BNKSWTMSK,X
     2 3216 4D 01 D3		            eor PORTB
     3 3219 29 7E		            and #$7E
     4 321B 4D 01 D3		            eor PORTB
     5 321E 8D 01 D3		            sta PORTB
Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM
   450
   451 				; clear loop
   452 3221 A9 00		            lda #$00
   453 3223 A8			            tay
   454 3224 99 00 40		FRMTCLP     sta $4000,Y
   455 3227 99 00 41		            sta $4100,Y
   456 322A 99 00 42		            sta $4200,Y
   457 322D 99 00 43		            sta $4300,Y
   458 3230 C8			            iny
   459 3231 D0 F1		            bne FRMTCLP
   460 				; header loop            
   461 3233 A0 2A		            ldy #$2A
   462 3235 B9 9E 32		FRMTHLP     lda RDHEAD,Y
   463 3238 99 00 40		            sta $4000,Y
   464 323B 88			            dey
   465 323C 10 F7		            bpl FRMTHLP
   466 				; set free sector VTOC             
   467 323E AD 57 34		            lda BNKCNT
   468 3241 4A			            lsr
   469 3242 4A			            lsr
   470 3243 AA			            tax
   471 3244 20 91 32		FRMTVTOCLP  jsr FRMTSETVTOC
   472 3247 AD 96 32		            lda FRMTVTOCIT+1
   473 324A 18			            clc
   474 324B 69 40		            adc #$40
   475 324D 8D 96 32		            sta FRMTVTOCIT+1
   476 3250 AD 97 32		            lda FRMTVTOCIT+2
   477 3253 69 00		            adc #$00
   478 3255 8D 97 32		            sta FRMTVTOCIT+2
   479 3258 CA			            dex
   480 3259 D0 E9		            bne FRMTVTOCLP
   481 				 ; set map sector
   482 325B A9 04		            lda #$04 
   483 325D 8D 0F 40		            sta $400F     ; number of bit map sectors used on the disk
   484 3260 18			            clc
   485 3261 69 02		            adc #$02
   486 3263 8D 09 40		            sta $4009     ; first sector map of the MAIN directory
   487 3266 A9 00		            lda #$00 
   488 3268 8D 80 40		            sta $4080
   489 326B A9 80		            lda #$80      ; low address of MAIN sector map
   490 326D 85 32		            sta BUFRLO
   491 326F A9 42		            lda #$42      ; high address of MAIN sector map
   492 3271 85 33		            sta BUFRHI   
   493 3273 18			            clc
   494 3274 A0 04		            ldy #$04
   495 3276 AD 09 40		            lda $4009
   496 3279 69 01		            adc #$01
   497 327B 91 32		            sta (BUFRLO),Y
   498 				; set MAIN sector map            
   499 327D A2 00		            ldx #$00
   500 327F A0 80		            ldy #$80
   501 3281 BD C9 32		L349B       lda RDMAIN,X
   502 3284 91 32		            sta (BUFRLO),Y
   503 3286 E8			            inx
   504 3287 C8			            iny
   505 3288 E0 11		            cpx #$11
   506 328A D0 F5		            bne L349B
   507 				; restore PORTB
   508 				;            pla
   509 				;            sta PORTB
   510 328C			            M_bank_pop
Macro: M_BANK_POP [Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM]
     1 328C 68			            pla
     2 328D 8D 01 D3		            sta PORTB
Source: /Users/holger/Documents/ATARI-XL/Projects/RAMCART/SpartaDOS 3/RAMCART.ASM
   511 3290 60			            rts
   512 				            
   513 				; set VTOC            
   514 3291 A0 00		FRMTSETVTOC ldy #$00
   515 3293 A9 FF		            lda #$FF
   516 3295 99 80 40		FRMTVTOCIT  sta $4080,Y
   517 3298 C8			            iny
   518 3299 C0 40		            cpy #$40
   519 329B D0 F8		            bne FRMTVTOCIT
   520 329D 60			            rts
   521
   522 329E 00 03 00 07 E0 07 + RDHEAD      .byte $00,$03,$00,$07,$E0,$07,$4C,$80
   523 32A6 30 03 00		            .byte $30,$03,$00 ;original $00,$04,$FB,$03
   524 32A9 00 10 F8 0F		            .word $1000,$0ff8 ; 512k
   525 32AD 01 02 00 20 00 00 +             .byte $01, $02,$00,$20,$00,$00,$00
   526 32B4 52 41 4D 44 35 31 +             .byte 'RAMD512K'
   527 32BC 00 80 22 00 00 00 +             .byte $00,$80,$22,$00,$00,$00,$00,$00
   528 32C4 00 16 00 00 00	            .byte $00,$16,$00,$00,$00
   529
   530 32C9 08 00 00 11 00 00	RDMAIN      .byte $08,$00,$00,$11,$00,$00
   531 32CF 4D 41 49 4E 20 20 +             .byte 'MAIN       '
   532
   533
   534 				; print subroutine            
   535 32DA 68			PRINT       pla
   536 32DB 8D EB 32		            sta PRINTITER+1
   537 32DE 68			            pla
   538 32DF 8D EC 32		            sta PRINTITER+2
   539 32E2 EE EB 32		PRINTLOOP   inc PRINTITER+1
   540 32E5 D0 03		            bne PRINTITER
   541 32E7 EE EC 32		            inc PRINTITER+2
   542 32EA AD FF FF		PRINTITER   lda $FFFF
   543 32ED C9 FF		            cmp #$FF
   544 32EF F0 06		            beq PRINTEND
   545 32F1 20 00 33		            jsr CIOPUTCHR
   546 32F4 4C E2 32		            jmp PRINTLOOP
   547 32F7 AD EC 32		PRINTEND    lda PRINTITER+2
   548 32FA 48			            pha
   549 32FB AD EB 32		            lda PRINTITER+1
   550 32FE 48			            pha
   551 32FF 60			            rts
   552 				; call cio put char subroutine
   553 3300 A2 00		CIOPUTCHR   ldx #$00
   554 3302 8E 48 03		            stx IOCB0+ICBLL
   555 3305 8E 49 03		            stx IOCB0+ICBLH
   556 3308 A0 0B		            ldy #$0B
   557 330A 8C 42 03		            sty IOCB0+ICCOM
   558 330D 4C 56 E4		            jmp CIOV
   559
   560
   561
   562 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   563 				;;; BEGIN OF REALLOC BLOCK
   564 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   565
   566 				; to realloc routines
   567 				; DOSINI set MEMLO at reset
   568 3310			REABEGIN
   569 3310 20 00 00		JSRDOSINI   jsr $0000
   570
   571 3313			SETMEMLO    
   572 3313 A9 85		REAL003     lda #<BNKSAVBUF
   573 3315 8D E7 02		            sta MEMLO
   574 3318 A9 35		REAH003     lda #>BNKSAVBUF
   575 331A 8D E8 02		            sta MEMLO+1
   576 331D 60			            rts
   577
   578 				; new DOSVEC for RAMDISK device
   579 331E AD 00 03		RAMDSIO     lda DDEVIC
   580 3321 C9 31		            cmp #$31
   581 3323 D0 08		            bne JMPSIO
   582 3325 AD 01 03		            lda DUNIT
   583 3328 CD 64 34		REAA004     cmp DRVNUM
   584 332B F0 03		            beq L358A
   585 332D 4C 00 00		JMPSIO      jmp $0000
   586 3330 AE 01 D3		L358A       ldx PORTB           ; save PORTB
   587 3333 78			            sei
   588 3334 A9 00		            lda #$00
   589 3336 8D 0E D4		            sta NMIEN
   590 3339 AD 04 03		            lda DBUFLO
   591 333C 85 34		            sta BFENLO
   592 333E AD 05 03		            lda DBUFHI
   593 3341 85 35		            sta BFENHI
   594 3343 AD 02 03		            lda DCOMND
   595 				            
   596 3346 C9 53		            cmp #$53            ; command STATUS REQUEST 
   597 3348 D0 1B		            bne NEXT1
   598 334A AD 5F 34		REAA009     lda L36BF
   599 334D 4A			            lsr
   600 334E 4A			            lsr
   601 334F 49 30		            eor #$30
   602 3351 AC 5B 34		REAA010     ldy L36BB
   603 3354 C0 1A		            cpy #$1A
   604 3356 D0 02		            bne L35B4
   605 3358 09 80		            ora #$80
   606 335A A0 00		L35B4       ldy #$00
   607 335C 91 34		            sta (BFENLO),Y
   608 335E C8			            iny
   609 335F A9 FF		            lda #$FF
   610 3361 91 34		            sta (BFENLO),Y
   611 3363 30 22		            bmi JMPSIOEND
   612 				            
   613 3365 C9 4E		NEXT1       cmp #$4E            ; command RETURN CONFIGURATION
   614 3367 D0 0C		            bne NEXT2
   615 3369 A0 0B		            ldy #$0B            ; 12 bytes
   616 336B			RETCNFLOOP
   617 336B B9 58 34		REAA011     lda CONFBUF,Y
   618 336E 91 34		            sta (BFENLO),Y
   619 3370 88			            dey
   620 3371 10 F8		            bpl RETCNFLOOP
   621 3373 30 12		            bmi JMPSIOEND
   622 				            
   623 3375 C9 4F		NEXT2       cmp #$4F            ; command SET CONFIGURATION
   624 3377 D0 11		            bne NEXT3
   625 3379 A0 07		            ldy #$07
   626 337B B1 34		            lda (BFENLO),Y
   627 337D 8D 5F 34		REAA012     sta L36BF
   628 3380 A0 03		            ldy #$03
   629 3382 B1 34		            lda (BFENLO),Y
   630 3384 8D 5B 34		REAA013     sta L36BB
   631
   632 3387			JMPSIOEND
   633 3387 4C 47 34		REAA014     jmp RDSIOEND
   634
   635 338A C9 21		NEXT3       cmp #$21            ; command FORMAT DISK
   636 338C D0 0B		            bne NEXT4
   637 338E A0 00		SIOFRMT     ldy #$00
   638 3390 A9 FF		            lda #$FF
   639 3392 91 34		            sta (BFENLO),Y
   640 3394 C8			            iny
   641 3395 91 34		            sta (BFENLO),Y
   642 3397 D0 EE		            bne JMPSIOEND
   643 				            
   644 3399 C9 22		NEXT4       cmp #$22            ; command FORMAT DISK ENHANCED
   645 339B D0 0C		            bne NEXT5
   646 339D A9 1A		            lda #$1A
   647 339F 8D 5B 34		REAA015     sta L36BB
   648 33A2 A9 80		            lda #$80
   649 33A4 8D 5F 34		REAA016     sta L36BF
   650 33A7 D0 E5		            bne SIOFRMT
   651 				            
   652 33A9 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   653 33AB F0 0B		            beq PUTGETSEC
   654 33AD C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   655 33AF F0 07		            beq PUTGETSEC
   656 33B1 C9 50		            cmp #$50            ; command PUT SECTOR
   657 33B3 F0 03		            beq PUTGETSEC
   658 33B5 4C 4A 34		REAA020     jmp RDSIOEND+3      ; error NAK, command not supported
   659
   660 33B8 A9 00		PUTGETSEC   lda #$00
   661 33BA 85 32		            sta BUFRLO
   662 33BC AD 0A 03		            lda DAUX1
   663 33BF 38			            sec
   664 33C0 E9 01		            sbc #$01
   665 33C2 85 33		            sta BUFRHI
   666 33C4 AD 0B 03		            lda DAUX2
   667 33C7 E9 00		            sbc #$00
   668 33C9 06 33		            asl BUFRHI
   669 33CB 2A			            rol
   670 33CC 2C 08 03		            bit DBYTLO
   671 33CF 30 06		            bmi L3631
   672 33D1 0E 5F 34		REAA017     asl L36BF
   673 33D4 06 33		            asl BUFRHI
   674 33D6 2A			            rol
   675 33D7 48			L3631       pha
   676 33D8 A5 33		            lda BUFRHI
   677 33DA 4A			            lsr
   678 33DB 4A			            lsr
   679 33DC 66 32		            ror BUFRLO
   680 33DE 09 40		            ora #$40
   681 33E0 85 33		            sta BUFRHI
   682 				            
   683 33E2 8A			            txa                 ; OS off ???
   684 33E3 29 FE		            and #$FE
   685 33E5 8D 01 D3		            sta PORTB
   686 				            
   687 33E8 AD 02 03		            lda DCOMND
   688 33EB C9 52		            cmp #$52
   689 33ED F0 0D		            beq L3656           ; is PUT
   690 				            
   691 33EF A0 00		            ldy #$00
   692 33F1 B1 34		L364B       lda (BFENLO),Y
   693 33F3 99 85 34		REAA005     sta BUFFERXX1,Y
   694 33F6 C8			            iny
   695 33F7 CC 08 03		            cpy DBYTLO
   696 33FA D0 F5		            bne L364B
   697 				            
   698 33FC 68			L3656       pla                 ; check bank number
   699 33FD CD 57 34		REAA018     cmp BNKCNT
   700 3400 B0 48		            bcs RDSIOEND+3      ; error NAK
   701 3402 A8			            tay
   702 				            
   703 3403 AD 01 D3		            lda PORTB           ; set bank
   704 3406 29 FD		            and #$FD
   705 3408 59 65 34		REAA019     eor BNKSWTMSK,Y
   706 				;REAA022     and PORTBMASK
   707 340B 29 7E		            and #$7E
   708 340D 4D 01 D3		            eor PORTB
   709 3410 8D 01 D3		            sta PORTB
   710 				            
   711 3413 A0 00		            ldy #$00
   712 3415 AD 02 03		            lda DCOMND
   713 3418 C9 52		            cmp #$52
   714 341A D0 20		            bne L369B           ; is PUT
   715 341C B1 32		L367B       lda (BUFRLO),Y
   716 341E 99 85 34		REAA006     sta BUFFERXX1,Y
   717 3421 C8			            iny
   718 3422 CC 08 03		            cpy DBYTLO
   719 3425 D0 F5		            bne L367B
   720 				            
   721 3427 8A			            txa                 ; OS off ???
   722 3428 29 FE		            and #$FE
   723 342A 8D 01 D3		            sta PORTB
   724
   725 342D A0 00		            ldy #$00
   726 342F			L368E
   727 342F B9 85 34		REAA008     lda BUFFERXX1,Y
   728 3432 91 34		            sta (BFENLO),Y
   729 3434 C8			            iny
   730 3435 CC 08 03		            cpy DBYTLO
   731 3438 D0 F5		            bne L368E
   732 343A F0 0B		            beq RDSIOEND
   733 343C			L369B
   734 343C B9 85 34		REAA007     lda BUFFERXX1,Y
   735 343F 91 32		            sta (BUFRLO),Y
   736 3441 C8			            iny
   737 3442 CC 08 03		            cpy DBYTLO
   738 3445 D0 F5		            bne L369B
   739 				            
   740 3447 A0 01		RDSIOEND    ldy #$01
   741 3449 2C A0 8B		            bit $8BA0           ; $2c, ldy #$8b; bank/sector number error #139 NAK
   742
   743 344C 8E 01 D3		            stx PORTB           ; restrore PORTB
   744
   745 344F A9 E0		            lda #$E0
   746 3451 8D 0E D4		            sta NMIEN
   747 3454 58			            cli
   748 3455 98			            tya
   749 3456 60			            rts
   750 				            
   751 3457 00			BNKCNT      .byte $00
   752
   753 				; drive configuration buffer
   754 3458 28 01 12		CONFBUF     .byte $28,$01,$12
   755 345B 00 00 00 00		L36BB       .byte $00,$00,$00,$00
   756 345F 80 FF 00 00 00	L36BF       .byte $80,$FF,$00,$00,$00
   757
   758 3464 01			DRVNUM      .byte $01
   759 3465 60 64 68 6C 20 24 + BNKSWTMSK   .byte $60,$64,$68,$6C,$20,$24,$28,$2C
   760 346D 40 44 48 4C 00 04 +             .byte $40,$44,$48,$4C,$00,$04,$08,$0C
   761 3475 62 66 6A 6E 22 26 +             .byte $62,$66,$6A,$6E,$22,$26,$2A,$2E
   762 347D 42 46 4A 4E 02 06 +             .byte $42,$46,$4A,$4E,$02,$06,$0A,$0E
   763 				;PORTBMASK   .byte $7E
   764
   765 				; $100 Bytes
   766 3485			BUFFERXX1
   767
   768 				;            org $37E6
   769 = 3585			REAEND      = BUFFERXX1 + $100
   770 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   771 				;;; END OF REALLOC BLOCK
   772 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   773
   774
   775 				; $20 Bytes
   776 = 3585			BNKSAVBUF   = REAEND
   777
   778 				; $20 bytes
   779 				;            org $3806
   780 = 35A5			BNKSAVBUF2  = BNKSAVBUF + $20
   781
   782 				 
   783 				;           org $3826
   784 3485			            org BNKSAVBUF2 + $20
   785 				; realloc whole addresses
   786 35C5-36D3> D4 31		REATAB      .word REAA001+1 ;$33CA
   787 35C7 DE 31		            .word REAA002+1 ;$33D4
   788 35C9 E5 31		            .word REAA003+1 ;$33DB
   789 35CB 29 33		            .word REAA004+1 ;$3583
   790 35CD F4 33		            .word REAA005+1 ;$364E
   791 35CF 1F 34		            .word REAA006+1 ;$367E
   792 35D1 3D 34		            .word REAA007+1 ;$369C
   793 35D3 30 34		            .word REAA008+1 ;$368F
   794 35D5 4B 33		            .word REAA009+1 ;$35A5
   795 35D7 52 33		            .word REAA010+1 ;$35AC
   796 35D9 6C 33		            .word REAA011+1 ;$35C6
   797 35DB 7E 33		            .word REAA012+1 ;$35D8
   798 35DD 85 33		            .word REAA013+1 ;$35DF
   799 35DF 88 33		            .word REAA014+1 ;$35E2
   800 35E1 A0 33		            .word REAA015+1 ;$35FA
   801 35E3 A5 33		            .word REAA016+1 ;$35FF
   802 35E5 D2 33		            .word REAA017+1 ;$362C
   803 35E7 FE 33		            .word REAA018+1 ;$365C
   804 35E9 09 34		            .word REAA019+1 ;$3667
   805 35EB B6 33		            .word REAA020+1 ;$3610
   806 				;            .word REAA022+1 ;$366A
   807 35ED 00 00		            .word $0000
   808 				 
   809 				; realloc address low byte           
   810 35EF BB 31		            .word REAL001+1 ;$33B1
   811 35F1 D7 31		            .word REAL002+1 ;$33CD
   812 35F3 14 33		            .word REAL003+1 ;$356E
   813 35F5 00 00		            .word $0000
   814 				; realloc address high byte (address to high byte and value of low byte)
   815 35F7 BF 31		            .word REAH001+1  ;$33B5
   816 35F9 10			            .byte <JSRDOSINI ;$6A
   817 				                        
   818 35FA E1 31		            .word REAH002+1 ;$33D7
   819 35FC 1E			            .byte <RAMDSIO  ;$78
   820 				            
   821 35FD 19 33		            .word REAH003+1  ;$3573
   822 35FF 85			            .byte <BNKSAVBUF ;$E6
   823 				            
   824 3600 00 00		            .word $0000
   825 				            
   826 3602 A9 00		REASTART    lda #$00
   827 3604 8D D4 36		            sta REALOOPCNT
   828 3607 AE D4 36		REALOOP     ldx REALOOPCNT
   829 360A BD C6 36		            lda REATABADR,X
   830 360D 8D AC 36		            sta L3910+1
   831 3610 BD C7 36		            lda REATABADR+1,X
   832 3613 8D AD 36		            sta L3910+2
   833 3616 0D AC 36		            ora L3910+1
   834 3619 D0 01		            bne L3881
   835 361B 60			            rts
   836 				            
   837 361C 38			L3881       sec
   838 361D BD CA 36		            lda READSTADR,X
   839 3620 FD C8 36		            sbc REASRCADR,X
   840 3623 8D D5 36		            sta READIFLO
   841 3626 BD CB 36		            lda READSTADR+1,X
   842 3629 FD C9 36		            sbc REASRCADR+1,X
   843 362C 8D D6 36		            sta READIFHI
   844 				            
   845 362F 20 B7 36		L3894       jsr L391C
   846 3632 F0 13		            beq L38AC
   847 3634 B1 D7		            lda ($D7),Y
   848 3636 18			            clc
   849 3637 6D D5 36		            adc READIFLO
   850 363A 91 D7		            sta ($D7),Y
   851 363C C8			            iny
   852 363D B1 D7		            lda ($D7),Y
   853 363F 6D D6 36		            adc READIFHI
   854 3642 91 D7		            sta ($D7),Y
   855 3644 4C 2F 36		            jmp L3894
   856 3647 20 B7 36		L38AC       jsr L391C
   857 364A F0 0B		            beq L38BC
   858 364C B1 D7		            lda ($D7),Y
   859 364E 18			            clc
   860 364F 6D D5 36		            adc READIFLO
   861 3652 91 D7		            sta ($D7),Y
   862 3654 4C 47 36		            jmp L38AC
   863 3657 20 B7 36		L38BC       jsr L391C
   864 365A F0 11		            beq L38D2
   865 365C 20 AB 36		            jsr L3910
   866 365F 18			            clc
   867 3660 6D D5 36		            adc READIFLO
   868 3663 B1 D7		            lda ($D7),Y
   869 3665 6D D6 36		            adc READIFHI
   870 3668 91 D7		            sta ($D7),Y
   871 366A 4C 57 36		            jmp L38BC
   872 366D AE D4 36		L38D2       ldx REALOOPCNT
   873
   874 3670 BD CC 36		            lda CPYFROMADR,X
   875 3673 8D 8E 36		            sta L38F2+1
   876 3676 BD CD 36		            lda CPYFROMADR+1,X
   877 3679 8D 8F 36		            sta L38F2+2
   878
   879 367C BD D0 36		            lda CPYTOADR,X
   880 367F 8D 91 36		            sta L38F2+4
   881 3682 BD D1 36		            lda CPYTOADR+1,X
   882 3685 8D 92 36		            sta L38F2+5
   883
   884 3688 BC CF 36		            ldy CPYLENGTH+1,X
   885 368B A2 00		            ldx #$00
   886 368D BD FF FF		L38F2       lda $FFFF,X
   887 3690 9D FF FF		            sta $FFFF,X
   888 3693 E8			            inx
   889 3694 D0 F7		            bne L38F2
   890 3696 EE 8F 36		            inc L38F2+2
   891 3699 EE 92 36		            inc L38F2+5
   892 369C 88			            dey
   893 369D 10 EE		            bpl L38F2
   894 369F AD D4 36		            lda REALOOPCNT
   895 36A2 18			            clc
   896 36A3 69 0C		            adc #$0C
   897 36A5 8D D4 36		            sta REALOOPCNT
   898 36A8 4C 07 36		            jmp REALOOP
   899 				            
   900 36AB AD FF FF		L3910       lda $FFFF
   901 36AE EE AC 36		            inc L3910+1
   902 36B1 D0 03		            bne L391B
   903 36B3 EE AD 36		            inc L3910+2
   904 36B6 60			L391B       rts
   905
   906 36B7 20 AB 36		L391C       jsr L3910
   907 36BA 85 D7		            sta $D7
   908 36BC 20 AB 36		            jsr L3910
   909 36BF A0 00		            ldy #$00
   910 36C1 85 D8		            sta $D8
   911 36C3 05 D7		            ora $D7
   912 36C5 60			            rts
   913
   914 				; realloc code pointer
   915 36C6 C5 35		REATABADR   .word REATAB
   916 36C8 10 33		REASRCADR   .word REABEGIN
   917 36CA FF FF		READSTADR   .word $FFFF
   918 				; copy code pointer
   919 36CC 10 33		CPYFROMADR  .word REABEGIN
   920 36CE 75 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
   921 36D0 FF FF		CPYTOADR    .word $FFFF
   922 36D2 00 00		            .word $0000
   923 				            
   924 				; $01 byte
   925 36D4			REALOOPCNT  ;= $392B
   926 = 36D5			READIFLO   = REALOOPCNT+1
   927 = 36D6			READIFHI   = READIFLO+1
   928
   929
   930 				         
