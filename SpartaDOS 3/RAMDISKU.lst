mads 1.9.9
     1 				;
     2 				; Extended RAMDISK for SpartaDOS 3 for U1MB (RAMBO 1088k)
     3 				;
     4 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     5 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     6 				;
     7 				; System equates
     8 				;
     9 				; OS EQUATES
    10 				; ----------
    11 				; 
    12 				; IO EQUATES
    13 				; 
    14 = 0002			ICCOM       = $0002
    15 = 0008			ICBLL       = $0008
    16 = 0009			ICBLH       = $0009
    17 				; 
    18 				; OS VARIABLES FOR XL/XE
    19 				; 
    20 				; PAGE 0
    21 				; 
    22 = 000A			DOSVEC      = $000A
    23 = 000C			DOSINI      = $000C
    24 = 0012			RTCLOK      = $0012
    25 = 0032			BUFRLO      = $0032
    26 = 0033			BUFRHI      = $0033
    27 = 0034			BFENLO      = $0034
    28 = 0035			BFENHI      = $0035
    29 				; 
    30 				; PAGE 2
    31 				; 
    32 = 022F			SDMCTL      = $022F
    33 = 02E7			MEMLO       = $02E7
    34 				; 
    35 				; PAGE 3
    36 				; 
    37 = 0300			DDEVIC      = $0300
    38 = 0301			DUNIT       = $0301
    39 = 0302			DCOMND      = $0302
    40 = 0304			DBUFLO      = $0304
    41 = 0305			DBUFHI      = $0305
    42 = 0308			DBYTLO      = $0308
    43 = 0309			DBYTHI      = $0309
    44 = 030A			DAUX1       = $030A
    45 = 030B			DAUX2       = $030B
    46 = 0340			IOCB0       = $0340
    47 				; 
    48 				; PIA
    49 				; 
    50 = D300			PORTA       = $D300
    51 = D301			PORTB       = $D301
    52 = D302			PACTL       = $D302
    53 = D303			PBCTL       = $D303
    54 				; 
    55 				; ANTIC
    56 				; 
    57 = D40E			NMIEN       = $D40E
    58 				; 
    59 				; ROM VECTORS
    60 				; 
    61 = E456			CIOV        = $E456
    62 				;
    63 				; SpartaDOS 
    64 				;
    65 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    66 = 003F			SD_LBUF        = $3F ; offset to line buffer
    67 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    68 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    69 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    70
    71 				;        PORTB $D301 XE
    72 				;        
    73 				;        0 - OS ROM on=1 off=0
    74 				;        1 - BASIC  on=0 off=1
    75 				;        2 - Bank-Switch
    76 				;        3 - Bank-Switch
    77 				;        4 - CPU-Switch   off=1 on=0
    78 				;        5 - ANTIC-Switch off=1 on=0
    79 				;        6 - unsued
    80 				;        7 - Self-Test on=1 off=0
    81 				;        
    82 				;        Mask 7E PORTBMASK
    83 				;        0111 1110
    84 				;        
    85 				;        Mask FD
    86 				;        1111 1101
    87 				;        
    88 				;        Mask FD
    89 				;        1111 1110
    90 				;        
    91 				;        Bank Switch
    92 				;        
    93 				;        format
    94 				;        lda bnkswtmsk  0110.0000
    95 				;        eor portb.     0000.0011 -> 0110.0011
    96 				;        and #$7e       0111.1110 -> 0110.0010
    97 				;        eor portb.     0000.0011 -> 0110.0001
    98 				;        
    99 				;        BNKSWTMSK
   100 				;        $60 - 0110 0000
   101 				;        $64 - 0110 0100
   102 				;        $68 - 0110 1000
   103 				;        $6C - 0110 1100
   104 				;        
   105 				;        $20 - 0010 0000
   106 				;        $24 - 0010 0100
   107 				;        $28 - 0010 1000
   108 				;        $2C - 0010 1100
   109 				;        
   110 				;        $40 - 0100 0000
   111 				;        $44 - 0100 0100
   112 				;        $48 - 0100 1000
   113 				;        $4C - 0100 1100
   114 				;        
   115 				;        $00 - 0000 0000
   116 				;        $04 - 0000 0100
   117 				;        $08 - 0000 1000
   118 				;        $0C - 0000 1100
   119 				;        
   120 				;        $62 - 0110 0010
   121 				;        $66 - 0110 0110
   122 				;        $6A - 0110 1010
   123 				;        $6E - 0110 1110
   124 				;        
   125 				;        $22 - 0010 0010
   126 				;        $26 - 0010 0110
   127 				;        $2A - 0010 1010
   128 				;        $2E - 0010 1110
   129 				;        
   130 				;        $42 - 0100 0010
   131 				;        $46 - 0100 0110
   132 				;        $4A - 0100 1010
   133 				;        $4E - 0100 1110
   134 				;        
   135 				;        $02 - 0000 0010
   136 				;        $06 - 0000 0110
   137 				;        $0A - 0000 1010
   138 				;        $0E - 0000 1110
   139
   140
   141
   142
   143 				;
   144 				; Start of code
   145 				;
   146 				            org $3000
   147
   148 				; save PIA PORT B
   149 FFFF> 3000-3651> AD 01 +             lda PORTB
   150 3003 48			            pha
   151
   152 				; switch off interrupts
   153 3004 78			            sei
   154 3005 A9 00		            lda #$00
   155 3007 8D 0E D4		            sta NMIEN
   156 				            
   157 				; try to save and write banks            
   158 300A A2 3F		            ldx #$3F
   159 300C BD 12 36		BNKSAVWRT   lda BNKSWTMSK,X
   160 300F 8D 01 D3		            sta PORTB
   161 3012 AD 00 70		            lda $7000
   162 3015 9D 52 37		            sta BNKSAVBUF,X
   163 3018 BD 12 36		            lda BNKSWTMSK,X
   164 301B 8D 00 70		            sta $7000
   165 301E AD 01 70		            lda $7001
   166 3021 9D 92 37		            sta BNKSAVBUF2,X
   167 3024 BD 12 36		            lda BNKSWTMSK,X
   168 3027 0A			            asl
   169 3028 8D 01 70		            sta $7001
   170 302B CA			            dex
   171 302C 10 DE		            bpl BNKSAVWRT
   172 				            
   173 				; check banks
   174 302E E8			BNKCHK      inx
   175 302F BD 12 36		            lda BNKSWTMSK,X
   176 3032 8D 01 D3		            sta PORTB
   177 3035 BD 12 36		            lda BNKSWTMSK,X
   178 3038 CD 00 70		            cmp $7000
   179 303B D0 0E		            bne BNKSTOP
   180 303D BD 12 36		            lda BNKSWTMSK,X
   181 3040 0A			            asl
   182 3041 CD 01 70		            cmp $7001
   183 3044 D0 05		            bne BNKSTOP
   184 3046 E0 3F		            cpx #$3F
   185 3048 D0 E4		            bne BNKCHK
   186 304A E8			            inx
   187 304B 8E 03 36		BNKSTOP     stx BNKCNT
   188
   189 				; restore banks
   190 304E A2 00		            ldx #$00
   191 3050 BD 12 36		BNKRESTR    lda BNKSWTMSK,X
   192 3053 8D 01 D3		            sta PORTB
   193 3056 BD 52 37		            lda BNKSAVBUF,X
   194 3059 8D 00 70		            sta $7000
   195 305C BD 92 37		            lda BNKSAVBUF2,X
   196 305F 8D 01 70		            sta $7001
   197 3062 E8			            inx
   198 3063 E0 40		            cpx #$40
   199 3065 D0 E9		            bne BNKRESTR
   200
   201 				; restore PIA PORT B
   202 3067 68			            pla
   203 3068 8D 01 D3		            sta PORTB
   204
   205 				; enable interrupts
   206 306B A9 E0		            lda #$E0
   207 306D 8D 0E D4		            sta NMIEN
   208 3070 58			            cli
   209
   210 				; info message
   211 3071 20 95 34		            jsr PRINT
   212 3074 52 44 20 20 56 65 +             .byte 'RD  Ver 2.4 U1MB/1088k by HJX vers43',$9B
   213 3099 20 28 43 29 20 31 +             .byte ' (C) 1986 ICD Inc.',$9B,$9B,$FF
   214
   215 30AE 20 95 34		            jsr PRINT
   216 30B1 43 6F 6D 70 75 74 +             .byte 'Computer is: ',$FF
   217
   218 				; check bank count
   219 30BF AE 03 36		            ldx BNKCNT
   220 30C2 E0 04		            cpx #$04
   221 30C4 90 1D		            bcc EXT_NO
   222 30C6 D0 4A		            bne EXT_192
   223 30C8 20 95 34		            jsr PRINT
   224 30CB 31 32 38 4B 20 2D +             .byte '128K - 130XE  (64K)',$9B,$FF
   225 30E0 4C B4 31		            jmp EXT_END
   226
   227 				; no banks            
   228 30E3 20 95 34		EXT_NO      jsr PRINT
   229 30E6 38 30 30 58 4C 20 +             .byte '800XL unmodified',$9B
   230 30F7 2D 2D 20 4E 6F 20 +             .byte '-- No RAM Disk Installed',$9B,$FF
   231 3111 60			            rts
   232 				            
   233 3112 E0 0C		EXT_192     cpx #$0C
   234 3114 F0 1E		            beq EXT_256
   235 3116 B0 3C		            bcs EXT_320
   236 3118 20 95 34		            jsr PRINT
   237 311B 31 39 32 4B 20 2D +             .byte '192K - 130XE  (128K)',$9B,$FF
   238 3131 4C B4 31		            jmp EXT_END
   239
   240 3134 20 95 34		EXT_256     jsr PRINT
   241 3137 32 35 36 4B 20 2D +             .byte '256K - 800/1200XL (192K)',$9B,$FF
   242 3151 4C B4 31		            jmp EXT_END
   243 				            
   244 3154 E0 10		EXT_320     cpx #$10
   245 3156 D0 1C		            bne EXT_576
   246 3158 20 95 34		            jsr PRINT
   247 315B 33 32 30 4B 20 2D +             .byte '320K - 130XE  (256K)',$9B,$FF
   248 3171 4C B4 31		            jmp EXT_END
   249 				            
   250 3174 E0 20		EXT_576     cpx #$20
   251 3176 D0 1B		            bne EXT_1088     
   252 3178 20 95 34		            jsr PRINT
   253 317B 35 37 36 4B 20 2D +             .byte '576K - 130XE (512K)',$9B,$FF
   254 3190 4C B4 31		            jmp EXT_END
   255
   256 3193 E0 40		EXT_1088    cpx #$40
   257 3195 F0 03		            beq EXT_1088EQ
   258 3197 4C E3 30		            jmp EXT_NO
   259 319A 20 95 34		EXT_1088EQ  jsr PRINT
   260 319D 31 30 38 38 4B 20 +             .byte '1088K - 130XE (1024K)',$9B,$FF
   261
   262 				; check for parameter
   263 31B4 A0 0A		EXT_END     ldy #SD_BUFOFF
   264 31B6 B1 0A		            lda (DOSVEC),Y
   265 31B8 18			            clc
   266 31B9 69 3F		            adc #SD_LBUF
   267 31BB A8			            tay
   268 31BC B1 0A		            lda (DOSVEC),Y
   269 31BE C9 9B		            cmp #$9B
   270 31C0 D0 27		            bne PRSPARM
   271 				            
   272 				; no parameter -> error
   273 31C2 20 95 34		            jsr PRINT
   274 31C5 2D 2D 20 4E 6F 20 +             .byte '-- No Drive Number Specified',$9B,$FF
   275 31E3 60			            rts
   276
   277 				; jump for jsr to crunch name
   278 31E4 4C FF FF		CRNAME      jmp $FFFF
   279
   280 31E7 FF			CHKFRMT     .byte $FF
   281 31E8 00			RDBNKCNT    .byte $00
   282
   283 				; set crunch name address
   284 31E9 A5 0A		PRSPARM     lda DOSVEC
   285 31EB 18			            clc
   286 31EC 69 03		            adc #SD_ZCRNAME
   287 31EE 8D E5 31		            sta CRNAME+1
   288 31F1 A5 0B		            lda DOSVEC+1
   289 31F3 69 00		            adc #$00
   290 31F5 8D E6 31		            sta CRNAME+2
   291 				            
   292 				; parameter parsing            
   293 				; get drive number SD_COMFNAM starts alway with Dx:
   294 31F8 20 E4 31		            jsr CRNAME
   295 31FB D0 32		            bne PARAMERR
   296 31FD A0 22		            ldy #SD_COMFNAM+1
   297 31FF B1 0A		            lda (DOSVEC),Y
   298 3201 29 0F		            and #$0F
   299 3203 8D 11 36		            sta DRVNUM
   300 				; check options /EN
   301 3206 20 E4 31		            jsr CRNAME
   302 3209 F0 3C		            beq PRSPAREND
   303 320B A0 24		            ldy #SD_COMFNAM+3
   304 320D B1 0A		            lda (DOSVEC),Y
   305 320F C9 2F		            cmp #'/'
   306 3211 D0 1C		            bne PARAMERR
   307 3213 C8			PRSPARLOOP  iny
   308 3214 B1 0A		            lda (DOSVEC),Y
   309 3216 C9 9B		            cmp #$9B
   310 3218 F0 2D		            beq PRSPAREND
   311 321A C9 45		            cmp #'E'
   312 321C D0 07		            bne PRSPARNXT
   313 				; save 4 banks for 130XE compatibilty
   314 321E A9 04		            lda #$04
   315 3220 8D 04 36		            sta SPARBNKS
   316 3223 D0 EE		            bne PRSPARLOOP
   317 3225 C9 4E		PRSPARNXT   cmp #'N'
   318 3227 D0 06		            bne PARAMERR
   319 				; check format at startup to preserve existing RAM disk            
   320 3229 EE E7 31		            inc CHKFRMT
   321 322C 4C 13 32		            jmp PRSPARLOOP
   322 322F 20 95 34		PARAMERR    jsr PRINT
   323 3232 2D 2D 20 50 61 72 +             .byte '-- Parameter Error',$9B,$FF
   324 3246 60			            rts
   325
   326 				; set jsr to original DOSINI
   327 3247 A5 0C		PRSPAREND   lda DOSINI
   328 3249 8D CC 34		            sta JSRDOSINI+1
   329 324C A5 0D		            lda DOSINI+1
   330 324E 8D CD 34		            sta JSRDOSINI+2
   331
   332 				; check for spare banks
   333 3251 AD 04 36		            lda SPARBNKS
   334 3254 F0 51		            beq NOSPARBNK
   335 3256 AD 03 36		            lda BNKCNT
   336 3259 C9 04		            cmp #$04
   337 325B D0 27		            bne BNKCNTOK
   338 325D 20 95 34		            jsr PRINT
   339 3260 45 72 72 6F 72 20 +             .byte 'Error -- No Extra RAM For RAMDISK',$9B,$FF
   340 3283 60			            rts
   341 				; message if banks are reserved
   342 3284 20 95 34		BNKCNTOK    jsr PRINT
   343 3287 3C 52 41 4D 44 49 +             .byte '<RAMDISK Uses 64K Less Memory>',$9B,$FF
   344
   345 				; set MEMLO oldaddress, realloc
   346 32A7 AD E7 02		NOSPARBNK   lda MEMLO
   347 32AA 8D 84 05		            sta READSTADR
   348 32AD 8D 8A 05		            sta CPYTOADR
   349 32B0 AD E8 02		            lda MEMLO+1
   350 32B3 8D 85 05		            sta READSTADR+1
   351 32B6 8D 8B 05		            sta CPYTOADR+1
   352 				;
   353 				; start realloc
   354 				;
   355 32B9 20 11 38		            jsr REASTART
   356
   357 				; set new DOSINI            
   358 32BC A9 CB		REAL001     lda #<JSRDOSINI
   359 32BE 85 0C		            sta DOSINI
   360 32C0 A9 34		REAH001     lda #>JSRDOSINI
   361 32C2 85 0D		            sta DOSINI+1
   362 				; get SIO and patch for RAMDISK
   363 32C4 38			            sec
   364 32C5 A5 0A		            lda DOSVEC
   365 32C7 E9 0A		            sbc #SD_LSIO
   366 32C9 85 32		            sta BUFRLO
   367 32CB A5 0B		            lda DOSVEC+1
   368 32CD E9 00		            sbc #$00
   369 32CF 85 33		            sta BUFRHI
   370 32D1 A0 00		            ldy #$00
   371 32D3 B1 32		            lda (BUFRLO),Y
   372 32D5 8D E9 34		REAA001     sta JMPSIO+1      ;realloc $33CA
   373 32D8 A9 D9		REAL002     lda #<RAMDSIO
   374 32DA 91 32		            sta (BUFRLO),Y
   375 32DC C8			            iny
   376 32DD B1 32		            lda (BUFRLO),Y
   377 32DF 8D EA 34		REAA002     sta JMPSIO+2      ;realloc $33D4
   378 32E2 A9 34		REAH002     lda #>RAMDSIO
   379 32E4 91 32		            sta (BUFRLO),Y
   380 				; set MEMLO            
   381 32E6 20 CE 34		REAA003     jsr SETMEMLO      ;realloc $33DB
   382 				; format if requested            
   383 32E9 2C E7 31		            bit CHKFRMT
   384 32EC 30 01		            bmi FRMTRD
   385 32EE 60			            rts
   386
   387 				; format ramdisk
   388 32EF 20 95 34		FRMTRD      jsr PRINT
   389 32F2 20 20 20 3C 52 41 +             .byte '   <RAM Disk Formatted>',$9B,$FF
   390 				; switch off interrupts
   391 330B 78			            sei
   392 330C A9 00		            lda #$00
   393 330E 8D 0E D4		            sta NMIEN
   394 				; switch bank
   395 3311 AD 01 D3		            lda PORTB
   396 3314 48			            pha
   397 3315 AE 04 36		            ldx SPARBNKS
   398 3318 BD 12 36		            lda BNKSWTMSK,X
   399 331B 8D 01 D3		            sta PORTB
   400 				; clear loop
   401 331E A9 00		            lda #$00
   402 3320 A8			            tay
   403 3321 99 00 40		FRMTCLP     sta $4000,Y
   404 3324 99 00 41		            sta $4100,Y
   405 3327 99 00 42		            sta $4200,Y
   406 332A 99 00 43		            sta $4300,Y
   407 332D 99 00 44		            sta $4400,Y
   408 3330 99 00 45		            sta $4500,Y
   409 3333 C8			            iny
   410 3334 D0 EB		            bne FRMTCLP
   411 				; header loop            
   412 3336 A0 2A		            ldy #$2A
   413 3338 B9 6A 34		FRMTHLP     lda RDHEAD,Y
   414 333B 99 00 40		            sta $4000,Y
   415 333E 88			            dey
   416 333F 10 F7		            bpl FRMTHLP
   417 				; calc banks for ramdisk            
   418 3341 AD 03 36		            lda BNKCNT
   419 3344 38			            sec
   420 3345 ED 04 36		            sbc SPARBNKS
   421 3348 AA			            tax
   422 3349 8E E8 31		            stx RDBNKCNT
   423 				; set size loop
   424 334C A0 00		            ldy #$00
   425 334E BD D5 33		FRMTSLP     lda RDSIZE-4,X
   426 3351 99 0B 40		            sta $400B,Y       ; total number of sectors on the disk
   427 3354 E8			            inx               ; and number of free sectors on the disk
   428 3355 C8			            iny
   429 3356 C0 04		            cpy #$04
   430 3358 D0 F4		            bne FRMTSLP
   431 				; set free sector VTOC             
   432 335A AD E8 31		            lda RDBNKCNT
   433 335D 4A			            lsr
   434 335E 4A			            lsr
   435 335F AA			            tax
   436 3360 20 CC 33		FRMTVTOCLP  jsr L34AB
   437 3363 AD D1 33		            lda L34AF+1
   438 3366 18			            clc
   439 3367 69 40		            adc #$40
   440 3369 8D D1 33		            sta L34AF+1
   441 336C AD D2 33		            lda L34AF+2
   442 336F 69 00		            adc #$00
   443 3371 8D D2 33		            sta L34AF+2
   444 3374 CA			            dex
   445 3375 D0 E9		            bne FRMTVTOCLP
   446 				; set sector numbers in boot sector and correct VTOC
   447 3377 AE E8 31		            ldx RDBNKCNT
   448 337A BD 15 34		            lda RDMAPSZ-4,X
   449 337D 8D 0F 40		            sta $400F     	; number of bit map sectors used on the disk
   450 3380 18			            clc
   451 3381 69 02		            adc #$02
   452 3383 8D 09 40		            sta $4009     	; first sector map of the MAIN directory
   453 				; correct free sector map
   454 3386 E0 20		            cpx #$20		; more then $20 banks (512k) adjust tow bytes
   455 3388 B0 09		            bcs FMTMT512
   456 338A BD 16 34		            lda RDMAPSZ-3,X 
   457 338D 8D 80 40		            sta $4080
   458 3390 4C 9E 33		            jmp FMTLT512
   459 3393 A9 00		FMTMT512    lda #$00
   460 3395 8D 80 40		            sta $4080
   461 3398 BD 16 34		            lda RDMAPSZ-3,X 
   462 339B 8D 81 40		            sta $4081
   463 339E			FMTLT512
   464 				; calc adress for VTOC            
   465 339E BD 17 34		            lda RDMAPSZ-2,X
   466 33A1 85 32		            sta BUFRLO
   467 33A3 BD 18 34		            lda RDMAPSZ-1,X
   468 33A6 85 33		            sta BUFRHI   
   469 33A8 18			            clc
   470 33A9 A0 04		            ldy #$04
   471 33AB AD 09 40		            lda $4009
   472 33AE 69 01		            adc #$01
   473 33B0 91 32		            sta (BUFRLO),Y
   474 				; create MAIN directory
   475 33B2 A2 00		            ldx #$00
   476 33B4 A0 80		            ldy #$80
   477 33B6 BD 59 34		L349B       lda RDMAIN,X
   478 33B9 91 32		            sta (BUFRLO),Y
   479 33BB E8			            inx
   480 33BC C8			            iny
   481 33BD E0 11		            cpx #$11
   482 33BF D0 F5		            bne L349B
   483 				; restore PORTB
   484 33C1 68			            pla
   485 33C2 8D 01 D3		            sta PORTB
   486 				; enable interrupts
   487 33C5 A9 E0		            lda #$E0
   488 33C7 8D 0E D4		            sta NMIEN
   489 33CA 58			            cli
   490 33CB 60			            rts
   491 				; set VTOC            
   492 33CC A0 00		L34AB       ldy #$00
   493 33CE A9 FF		            lda #$FF
   494 33D0 99 80 40		L34AF       sta $4080,Y
   495 33D3 C8			            iny
   496 33D4 C0 40		            cpy #$40
   497 33D6 D0 F8		            bne L34AF
   498 33D8 60			            rts
   499
   500 				;                 total, free number of sectors
   501 33D9 00 02 FB 01		RDSIZE      .word $0200,$01FB ; 64k
   502 33DD 00 04 FB 03		            .word $0400,$03FB ; 128k
   503 33E1 00 06 FA 05		            .word $0600,$05FA ; 192k
   504 33E5 00 08 FA 07		            .word $0800,$07FA ; 256k
   505 33E9 00 0A F9 09		            .word $0A00,$09F9 ; 320k
   506 33ED 00 0C F9 0B		            .word $0C00,$0BF9 ; 384k
   507 33F1 00 0E F8 0D		            .word $0E00,$0DF8 ; 448k
   508 33F5 00 10 F8 0F		            .word $1000,$0ff8 ; 512k
   509 				; extension for 1088k
   510 33F9 00 00 00 00		            .word $0000,$0000 ; dummy
   511 33FD 00 00 00 00		            .word $0000,$0000 ; dummy
   512 3401 00 00 00 00		            .word $0000,$0000 ; dummy
   513 3405 00 00 00 00		            .word $0000,$0000 ; dummy
   514 3409 00 00 00 00		            .word $0000,$0000 ; dummy
   515 340D 00 00 00 00		            .word $0000,$0000 ; dummy
   516 3411 00 1E F4 1D		            .word $1E00,$1DF4 ; 1024-64=960k reserve 4 banks (130XE)
   517 3415 00 20 F4 1F		            .word $2000,$1ff4 ; 1024k
   518
   519 3419 01 07		RDMAPSZ     .byte $01,$07       ; 64k
   520 341B 00 41		            .word $4100
   521 				            
   522 341D 01 07		            .byte $01,$07       ; 128k
   523 341F 00 41		            .word $4100
   524 				            
   525 3421 02 03		            .byte $02,$03       ; 192k
   526 3423 80 41		            .word $4180
   527 				            
   528 3425 02 03		            .byte $02,$03       ; 256k
   529 3427 80 41		            .word $4180
   530 				            
   531 3429 03 01		            .byte $03,$01       ; 320k
   532 342B 00 42		            .word $4200
   533 				            
   534 342D 03 01		            .byte $03,$01       ; 384k
   535 342F 00 42		            .word $4200
   536 				            
   537 3431 04 00		            .byte $04,$00       ; 448k
   538 3433 80 42		            .word $4280
   539 				            
   540 3435 04 00		            .byte $04,$00       ; 512k
   541 3437 80 42		            .word $4280
   542
   543 				; extension for 1088k
   544 3439 00 00		            .byte $00,$00       ; dummy
   545 343B 00 00		            .word $0000
   546
   547 343D 00 00		            .byte $00,$00       ; dummy
   548 343F 00 00		            .word $000
   549
   550 3441 00 00		            .byte $00,$00       ; dummy
   551 3443 00 00		            .word $0000
   552
   553 3445 00 00		            .byte $00,$00       ; dummy
   554 3447 00 00		            .word $0000
   555
   556 3449 00 00		            .byte $00,$00       ; dummy
   557 344B 00 00		            .word $0000
   558
   559 344D 00 00		            .byte $00,$00       ; dummy
   560 344F 00 00		            .word $0000
   561
   562 3451 08 0F		            .byte $08,$0F       ; 1024-64=960k reserve 4 banks (130XE)
   563 3453 80 44		            .word $4480
   564
   565 3455 08 0F		            .byte $08,$0F       ; 1024k 
   566 3457 80 44		            .word $4480
   567
   568 3459 08			RDMAIN      .byte $08			; ???
   569 345A 00 00					.byte $00,$00		; Sector number of the parent directory, $00 this is root
   570 345C 11 00 00					.byte $11,$00,$00	; Length of the directory in bytes
   571 345F 4D 41 49 4E 20 20 +             .byte 'MAIN       '	; Name of the directory padded with spaces (8 bytes)
   572
   573 346A 00			RDHEAD      .byte $00			; Usually 0. Some formatting tools put a $53 (='S) for SD here
   574 346B 03						.byte $03			; Number of sectors to boot
   575 346C 00 07					.byte $00,$07		; Address where the boot sectors are loaded to
   576 346E E0 07					.byte $E0,$07		; This address is copied to DOSINI. 2 bytes
   577 3470 4C 80 30					.byte $4C,$80,$30	; execution to code beginning jmp $3080
   578 3473 03 00		            .byte $03,$00		; Sector number of the first sector map of the MAIN directory
   579 3475 00 04		            .byte $00,$04		; Total number of sectors on the disk
   580 3477 FB 03		            .byte $FB,$03		; Number of free sectors on the disk
   581 3479 01			            .byte $01			; Number of bit map sectors on the disk
   582 347A 02 00		            .byte $02,$00		; Sector number of the first bit map sector
   583 347C 20 00		            .byte $20,$00		; Sector number to begin the file data sector allocation search
   584 347E 00 00		            .byte $00,$00		; Sector number to begin the directory data sector allocation search
   585 3480 52 41 4D 44 49 53 +             .byte 'RAMDISKU'	; Disk volume name, 8 chars
   586 3488 00			            .byte $00			; Number of tracks on the disk, $00 for ramdisk or HD
   587 3489 80			            .byte $80			; Size of the sectors on this disk, $00 = 256 Byte
   588 348A 22			            .byte $22			; File system revision number of the disk format
   589 348B 00 00 00 00 00	            .byte $00,$00,$00,$00,$00; reserved - no known usage
   590 3490 00			            .byte $00			; Volume sequence number
   591 3491 16			            .byte $16			; Volume random number
   592 3492 00 00		            .byte $00,$00		; Sector number of the first sector map of the file to be loaded when the disk is booted
   593 3494 00			            .byte $00			; This is the write LOCK flag, $FF locked, $00 unlocked
   594
   595
   596 				; print subroutine            
   597 3495 68			PRINT       pla
   598 3496 8D A6 34		            sta PRINTITER+1
   599 3499 68			            pla
   600 349A 8D A7 34		            sta PRINTITER+2
   601 349D EE A6 34		PRINTLOOP   inc PRINTITER+1
   602 34A0 D0 03		            bne PRINTITER
   603 34A2 EE A7 34		            inc PRINTITER+2
   604 34A5 AD FF FF		PRINTITER   lda $FFFF
   605 34A8 C9 FF		            cmp #$FF
   606 34AA F0 06		            beq PRINTEND
   607 34AC 20 BB 34		            jsr CIOPUTCHR
   608 34AF 4C 9D 34		            jmp PRINTLOOP
   609 34B2 AD A7 34		PRINTEND    lda PRINTITER+2
   610 34B5 48			            pha
   611 34B6 AD A6 34		            lda PRINTITER+1
   612 34B9 48			            pha
   613 34BA 60			            rts
   614 				; call cio put char subroutine
   615 34BB A2 00		CIOPUTCHR   ldx #$00
   616 34BD 8E 48 03		            stx IOCB0+ICBLL
   617 34C0 8E 49 03		            stx IOCB0+ICBLH
   618 34C3 A0 0B		            ldy #$0B
   619 34C5 8C 42 03		            sty IOCB0+ICCOM
   620 34C8 4C 56 E4		            jmp CIOV
   621
   622
   623
   624 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   625 				;;; BEGIN OF REALLOC BLOCK
   626 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627
   628 				; to realloc routines
   629 				; DOSINI set MEMLO at reset
   630 34CB			REABEGIN
   631 34CB 20 00 00		JSRDOSINI   jsr $0000
   632
   633 34CE			SETMEMLO    
   634 34CE A9 52		REAL003     lda #<BNKSAVBUF
   635 34D0 8D E7 02		            sta MEMLO
   636 34D3 A9 37		REAH003     lda #>BNKSAVBUF
   637 34D5 8D E8 02		            sta MEMLO+1
   638 34D8 60			            rts
   639 				; new DOSVEC for RAMDISK device
   640 34D9 AD 00 03		RAMDSIO     lda DDEVIC
   641 34DC C9 31		            cmp #$31
   642 34DE D0 08		            bne JMPSIO
   643 34E0 AD 01 03		            lda DUNIT
   644 34E3 CD 11 36		REAA004     cmp DRVNUM
   645 34E6 F0 03		            beq L358A
   646 34E8 4C 00 00		JMPSIO      jmp $0000
   647 34EB AE 01 D3		L358A       ldx PORTB
   648 34EE 78			            sei
   649 34EF A9 00		            lda #$00
   650 34F1 8D 0E D4		            sta NMIEN
   651 34F4 AD 04 03		            lda DBUFLO
   652 34F7 85 34		            sta BFENLO
   653 34F9 AD 05 03		            lda DBUFHI
   654 34FC 85 35		            sta BFENHI
   655 34FE AD 02 03		            lda DCOMND
   656 				            
   657 3501 C9 53		            cmp #$53            ; command STATUS REQUEST 
   658 3503 D0 1B		            bne NEXT1
   659 3505 AD 0C 36		REAA009     lda L36BF
   660 3508 4A			            lsr
   661 3509 4A			            lsr
   662 350A 49 30		            eor #$30
   663 350C AC 08 36		REAA010     ldy L36BB
   664 350F C0 1A		            cpy #$1A
   665 3511 D0 02		            bne L35B4
   666 3513 09 80		            ora #$80
   667 3515 A0 00		L35B4       ldy #$00
   668 3517 91 34		            sta (BFENLO),Y
   669 3519 C8			            iny
   670 351A A9 FF		            lda #$FF
   671 351C 91 34		            sta (BFENLO),Y
   672 351E 30 22		            bmi JMPSIOEND
   673 				            
   674 3520 C9 4E		NEXT1       cmp #$4E            ; command RETURN CONFIGURATION
   675 3522 D0 0C		            bne NEXT2
   676 3524 A0 0B		            ldy #$0B            ; 12 bytes
   677 3526			RETCNFLOOP
   678 3526 B9 05 36		REAA011     lda CONFBUF,Y
   679 3529 91 34		            sta (BFENLO),Y
   680 352B 88			            dey
   681 352C 10 F8		            bpl RETCNFLOOP
   682 352E 30 12		            bmi JMPSIOEND
   683 				            
   684 3530 C9 4F		NEXT2       cmp #$4F            ; command SET CONFIGURATION
   685 3532 D0 11		            bne NEXT3
   686 3534 A0 07		            ldy #$07
   687 3536 B1 34		            lda (BFENLO),Y
   688 3538 8D 0C 36		REAA012     sta L36BF
   689 353B A0 03		            ldy #$03
   690 353D B1 34		            lda (BFENLO),Y
   691 353F 8D 08 36		REAA013     sta L36BB
   692
   693 3542			JMPSIOEND
   694 3542 4C F3 35		REAA014     jmp RDSIOEND
   695
   696 3545 C9 21		NEXT3       cmp #$21            ; command FORMAT DISK
   697 3547 D0 0B		            bne NEXT4
   698 3549 A0 00		SIOFRMT     ldy #$00
   699 354B A9 FF		            lda #$FF
   700 354D 91 34		            sta (BFENLO),Y
   701 354F C8			            iny
   702 3550 91 34		            sta (BFENLO),Y
   703 3552 D0 EE		            bne JMPSIOEND
   704 				            
   705 3554 C9 22		NEXT4       cmp #$22            ; command FORMAT DISK ENHANCED
   706 3556 D0 0C		            bne NEXT5
   707 3558 A9 1A		            lda #$1A
   708 355A 8D 08 36		REAA015     sta L36BB
   709 355D A9 80		            lda #$80
   710 355F 8D 0C 36		REAA016     sta L36BF
   711 3562 D0 E5		            bne SIOFRMT
   712 				            
   713 3564 C9 52		NEXT5       cmp #$52            ; command GET SECTOR
   714 3566 F0 0B		            beq PUTGETSEC
   715 3568 C9 57		            cmp #$57            ; command PUT SECTOR WITH VERIFY
   716 356A F0 07		            beq PUTGETSEC
   717 356C C9 50		            cmp #$50            ; command PUT SECTOR
   718 356E F0 03		            beq PUTGETSEC
   719 3570 4C F6 35		REAA020     jmp RDSIOEND+3
   720
   721 3573 A9 00		PUTGETSEC   lda #$00
   722 3575 85 32		            sta BUFRLO
   723 3577 AD 0A 03		            lda DAUX1
   724 357A 38			            sec
   725 357B E9 01		            sbc #$01
   726 357D 85 33		            sta BUFRHI
   727 357F AD 0B 03		            lda DAUX2
   728 3582 E9 00		            sbc #$00
   729 3584 06 33		            asl BUFRHI
   730 3586 2A			            rol
   731 3587 2C 08 03		            bit DBYTLO
   732 358A 30 06		            bmi L3631
   733 358C 0E 0C 36		REAA017     asl L36BF
   734 358F 06 33		            asl BUFRHI
   735 3591 2A			            rol
   736 3592 48			L3631       pha
   737 3593 A5 33		            lda BUFRHI
   738 3595 4A			            lsr
   739 3596 4A			            lsr
   740 3597 66 32		            ror BUFRLO
   741 3599 09 40		            ora #$40
   742 359B 85 33		            sta BUFRHI
   743 				            
   744 359D AD 02 03		            lda DCOMND
   745 35A0 C9 52		            cmp #$52
   746 35A2 F0 0D		            beq L3656
   747 				            
   748 35A4 A0 00		            ldy #$00
   749 35A6 B1 34		L364B       lda (BFENLO),Y
   750 35A8 99 52 36		REAA005     sta BUFFERXX1,Y
   751 35AB C8			            iny
   752 35AC CC 08 03		            cpy DBYTLO
   753 35AF D0 F5		            bne L364B
   754 				; check bank number
   755 35B1 68			L3656       pla
   756 35B2 18			            clc
   757 35B3 6D 04 36		REAA021     adc SPARBNKS
   758 35B6 CD 03 36		REAA018     cmp BNKCNT
   759 35B9 B0 3B		            bcs RDSIOEND+3
   760 				; switch bank            
   761 35BB A8			            tay
   762 35BC B9 12 36		REAA019     lda BNKSWTMSK,Y
   763 35BF 8D 01 D3		            sta PORTB
   764 				            
   765 35C2 A0 00		            ldy #$00
   766 35C4 AD 02 03		            lda DCOMND
   767 35C7 C9 52		            cmp #$52
   768 35C9 D0 1D		            bne L369B
   769 				            
   770 35CB B1 32		L367B       lda (BUFRLO),Y
   771 35CD 99 52 36		REAA006     sta BUFFERXX1,Y
   772 35D0 C8			            iny
   773 35D1 CC 08 03		            cpy DBYTLO
   774 35D4 D0 F5		            bne L367B
   775 				; restore bank
   776 35D6 8E 01 D3		            stx PORTB
   777 				             
   778 35D9 A0 00		            ldy #$00
   779 35DB			L368E
   780 35DB B9 52 36		REAA008     lda BUFFERXX1,Y
   781 35DE 91 34		            sta (BFENLO),Y
   782 35E0 C8			            iny
   783 35E1 CC 08 03		            cpy DBYTLO
   784 35E4 D0 F5		            bne L368E
   785 35E6 F0 0B		            beq RDSIOEND
   786 35E8			L369B
   787 35E8 B9 52 36		REAA007     lda BUFFERXX1,Y
   788 35EB 91 32		            sta (BUFRLO),Y
   789 35ED C8			            iny
   790 35EE CC 08 03		            cpy DBYTLO
   791 35F1 D0 F5		            bne L369B
   792 				            
   793 35F3 A0 01		RDSIOEND    ldy #$01
   794 35F5 2C A0 8B		            bit $8BA0 ; $2c, ldy #$8b
   795 35F8 8E 01 D3		            stx PORTB
   796 35FB A9 E0		            lda #$E0
   797 35FD 8D 0E D4		            sta NMIEN
   798 3600 58			            cli
   799 3601 98			            tya
   800 3602 60			            rts
   801 				            
   802 3603 00			BNKCNT      .byte $00
   803 3604 00			SPARBNKS    .byte $00
   804
   805 				; drive configuration buffer
   806 3605 28 01 12		CONFBUF     .byte $28,$01,$12
   807 3608 00 00 00 00		L36BB       .byte $00,$00,$00,$00
   808 360C 80 FF 00 00 00	L36BF       .byte $80,$FF,$00,$00,$00
   809
   810 3611 01			DRVNUM      .byte $01
   811
   812 3612 60 64 68 6C 20 24 + BNKSWTMSK   .byte $60,$64,$68,$6C,$20,$24,$28,$2C
   813 361A 40 44 48 4C 00 04 +             .byte $40,$44,$48,$4C,$00,$04,$08,$0C
   814 3622 62 66 6A 6E 22 26 +             .byte $62,$66,$6A,$6E,$22,$26,$2A,$2E
   815 362A 42 46 4A 4E 02 06 +             .byte $42,$46,$4A,$4E,$02,$06,$0A,$0E
   816 				; extension for 1088k
   817 3632 E0 E4 E8 EC A0 A4 +             .byte $E0,$E4,$E8,$EC,$A0,$A4,$A8,$AC
   818 363A C0 C4 C8 CC 80 84 +             .byte $C0,$C4,$C8,$CC,$80,$84,$88,$8C
   819 3642 E2 E6 EA EE A2 A6 +             .byte $E2,$E6,$EA,$EE,$A2,$A6,$AA,$AE
   820 364A C2 C6 CA CE 82 86 +             .byte $C2,$C6,$CA,$CE,$82,$86,$8A,$8E
   821
   822 				; $100 Bytes
   823 3652			BUFFERXX1
   824
   825 				;            org $37E6
   826 = 3752			REAEND      = BUFFERXX1 + $100
   827 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   828 				;;; END OF REALLOC BLOCK
   829 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   830
   831
   832 				; $20 Bytes extension $40
   833 = 3752			BNKSAVBUF   = REAEND
   834
   835 				; $20 bytes extension $40
   836 				;            org $3806
   837 = 3792			BNKSAVBUF2  = BNKSAVBUF + $40
   838
   839 				 
   840 				;           org $3826
   841 3652			            org BNKSAVBUF2 + $40
   842 				; realloc whole addresses
   843 37D2-38D4> D6 32		REATAB      .word REAA001+1 ;$33CA
   844 37D4 E0 32		            .word REAA002+1 ;$33D4
   845 37D6 E7 32		            .word REAA003+1 ;$33DB
   846 37D8 E4 34		            .word REAA004+1 ;$3583
   847 37DA A9 35		            .word REAA005+1 ;$364E
   848 37DC CE 35		            .word REAA006+1 ;$367E
   849 37DE E9 35		            .word REAA007+1 ;$369C
   850 37E0 DC 35		            .word REAA008+1 ;$368F
   851 37E2 06 35		            .word REAA009+1 ;$35A5
   852 37E4 0D 35		            .word REAA010+1 ;$35AC
   853 37E6 27 35		            .word REAA011+1 ;$35C6
   854 37E8 39 35		            .word REAA012+1 ;$35D8
   855 37EA 40 35		            .word REAA013+1 ;$35DF
   856 37EC 43 35		            .word REAA014+1 ;$35E2
   857 37EE 5B 35		            .word REAA015+1 ;$35FA
   858 37F0 60 35		            .word REAA016+1 ;$35FF
   859 37F2 8D 35		            .word REAA017+1 ;$362C
   860 37F4 B7 35		            .word REAA018+1 ;$365C
   861 37F6 BD 35		            .word REAA019+1 ;$3667
   862 37F8 71 35		            .word REAA020+1 ;$3610
   863 37FA B4 35		            .word REAA021+1 ;$3659
   864 37FC 00 00		            .word $0000
   865 				 
   866 				; realloc address low byte           
   867 37FE BD 32		            .word REAL001+1 ;$33B1
   868 3800 D9 32		            .word REAL002+1 ;$33CD
   869 3802 CF 34		            .word REAL003+1 ;$356E
   870 3804 00 00		            .word $0000
   871 				; realloc address high byte (address to high byte and value of low byte)
   872 3806 C1 32		            .word REAH001+1  ;$33B5
   873 3808 CB			            .byte <JSRDOSINI ;$6A
   874 				                        
   875 3809 E3 32		            .word REAH002+1 ;$33D7
   876 380B D9			            .byte <RAMDSIO  ;$78
   877 				            
   878 380C D4 34		            .word REAH003+1  ;$3573
   879 380E 52			            .byte <BNKSAVBUF ;$E6
   880 				            
   881 380F 00 00		            .word $0000
   882 				            
   883 3811 A9 00		REASTART    lda #$00
   884 3813 8D D5 38		            sta REALOOPCNT
   885 3816 AE D5 38		REALOOP     ldx REALOOPCNT
   886 3819 BD 80 05		            lda REATABADR,X
   887 381C 8D BB 38		            sta L3910+1
   888 381F BD 81 05		            lda REATABADR+1,X
   889 3822 8D BC 38		            sta L3910+2
   890 3825 0D BB 38		            ora L3910+1
   891 3828 D0 01		            bne L3881
   892 382A 60			            rts
   893 				            
   894 382B 38			L3881       sec
   895 382C BD 84 05		            lda READSTADR,X
   896 382F FD 82 05		            sbc REASRCADR,X
   897 3832 8D D6 38		            sta READIFLO
   898 3835 BD 85 05		            lda READSTADR+1,X
   899 3838 FD 83 05		            sbc REASRCADR+1,X
   900 383B 8D D7 38		            sta READIFHI
   901 				            
   902 383E 20 C6 38		L3894       jsr L391C
   903 3841 F0 13		            beq L38AC
   904 3843 B1 D7		            lda ($D7),Y
   905 3845 18			            clc
   906 3846 6D D6 38		            adc READIFLO
   907 3849 91 D7		            sta ($D7),Y
   908 384B C8			            iny
   909 384C B1 D7		            lda ($D7),Y
   910 384E 6D D7 38		            adc READIFHI
   911 3851 91 D7		            sta ($D7),Y
   912 3853 4C 3E 38		            jmp L3894
   913 3856 20 C6 38		L38AC       jsr L391C
   914 3859 F0 0B		            beq L38BC
   915 385B B1 D7		            lda ($D7),Y
   916 385D 18			            clc
   917 385E 6D D6 38		            adc READIFLO
   918 3861 91 D7		            sta ($D7),Y
   919 3863 4C 56 38		            jmp L38AC
   920 3866 20 C6 38		L38BC       jsr L391C
   921 3869 F0 11		            beq L38D2
   922 386B 20 BA 38		            jsr L3910
   923 386E 18			            clc
   924 386F 6D D6 38		            adc READIFLO
   925 3872 B1 D7		            lda ($D7),Y
   926 3874 6D D7 38		            adc READIFHI
   927 3877 91 D7		            sta ($D7),Y
   928 3879 4C 66 38		            jmp L38BC
   929 387C AE D5 38		L38D2       ldx REALOOPCNT
   930
   931 387F BD 86 05		            lda CPYFROMADR,X
   932 3882 8D 9D 38		            sta L38F2+1
   933 3885 BD 87 05		            lda CPYFROMADR+1,X
   934 3888 8D 9E 38		            sta L38F2+2
   935
   936 388B BD 8A 05		            lda CPYTOADR,X
   937 388E 8D A0 38		            sta L38F2+4
   938 3891 BD 8B 05		            lda CPYTOADR+1,X
   939 3894 8D A1 38		            sta L38F2+5
   940
   941 3897 BC 89 05		            ldy CPYLENGTH+1,X
   942 389A A2 00		            ldx #$00
   943 389C BD FF FF		L38F2       lda $FFFF,X
   944 389F 9D FF FF		            sta $FFFF,X
   945 38A2 E8			            inx
   946 38A3 D0 F7		            bne L38F2
   947 38A5 EE 9E 38		            inc L38F2+2
   948 38A8 EE A1 38		            inc L38F2+5
   949 38AB 88			            dey
   950 38AC 10 EE		            bpl L38F2
   951 38AE AD D5 38		            lda REALOOPCNT
   952 38B1 18			            clc
   953 38B2 69 0C		            adc #$0C
   954 38B4 8D D5 38		            sta REALOOPCNT
   955 38B7 4C 16 38		            jmp REALOOP
   956 				            
   957 38BA AD FF FF		L3910       lda $FFFF
   958 38BD EE BB 38		            inc L3910+1
   959 38C0 D0 03		            bne L391B
   960 38C2 EE BC 38		            inc L3910+2
   961 38C5 60			L391B       rts
   962
   963 38C6 20 BA 38		L391C       jsr L3910
   964 38C9 85 D7		            sta $D7
   965 38CB 20 BA 38		            jsr L3910
   966 38CE A0 00		            ldy #$00
   967 38D0 85 D8		            sta $D8
   968 38D2 05 D7		            ora $D7
   969 38D4 60			            rts
   970
   971 				; $01 byte
   972 38D5			REALOOPCNT  ;= $392B
   973 = 38D6			READIFLO   = REALOOPCNT+1
   974 = 38D7			READIFHI   = READIFLO+1
   975
   976 				;
   977 38D5			            org $0580
   978 				; realloc code pointer
   979 0580-058D> D2 37		REATABADR   .word REATAB
   980 0582 CB 34		REASRCADR   .word REABEGIN
   981 0584 FF FF		READSTADR   .word $FFFF
   982 				; copy code pointer
   983 0586 CB 34		CPYFROMADR  .word REABEGIN
   984 0588 87 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
   985 058A FF FF		CPYTOADR    .word $FFFF
   986
   987 058C 00 00		            .word $0000
   988
   989 				         
